HLOCATION LocationOpen ['DWORD version', ' VOID *pReserved', ' DWORD flags // Additional config flags - must be 0 currently']
DWORD LocationClose ['HLOCATION hLocation // HLOCATION returned by LocationOpen']
DWORD LocationRegisterForReport ['HLOCATION hLocation', ' HANDLE hNewLocationReport', ' HANDLE hStateChangeEvent', ' REFGUID reportType', ' DWORD flags // Optional config flags - must be 0 currently']
DWORD LocationUnRegisterForReport ['HLOCATION hLocation', ' REFGUID reportType', ' DWORD flags // Optional config flags - must be 0 currently']
DWORD LocationGetReport ['HLOCATION hLocation', ' REFGUID reportType', ' DWORD maximumAge', '// Maximum age', 'in ms', 'the report may be for success. LOCATION_REPORT *pLocationReport', ' DWORD *pcbLocationReport', ' DWORD flags // Optional config flags - must be 0 currently']
DWORD LocationGetServiceState ['HLOCATION hLocation', ' LOCATION_SERVICE_STATE *pServiceState // Buffer to retrieve information about Location Framework']
DWORD LocationGetProvidersInfo ['HLOCATION hLocation', ' PROVIDER_INFORMATION *pProviders', ' DWORD *pcbBuffer // Number of bytes of pProviders array']
DWORD LocationGetResolversInfo ['HLOCATION hLocation', ' RESOLVER_INFORMATION *pResolvers', ' DWORD *pcbBuffer // Number of bytes of pResolvers array']
HLOCATIONPLUGIN LocationPluginOpen ['HLOCATION hLocation', ' REFGUID pluginGuid // GUID identifier of the plugin to open']
DWORD LocationPluginIOCTL ['HLOCATION hLocation', ' HLOCATIONPLUGIN hPlugin', ' DWORD dwCode', ' BYTE *pbIn', ' DWORD cbIn', ' BYTE *pbOut', ' DWORD *pcbOut // Number of bytes in pbOut']
DWORD LocationPluginClose ['HLOCATION hLocation', ' HLOCATIONPLUGIN hPlugin // HLOCATIONPLUGIN returned by LocationPluginOpen']
BOOL CeConvertStrToSD ['IN LPCWSTR StringSecurityDescriptor', 'IN DWORD StringSDRevision', 'OUT PSECURITY_DESCRIPTOR *SecurityDescriptor', 'OUT PULONG SecurityDescriptorSize OPTIONAL']
BOOL CeConvertSDToStr ['IN PSECURITY_DESCRIPTOR SecurityDescriptor', 'IN DWORD RequestedStringSDRevision', 'IN SECURITY_INFORMATION SecurityInformation', 'OUT LPWSTR *StringSecurityDescriptor OPTIONAL', 'OUT PULONG StringSecurityDescriptorLen OPTIONAL']
DWORD FSDMGR_GetDiskInfo ['HDSK hDsk', 'PFDI pfdi']
DWORD FSDMGR_ReadDiskEx ['PFSGI pfsgi', 'PFSGR pfsgr']
DWORD FSDMGR_WriteDiskEx ['PFSGI pfsgi', 'PFSGR pfsgr']
HVOL FSDMGR_RegisterVolume ['HDSK hDsk', 'PCWSTR pwsName', 'PVOLUME pVolume']
HVOL FSDMGR_GetVolumeHandle ['HDSK hDsk']
void FSDMGR_DeregisterVolume ['HVOL hVol']
HANDLE FSDMGR_CreateFileHandle ['HVOL hVol', 'HANDLE hProc', 'PFILE pFile']
HANDLE FSDMGR_CreateSearchHandle ['HVOL hVol', 'HANDLE hProc', 'PSEARCH pSearch']
BOOL FSDMGR_GetRegistryValue ['HDSK hDsk', 'PCTSTR szValueName', 'PDWORD pdwValue']
BOOL FSDMGR_GetRegistryFlag ['HDSK pDsk', 'const TCHAR *szValueName', 'PDWORD pdwFlag', 'DWORD dwSet']
LRESULT FSDMGR_GetMountFlags ['HVOL hVol', 'DWORD* pMountFlags']
LRESULT FSDMGR_AsyncEnterVolume ['HVOL hVol', 'HANDLE* phLock', 'LPVOID* ppLockData']
LRESULT FSDMGR_AsyncExitVolume ['HANDLE hLock', 'LPVOID pLockData']
BOOL FSDMGR_GetDiskName ['HDSK pDsk', 'TCHAR *szDiskName']
BOOL FSDMGR_AdvertiseInterface ['const GUID *pGuid', 'LPCWSTR lpszName', 'BOOL fAdd']
DWORD FSDMGR_FormatVolume ['HDSK pDsk', 'LPVOID pParams']
DWORD FSDMGR_ScanVolume ['HDSK pDsk', 'LPVOID pParams']
LRESULT FSDMGR_ParseSecurityDescriptor ['PSECURITY_ATTRIBUTES pSecurityAttributes', 'PSECURITY_DESCRIPTOR* ppSecurityDescriptor', 'DWORD* pSecurityDescriptorSize']
DWORD FSDMGR_CreateCache ['HDSK pDsk', 'DWORD dwStart', 'DWORD dwEnd', 'DWORD dwCacheSize', 'DWORD dwBlockSize', 'DWORD dwCreateFlags']
DWORD FSDMGR_DeleteCache ['DWORD dwCacheId']
DWORD FSDMGR_ResizeCache ['DWORD dwCacheId', 'DWORD dwSize', 'DWORD dwResizeFlags']
DWORD FSDMGR_CachedRead ['DWORD dwCacheId', 'DWORD dwBlockNum', 'DWORD dwNumBlocks', 'PVOID pBuffer', 'DWORD dwReadFlags']
DWORD FSDMGR_CachedWrite ['DWORD dwCacheId', 'DWORD dwBlockNum', 'DWORD dwNumBlocks', 'PVOID pBuffer', 'DWORD dwWriteFlags']
DWORD FSDMGR_FlushCache ['DWORD dwCacheId', 'PSECTOR_LIST_ENTRY pSectorList', 'DWORD dwNumEntries', 'DWORD dwFlushFlags']
DWORD FSDMGR_SyncCache ['DWORD dwCacheId', 'PSECTOR_LIST_ENTRY pSectorList', 'DWORD dwNumEntries', 'DWORD dwSyncFlags']
DWORD FSDMGR_InvalidateCache ['DWORD dwCacheId', 'PSECTOR_LIST_ENTRY pSectorList', 'DWORD dwNumEntries', 'DWORD dwFlags']
BOOL FSDMGR_CacheIoControl ['DWORD dwCacheId', 'DWORD dwIoControlCode', 'LPVOID lpInBuf', 'DWORD nInBufSize', 'LPVOID lpOutBuf', 'DWORD nOutBufSize', 'LPDWORD lpBytesReturned', 'LPOVERLAPPED lpOverlapped']
HDSK FSDMGR_DeviceHandleToHDSK ['HANDLE hDisk']
RPC_ENTRY RpcBindingCopy ['IN RPC_BINDING_HANDLE SourceBinding', 'OUT RPC_BINDING_HANDLE __RPC_FAR * DestinationBinding']
RPC_ENTRY RpcBindingFree ['IN OUT RPC_BINDING_HANDLE __RPC_FAR * Binding']
RPC_ENTRY RpcBindingSetOption ['IN RPC_BINDING_HANDLE hBinding', 'IN unsigned long option', 'IN unsigned long optionValue']
RPC_ENTRY RpcBindingInqOption ['IN RPC_BINDING_HANDLE hBinding', 'IN unsigned long option', 'OUT unsigned long *pOptionValue']
RPC_ENTRY RpcBindingFromStringBindingA ['IN unsigned char __RPC_FAR * StringBinding', 'OUT RPC_BINDING_HANDLE __RPC_FAR * Binding']
RPC_ENTRY RpcBindingFromStringBindingW ['IN unsigned short __RPC_FAR * StringBinding', 'OUT RPC_BINDING_HANDLE __RPC_FAR * Binding']
RPC_ENTRY RpcBindingFromStringBinding ['IN unsigned char __RPC_FAR * StringBinding', 'OUT RPC_BINDING_HANDLE __RPC_FAR * Binding']
RPC_ENTRY RpcBindingInqObject ['IN RPC_BINDING_HANDLE Binding', 'OUT UUID __RPC_FAR * ObjectUuid']
RPC_ENTRY RpcBindingReset ['IN RPC_BINDING_HANDLE Binding']
RPC_ENTRY RpcBindingSetObject ['IN RPC_BINDING_HANDLE Binding', 'IN UUID __RPC_FAR * ObjectUuid']
RPC_ENTRY RpcMgmtInqDefaultProtectLevel ['IN unsigned long AuthnSvc', 'OUT unsigned long __RPC_FAR *AuthnLevel']
RPC_ENTRY RpcBindingToStringBindingA ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * StringBinding']
RPC_ENTRY RpcBindingToStringBindingW ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned short __RPC_FAR * __RPC_FAR * StringBinding']
RPC_ENTRY RpcBindingToStringBinding ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * StringBinding']
RPC_ENTRY RpcBindingVectorFree ['IN OUT RPC_BINDING_VECTOR __RPC_FAR * __RPC_FAR * BindingVector']
RPC_ENTRY RpcStringBindingComposeA ['IN unsigned char __RPC_FAR * ObjUuid OPTIONAL', 'IN unsigned char __RPC_FAR * Protseq OPTIONAL', 'IN unsigned char __RPC_FAR * NetworkAddr OPTIONAL', 'IN unsigned char __RPC_FAR * Endpoint OPTIONAL', 'IN unsigned char __RPC_FAR * Options OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * StringBinding OPTIONAL']
RPC_ENTRY RpcStringBindingComposeW ['IN unsigned short __RPC_FAR * ObjUuid OPTIONAL', 'IN unsigned short __RPC_FAR * Protseq OPTIONAL', 'IN unsigned short __RPC_FAR * NetworkAddr OPTIONAL', 'IN unsigned short __RPC_FAR * Endpoint OPTIONAL', 'IN unsigned short __RPC_FAR * Options OPTIONAL', 'OUT unsigned short __RPC_FAR * __RPC_FAR * StringBinding OPTIONAL']
RPC_ENTRY RpcStringBindingCompose ['IN unsigned char __RPC_FAR * ObjUuid OPTIONAL', 'IN unsigned char __RPC_FAR * Protseq OPTIONAL', 'IN unsigned char __RPC_FAR * NetworkAddr OPTIONAL', 'IN unsigned char __RPC_FAR * Endpoint OPTIONAL', 'IN unsigned char __RPC_FAR * Options OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * StringBinding OPTIONAL']
RPC_ENTRY RpcStringBindingParseA ['IN unsigned char __RPC_FAR * StringBinding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ObjUuid OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * Protseq OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * NetworkAddr OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * Endpoint OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * NetworkOptions OPTIONAL']
RPC_ENTRY RpcStringBindingParseW ['IN unsigned short __RPC_FAR * StringBinding', 'OUT unsigned short __RPC_FAR * __RPC_FAR * ObjUuid OPTIONAL', 'OUT unsigned short __RPC_FAR * __RPC_FAR * Protseq OPTIONAL', 'OUT unsigned short __RPC_FAR * __RPC_FAR * NetworkAddr OPTIONAL', 'OUT unsigned short __RPC_FAR * __RPC_FAR * Endpoint OPTIONAL', 'OUT unsigned short __RPC_FAR * __RPC_FAR * NetworkOptions OPTIONAL']
RPC_ENTRY RpcStringBindingParse ['IN unsigned char __RPC_FAR * StringBinding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ObjUuid OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * Protseq OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * NetworkAddr OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * Endpoint OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * NetworkOptions OPTIONAL']
RPC_ENTRY RpcStringFreeA ['IN OUT unsigned char __RPC_FAR * __RPC_FAR * String']
RPC_ENTRY RpcStringFreeW ['IN OUT unsigned short __RPC_FAR * __RPC_FAR * String']
RPC_ENTRY RpcStringFree ['IN OUT unsigned char __RPC_FAR * __RPC_FAR * String']
RPC_ENTRY RpcIfInqId ['IN RPC_IF_HANDLE RpcIfHandle', 'OUT RPC_IF_ID __RPC_FAR * RpcIfId']
RPC_ENTRY RpcNetworkIsProtseqValidA ['IN unsigned char __RPC_FAR * Protseq']
RPC_ENTRY RpcNetworkIsProtseqValidW ['IN unsigned short __RPC_FAR * Protseq']
RPC_ENTRY RpcNetworkIsProtseqValid ['IN unsigned char __RPC_FAR * Protseq']
RPC_ENTRY RpcMgmtInqComTimeout ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned int __RPC_FAR * Timeout']
RPC_ENTRY RpcMgmtSetComTimeout ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned int Timeout']
RPC_ENTRY RpcMgmtSetCancelTimeout ['long Timeout']
RPC_ENTRY RpcNetworkInqProtseqsA ['OUT RPC_PROTSEQ_VECTORA __RPC_FAR * __RPC_FAR * ProtseqVector']
RPC_ENTRY RpcNetworkInqProtseqsW ['OUT RPC_PROTSEQ_VECTORW __RPC_FAR * __RPC_FAR * ProtseqVector']
RPC_ENTRY RpcNetworkInqProtseqs ['OUT RPC_PROTSEQ_VECTOR __RPC_FAR * __RPC_FAR * ProtseqVector']
RPC_ENTRY RpcObjectInqType ['IN UUID __RPC_FAR * ObjUuid', 'OUT UUID __RPC_FAR * TypeUuid OPTIONAL']
RPC_ENTRY RpcObjectSetInqFn ['IN RPC_OBJECT_INQ_FN __RPC_FAR * InquiryFn']
RPC_ENTRY RpcObjectSetType ['IN UUID __RPC_FAR * ObjUuid', 'IN UUID __RPC_FAR * TypeUuid OPTIONAL']
RPC_ENTRY RpcProtseqVectorFreeA ['IN OUT RPC_PROTSEQ_VECTORA __RPC_FAR * __RPC_FAR * ProtseqVector']
RPC_ENTRY RpcProtseqVectorFreeW ['IN OUT RPC_PROTSEQ_VECTORW __RPC_FAR * __RPC_FAR * ProtseqVector']
RPC_ENTRY RpcProtseqVectorFree ['IN OUT RPC_PROTSEQ_VECTOR __RPC_FAR * __RPC_FAR * ProtseqVector']
RPC_ENTRY RpcServerInqBindings ['OUT RPC_BINDING_VECTOR __RPC_FAR * __RPC_FAR * BindingVector']
RPC_ENTRY RpcServerInqIf ['IN RPC_IF_HANDLE IfSpec', 'IN UUID __RPC_FAR * MgrTypeUuid', 'OPTIONAL OUT RPC_MGR_EPV __RPC_FAR * __RPC_FAR * MgrEpv']
RPC_ENTRY RpcServerListen ['IN unsigned int MinimumCallThreads', 'IN unsigned int MaxCalls', 'IN unsigned int DontWait']
RPC_ENTRY RpcServerRegisterIf ['IN RPC_IF_HANDLE IfSpec', 'IN UUID __RPC_FAR * MgrTypeUuid OPTIONAL', 'IN RPC_MGR_EPV __RPC_FAR * MgrEpv OPTIONAL']
RPC_ENTRY RpcServerRegisterIfEx ['IN RPC_IF_HANDLE IfSpec', 'IN UUID __RPC_FAR * MgrTypeUuid', 'IN RPC_MGR_EPV __RPC_FAR * MgrEpv', 'IN unsigned int Flags', 'IN unsigned int MaxCalls', 'IN RPC_IF_CALLBACK_FN __RPC_FAR *IfCallback']
RPC_ENTRY RpcServerUnregisterIf ['IN RPC_IF_HANDLE IfSpec', 'IN UUID __RPC_FAR * MgrTypeUuid', 'OPTIONAL IN unsigned int WaitForCallsToComplete']
RPC_ENTRY RpcServerUseAllProtseqs ['IN unsigned int MaxCalls', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseAllProtseqsEx ['IN unsigned int MaxCalls', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseAllProtseqsIf ['IN unsigned int MaxCalls', 'IN RPC_IF_HANDLE IfSpec', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseAllProtseqsIfEx ['IN unsigned int MaxCalls', 'IN RPC_IF_HANDLE IfSpec', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseqA ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqExA ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseqW ['IN unsigned short __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqExW ['IN unsigned short __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseq ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqEx ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseqEpA ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN unsigned char __RPC_FAR * Endpoint', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqEpExA ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN unsigned char __RPC_FAR * Endpoint', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseqEpW ['IN unsigned short __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN unsigned short __RPC_FAR * Endpoint', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqEpExW ['IN unsigned short __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN unsigned short __RPC_FAR * Endpoint', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseqEp ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN unsigned char __RPC_FAR * Endpoint', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqEpEx ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN unsigned char __RPC_FAR * Endpoint', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseqIfA ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN RPC_IF_HANDLE IfSpec', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqIfExA ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN RPC_IF_HANDLE IfSpec', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseqIfW ['IN unsigned short __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN RPC_IF_HANDLE IfSpec', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqIfExW ['IN unsigned short __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN RPC_IF_HANDLE IfSpec', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcServerUseProtseqIf ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN RPC_IF_HANDLE IfSpec', 'IN void __RPC_FAR * SecurityDescriptor OPTIONAL']
RPC_ENTRY RpcServerUseProtseqIfEx ['IN unsigned char __RPC_FAR * Protseq', 'IN unsigned int MaxCalls', 'IN RPC_IF_HANDLE IfSpec', 'IN void __RPC_FAR * SecurityDescriptor', 'IN PRPC_POLICY Policy']
RPC_ENTRY RpcMgmtStatsVectorFree ['IN RPC_STATS_VECTOR ** StatsVector']
RPC_ENTRY RpcMgmtInqStats ['IN RPC_BINDING_HANDLE Binding', 'OUT RPC_STATS_VECTOR ** Statistics']
RPC_ENTRY RpcMgmtIsServerListening ['IN RPC_BINDING_HANDLE Binding']
RPC_ENTRY RpcMgmtStopServerListening ['IN RPC_BINDING_HANDLE Binding']
RPC_ENTRY RpcMgmtWaitServerListen ['void']
RPC_ENTRY RpcMgmtSetServerStackSize ['IN unsigned long ThreadStackSize']
RPC_ENTRY RpcSsDontSerializeContext ['void']
RPC_ENTRY RpcMgmtEnableIdleCleanup ['void']
RPC_ENTRY RpcMgmtInqIfIds ['IN RPC_BINDING_HANDLE Binding', 'OUT RPC_IF_ID_VECTOR __RPC_FAR * __RPC_FAR * IfIdVector']
RPC_ENTRY RpcIfIdVectorFree ['IN OUT RPC_IF_ID_VECTOR __RPC_FAR * __RPC_FAR * IfIdVector']
RPC_ENTRY RpcMgmtInqServerPrincNameA ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long AuthnSvc', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ServerPrincName']
RPC_ENTRY RpcMgmtInqServerPrincNameW ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long AuthnSvc', 'OUT unsigned short __RPC_FAR * __RPC_FAR * ServerPrincName']
RPC_ENTRY RpcMgmtInqServerPrincName ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long AuthnSvc', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ServerPrincName']
RPC_ENTRY RpcServerInqDefaultPrincNameA ['IN unsigned long AuthnSvc', 'OUT unsigned char __RPC_FAR * __RPC_FAR * PrincName']
RPC_ENTRY RpcServerInqDefaultPrincNameW ['IN unsigned long AuthnSvc', 'OUT unsigned short __RPC_FAR * __RPC_FAR * PrincName']
RPC_ENTRY RpcServerInqDefaultPrincName ['IN unsigned long AuthnSvc', 'OUT unsigned char __RPC_FAR * __RPC_FAR * PrincName']
RPC_ENTRY RpcEpResolveBinding ['IN RPC_BINDING_HANDLE Binding', 'IN RPC_IF_HANDLE IfSpec']
RPC_ENTRY RpcNsBindingInqEntryNameA ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long EntryNameSyntax', 'OUT unsigned char __RPC_FAR * __RPC_FAR * EntryName']
RPC_ENTRY RpcNsBindingInqEntryNameW ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long EntryNameSyntax', 'OUT unsigned short __RPC_FAR * __RPC_FAR * EntryName']
RPC_ENTRY RpcNsBindingInqEntryName ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long EntryNameSyntax', 'OUT unsigned char __RPC_FAR * __RPC_FAR * EntryName']
RPC_ENTRY RpcBindingInqAuthClientA ['IN RPC_BINDING_HANDLE ClientBinding', 'OPTIONAL OUT RPC_AUTHZ_HANDLE __RPC_FAR * Privs', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ServerPrincName', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnLevel', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnSvc', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthzSvc OPTIONAL']
RPC_ENTRY RpcBindingInqAuthClientW ['IN RPC_BINDING_HANDLE ClientBinding', 'OPTIONAL OUT RPC_AUTHZ_HANDLE __RPC_FAR * Privs', 'OUT unsigned short __RPC_FAR * __RPC_FAR * ServerPrincName', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnLevel', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnSvc', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthzSvc OPTIONAL']
RPC_ENTRY RpcBindingInqAuthInfoA ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ServerPrincName', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnLevel', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnSvc', 'OPTIONAL OUT RPC_AUTH_IDENTITY_HANDLE __RPC_FAR * AuthIdentity', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthzSvc OPTIONAL']
RPC_ENTRY RpcBindingInqAuthInfoW ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned short __RPC_FAR * __RPC_FAR * ServerPrincName', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnLevel', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnSvc', 'OPTIONAL OUT RPC_AUTH_IDENTITY_HANDLE __RPC_FAR * AuthIdentity', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthzSvc OPTIONAL']
RPC_ENTRY RpcBindingSetAuthInfoA ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned char __RPC_FAR * ServerPrincName', 'IN unsigned long AuthnLevel', 'IN unsigned long AuthnSvc', 'IN RPC_AUTH_IDENTITY_HANDLE AuthIdentity', 'OPTIONAL IN unsigned long AuthzSvc']
RPC_ENTRY RpcBindingSetAuthInfoExA ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned char __RPC_FAR * ServerPrincName', 'IN unsigned long AuthnLevel', 'IN unsigned long AuthnSvc', 'IN RPC_AUTH_IDENTITY_HANDLE AuthIdentity', 'OPTIONAL IN unsigned long AuthzSvc', 'IN RPC_SECURITY_QOS *SecurityQos OPTIONAL']
RPC_ENTRY RpcBindingSetAuthInfoW ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned short __RPC_FAR * ServerPrincName', 'IN unsigned long AuthnLevel', 'IN unsigned long AuthnSvc', 'IN RPC_AUTH_IDENTITY_HANDLE AuthIdentity', 'OPTIONAL IN unsigned long AuthzSvc']
RPC_ENTRY RpcBindingSetAuthInfoExW ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned short __RPC_FAR * ServerPrincName', 'IN unsigned long AuthnLevel', 'IN unsigned long AuthnSvc', 'IN RPC_AUTH_IDENTITY_HANDLE AuthIdentity', 'OPTIONAL IN unsigned long AuthzSvc', 'OPTIONAL IN RPC_SECURITY_QOS *SecurityQOS']
RPC_ENTRY RpcBindingInqAuthInfoExA ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ServerPrincName', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnLevel', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnSvc', 'OPTIONAL OUT RPC_AUTH_IDENTITY_HANDLE __RPC_FAR * AuthIdentity', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthzSvc', 'OPTIONAL IN unsigned long RpcQosVersion', 'OUT RPC_SECURITY_QOS *SecurityQOS']
RPC_ENTRY RpcBindingInqAuthInfoExW ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned short __RPC_FAR * __RPC_FAR * ServerPrincName', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnLevel', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnSvc', 'OPTIONAL OUT RPC_AUTH_IDENTITY_HANDLE __RPC_FAR * AuthIdentity', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthzSvc OPTIONAL', 'IN unsigned long RpcQosVersion', 'OUT RPC_SECURITY_QOS *SecurityQOS']
RPC_ENTRY RpcServerRegisterAuthInfoA ['IN unsigned char __RPC_FAR * ServerPrincName', 'IN unsigned long AuthnSvc', 'IN RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn OPTIONAL', 'IN void __RPC_FAR * Arg OPTIONAL']
RPC_ENTRY RpcServerRegisterAuthInfoW ['IN unsigned short __RPC_FAR * ServerPrincName', 'IN unsigned long AuthnSvc', 'IN RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn OPTIONAL', 'IN void __RPC_FAR * Arg OPTIONAL']
RPC_ENTRY RpcBindingInqAuthClient ['IN RPC_BINDING_HANDLE ClientBinding', 'OPTIONAL OUT RPC_AUTHZ_HANDLE __RPC_FAR * Privs', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ServerPrincName', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnLevel', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnSvc', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthzSvc OPTIONAL']
RPC_ENTRY RpcBindingInqAuthInfo ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * ServerPrincName', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnLevel', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthnSvc', 'OPTIONAL OUT RPC_AUTH_IDENTITY_HANDLE __RPC_FAR * AuthIdentity', 'OPTIONAL OUT unsigned long __RPC_FAR * AuthzSvc OPTIONAL']
RPC_ENTRY RpcBindingSetAuthInfo ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned char __RPC_FAR * ServerPrincName', 'IN unsigned long AuthnLevel', 'IN unsigned long AuthnSvc', 'IN RPC_AUTH_IDENTITY_HANDLE AuthIdentity', 'OPTIONAL IN unsigned long AuthzSvc']
RPC_ENTRY RpcServerRegisterAuthInfo ['IN unsigned char __RPC_FAR * ServerPrincName', 'IN unsigned long AuthnSvc', 'IN RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn OPTIONAL', 'IN void __RPC_FAR * Arg OPTIONAL']
RPC_ENTRY RpcBindingServerFromClient ['IN RPC_BINDING_HANDLE ClientBinding', 'OUT RPC_BINDING_HANDLE __RPC_FAR * ServerBinding']
RPC_ENTRY RpcRaiseException ['IN RPC_STATUS exception']
RPC_ENTRY RpcTestCancel ['']
RPC_ENTRY RpcServerTestCancel ['IN RPC_BINDING_HANDLE BindingHandle OPTIONAL']
RPC_ENTRY RpcCancelThread ['IN void * Thread']
RPC_ENTRY UuidCreate ['OUT UUID __RPC_FAR * Uuid']
RPC_ENTRY UuidToStringA ['IN UUID __RPC_FAR * Uuid', 'OUT unsigned char __RPC_FAR * __RPC_FAR * StringUuid']
RPC_ENTRY UuidFromStringA ['IN unsigned char __RPC_FAR * StringUuid', 'OUT UUID __RPC_FAR * Uuid']
RPC_ENTRY UuidToStringW ['IN UUID __RPC_FAR * Uuid', 'OUT unsigned short __RPC_FAR * __RPC_FAR * StringUuid']
RPC_ENTRY UuidFromStringW ['IN unsigned short __RPC_FAR * StringUuid', 'OUT UUID __RPC_FAR * Uuid']
RPC_ENTRY UuidToString ['IN UUID __RPC_FAR * Uuid', 'OUT unsigned char __RPC_FAR * __RPC_FAR * StringUuid']
RPC_ENTRY UuidFromString ['IN unsigned char __RPC_FAR * StringUuid', 'OUT UUID __RPC_FAR * Uuid']
RPC_ENTRY UuidCompare ['IN UUID __RPC_FAR * Uuid1', 'IN UUID __RPC_FAR * Uuid2', 'OUT RPC_STATUS __RPC_FAR * Status']
RPC_ENTRY UuidCreateNil ['OUT UUID __RPC_FAR * NilUuid']
RPC_ENTRY UuidEqual ['IN UUID __RPC_FAR * Uuid1', 'IN UUID __RPC_FAR * Uuid2', 'OUT RPC_STATUS __RPC_FAR * Status']
RPC_ENTRY UuidHash ['IN UUID __RPC_FAR * Uuid', 'OUT RPC_STATUS __RPC_FAR * Status']
RPC_ENTRY UuidIsNil ['IN UUID __RPC_FAR * Uuid', 'OUT RPC_STATUS __RPC_FAR * Status']
RPC_ENTRY RpcEpRegisterNoReplaceA ['IN RPC_IF_HANDLE IfSpec', 'IN RPC_BINDING_VECTOR * BindingVector', 'IN UUID_VECTOR * UuidVector OPTIONAL', 'IN unsigned char * Annotation']
RPC_ENTRY RpcEpRegisterNoReplaceW ['IN RPC_IF_HANDLE IfSpec', 'IN RPC_BINDING_VECTOR * BindingVector', 'IN UUID_VECTOR * UuidVector OPTIONAL', 'IN unsigned short * Annotation']
RPC_ENTRY RpcEpRegisterA ['IN RPC_IF_HANDLE IfSpec', 'IN RPC_BINDING_VECTOR * BindingVector', 'IN UUID_VECTOR * UuidVector OPTIONAL', 'IN unsigned char * Annotation']
RPC_ENTRY RpcEpRegisterW ['IN RPC_IF_HANDLE IfSpec', 'IN RPC_BINDING_VECTOR * BindingVector', 'IN UUID_VECTOR * UuidVector OPTIONAL', 'IN unsigned short * Annotation']
RPC_ENTRY RpcEpRegisterNoReplace ['IN RPC_IF_HANDLE IfSpec', 'IN RPC_BINDING_VECTOR * BindingVector', 'IN UUID_VECTOR * UuidVector OPTIONAL', 'IN unsigned char * Annotation']
RPC_ENTRY RpcEpRegister ['IN RPC_IF_HANDLE IfSpec', 'IN RPC_BINDING_VECTOR * BindingVector', 'IN UUID_VECTOR * UuidVector OPTIONAL', 'IN unsigned char * Annotation']
RPC_ENTRY RpcEpUnregister ['IN RPC_IF_HANDLE IfSpec', 'IN RPC_BINDING_VECTOR * BindingVector', 'IN UUID_VECTOR * UuidVector']
RPC_ENTRY DceErrorInqTextA ['IN RPC_STATUS RpcStatus', 'OUT unsigned char __RPC_FAR * ErrorText']
RPC_ENTRY DceErrorInqTextW ['IN RPC_STATUS RpcStatus', 'OUT unsigned short __RPC_FAR * ErrorText']
RPC_ENTRY DceErrorInqText ['IN RPC_STATUS RpcStatus', 'OUT unsigned char __RPC_FAR * ErrorText']
RPC_ENTRY RpcMgmtEpEltInqBegin ['IN RPC_BINDING_HANDLE EpBinding OPTIONAL', 'IN unsigned long InquiryType', 'IN RPC_IF_ID __RPC_FAR * IfId OPTIONAL', 'IN unsigned long VersOption OPTIONAL', 'IN UUID __RPC_FAR * ObjectUuid OPTIONAL', 'OUT RPC_EP_INQ_HANDLE __RPC_FAR * InquiryContext']
RPC_ENTRY RpcMgmtEpEltInqDone ['IN OUT RPC_EP_INQ_HANDLE __RPC_FAR * InquiryContext']
RPC_ENTRY RpcMgmtEpEltInqNextA ['IN RPC_EP_INQ_HANDLE InquiryContext', 'OUT RPC_IF_ID __RPC_FAR * IfId', 'OUT RPC_BINDING_HANDLE __RPC_FAR * Binding OPTIONAL', 'OUT UUID __RPC_FAR * ObjectUuid OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * Annotation OPTIONAL']
RPC_ENTRY RpcMgmtEpEltInqNextW ['IN RPC_EP_INQ_HANDLE InquiryContext', 'OUT RPC_IF_ID __RPC_FAR * IfId', 'OUT RPC_BINDING_HANDLE __RPC_FAR * Binding OPTIONAL', 'OUT UUID __RPC_FAR * ObjectUuid OPTIONAL', 'OUT unsigned short __RPC_FAR * __RPC_FAR * Annotation OPTIONAL']
RPC_ENTRY RpcMgmtEpEltInqNext ['IN RPC_EP_INQ_HANDLE InquiryContext', 'OUT RPC_IF_ID __RPC_FAR * IfId', 'OUT RPC_BINDING_HANDLE __RPC_FAR * Binding OPTIONAL', 'OUT unsigned char __RPC_FAR * __RPC_FAR * Annotation OPTIONAL']
RPC_ENTRY RpcMgmtEpUnregister ['IN RPC_BINDING_HANDLE EpBinding OPTIONAL', 'IN RPC_IF_ID __RPC_FAR * IfId', 'IN RPC_BINDING_HANDLE Binding', 'IN UUID __RPC_FAR * ObjectUuid OPTIONAL']
RPC_ENTRY RpcMgmtSetAuthorizationFn ['IN RPC_MGMT_AUTHORIZATION_FN AuthorizationFn']
RPC_ENTRY RpcMgmtInqParameter ['IN unsigned Parameter', 'IN unsigned long __RPC_FAR * Value']
RPC_ENTRY RpcMgmtSetParameter ['IN unsigned Parameter', 'IN unsigned long Value']
RPC_ENTRY RpcMgmtBindingInqParameter ['IN RPC_BINDING_HANDLE Handle', 'IN unsigned Parameter', 'IN unsigned long __RPC_FAR * Value']
RPC_ENTRY RpcMgmtBindingSetParameter ['IN RPC_BINDING_HANDLE Handle', 'IN unsigned Parameter', 'IN unsigned long Value']
SH SHGetMalloc ['LPMALLOC * ppMalloc']
SH SHGetSpecialFolderLocation ['HWND hwnd', 'int csidl', 'LPITEMIDLIST *ppidl']
BOOL SHGetDocumentsFolder ['LPCTSTR pszVolume', 'LPTSTR pszDocs']
SHFOLDERAPI SHGetFolderPath ['HWND hwnd', 'int csidl', 'HANDLE hToken', 'DWORD dwFlags', 'LPTSTR pszPath']
SH SHGetFolderLocation ['HWND hwnd', 'int csidl', 'HANDLE hToken', 'DWORD dwFlags', 'LPITEMIDLIST *ppidl']
SH SHLoadInProc ['REFCLSID rclsid']
SH SHGetDesktopFolder ['IShellFolder **ppshf']
SH SHGetInstanceExplorer ['IUnknown **ppunk']
SH SHGetDataFromIDListA ['IShellFolder *psf', 'LPCITEMIDLIST pidl', 'int nFormat', 'void *pv', 'int cb']
SH SHGetDataFromIDListW ['IShellFolder *psf', 'LPCITEMIDLIST pidl', 'int nFormat', 'void *pv', 'int cb']
LONG tapiRequestMakeCallW ['LPCWSTR lpszDestAddress', 'LPCWSTR lpszAppName', 'LPCWSTR lpszCalledParty', 'LPCWSTR lpszComment']
DWORD SipStatus ['']
BOOL SipSetDefaultRect ['RECT *']
BOOL SipRegisterNotification ['HWND']
BOOL SipShowIM ['DWORD']
BOOL SipGetInfo ['SIPINFO *']
BOOL SipSetInfo ['SIPINFO *']
int SipEnumIM ['IMENUMPROC']
BOOL SipGetCurrentIM ['CLSID *']
BOOL SipSetCurrentIM ['CLSID *']
APIENTRY MQDeleteQueue ['IN LPCWSTR lpwcsFormatName']
APIENTRY MQLocateBegin ['IN LPCWSTR lpwcsContext', 'IN MQRESTRICTION* pRestriction', 'IN MQCOLUMNSET* pColumns', 'IN MQSORTSET* pSort', 'OUT PHANDLE phEnum']
APIENTRY MQLocateNext ['IN HANDLE hEnum', 'IN OUT DWORD* pcProps', 'OUT MQPROPVARIANT aPropVar[]']
APIENTRY MQLocateEnd ['IN HANDLE hEnum']
APIENTRY MQOpenQueue ['IN LPCWSTR lpwcsFormatName', 'IN DWORD dwAccess', 'IN DWORD dwShareMode', 'OUT QUEUEHANDLE* phQueue']
APIENTRY MQSendMessage ['IN QUEUEHANDLE hDestinationQueue', 'IN MQMSGPROPS* pMessageProps', 'IN ITransaction *pTransaction']
APIENTRY MQReceiveMessage ['IN QUEUEHANDLE hSource', 'IN DWORD dwTimeout', 'IN DWORD dwAction', 'IN OUT MQMSGPROPS* pMessageProps', 'IN OUT LPOVERLAPPED lpOverlapped', 'IN PMQRECEIVECALLBACK fnReceiveCallback', 'IN HANDLE hCursor', 'IN ITransaction* pTransaction']
APIENTRY MQCreateCursor ['IN QUEUEHANDLE hQueue', 'OUT PHANDLE phCursor']
APIENTRY MQCloseCursor ['IN HANDLE hCursor']
APIENTRY MQCloseQueue ['IN HANDLE hQueue']
APIENTRY MQSetQueueProperties ['IN LPCWSTR lpwcsFormatName', 'IN MQQUEUEPROPS* pQueueProps']
APIENTRY MQGetQueueProperties ['IN LPCWSTR lpwcsFormatName', 'OUT MQQUEUEPROPS* pQueueProps']
APIENTRY MQGetQueueSecurity ['IN LPCWSTR lpwcsFormatName', 'IN SECURITY_INFORMATION RequestedInformation', 'OUT PSECURITY_DESCRIPTOR pSecurityDescriptor', 'IN DWORD nLength', 'OUT LPDWORD lpnLengthNeeded']
APIENTRY MQSetQueueSecurity ['IN LPCWSTR lpwcsFormatName', 'IN SECURITY_INFORMATION SecurityInformation', 'IN PSECURITY_DESCRIPTOR pSecurityDescriptor']
APIENTRY MQPathNameToFormatName ['IN LPCWSTR lpwcsPathName', 'OUT LPWSTR lpwcsFormatName', 'IN OUT LPDWORD lpdwFormatNameLength']
APIENTRY MQInstanceToFormatName ['IN GUID* pGuid', 'OUT LPWSTR lpwcsFormatName', 'IN OUT LPDWORD lpdwFormatNameLength']
APIENTRY MQFreeMemory ['IN PVOID pvMemory']
APIENTRY MQGetMachineProperties ['IN LPCWSTR lpwcsMachineName', 'IN const GUID* pguidMachineId', 'IN OUT MQQMPROPS* pQMProps']
APIENTRY MQGetSecurityContext ['IN PVOID lpCertBuffer', 'IN DWORD dwCertBufferLength', 'OUT HANDLE* hSecurityContext']
APIENTRY MQFreeSecurityContext ['IN HANDLE hSecurityContext']
APIENTRY MQBeginTransaction ['OUT ITransaction **ppTransaction']
DWORD GetSystemPowerState ['LPWSTR pBuffer', 'DWORD dwBufChars', 'PDWORD pdwFlags']
DWORD SetSystemPowerState ['LPCWSTR pwsSystemState', 'DWORD StateFlags', 'DWORD Options']
HANDLE SetPowerRequirement ['PVOID pvDevice', 'CEDEVICE_POWER_STATE DeviceState', 'ULONG DeviceFlags', 'PVOID pvSystemState', 'ULONG StateFlags']
DWORD ReleasePowerRequirement ['HANDLE hPowerReq']
HANDLE RequestPowerNotifications ['HANDLE hMsgQ', 'DWORD Flags']
DWORD StopPowerNotifications ['HANDLE h']
DWORD DevicePowerNotify ['PVOID pvDevice', 'CEDEVICE_POWER_STATE DeviceState', 'DWORD Flags']
HANDLE RegisterPowerRelationship ['PVOID pvParent', 'PVOID pvChild', 'PPOWER_CAPABILITIES pCaps', 'DWORD Flags']
DWORD ReleasePowerRelationship ['HANDLE hChild']
DWORD SetDevicePower ['PVOID pvDevice', 'DWORD dwDeviceFlags', 'CEDEVICE_POWER_STATE dwState']
DWORD GetDevicePower ['PVOID pvDevice', 'DWORD dwDeviceFlags', 'PCEDEVICE_POWER_STATE pdwState']
HWND HtmlHelpA ['HWND hwndCaller', 'LPCSTR pszFile', 'UINT uCommand', 'ULONG_PTR dwData']
HWND HtmlHelpW ['HWND hwndCaller', 'LPCWSTR pszFile', 'UINT uCommand', 'ULONG_PTR dwData']
HANDLE ConnMgrApiReadyEvent ['']
BOOL VerifyUser ['const GUID *AEKey', ' LPCWSTR wszAEDisplayText', '/*Text Plugin will display', 'if null use from registry.*/ HWND hWndParent', ' DWORD dwOptions', ' PVOID pExtended /*Reserved', 'must be 0*/']
BOOL LASSReloadConfig ['']
BOOL CreateEnrollmentConfigDialog ['HWND hParentWindow']
BOOL LASSGetValue ['DWORD ValueId', 'PVOID lpvOutBuffer', 'DWORD cbOutBuffer', 'DWORD* pcbReturned']
HLASS VerifyUserAsync ['const GUID *AEKey', ' LPCWSTR wszAEDisplayText', '/*Text Plugin will display', 'if null use from registry.*/ HWND hWndParent', ' DWORD dwOptions', ' PVOID pExtended /*Reserved', 'must be 0*/']
BOOL LASSGetResult ['HLASS h']
BOOL LASSClose ['HLASS h']
BOOL GetDialogSize ['int iResourceID', ' DLGPROC pDlgProc', ' LPARAM lParam', ' SIZE *pResult']
WINOLEAPI CreateDataAdviseHolder ['LPDATAADVISEHOLDER FAR* ppDAHolder']
WINOLEAPI ReadClassStg ['LPSTORAGE pStg', 'CLSID FAR* pclsid']
WINOLEAPI WriteClassStg ['LPSTORAGE pStg', 'REFCLSID rclsid']
WINOLEAPI ReadClassStm ['LPSTREAM pStm', 'CLSID FAR* pclsid']
WINOLEAPI WriteClassStm ['LPSTREAM pStm', 'REFCLSID rclsid']
WINOLEAPI WriteFmtUserTypeStg ['LPSTORAGE pstg', 'CLIPFORMAT cf', 'LPOLESTR lpszUserType']
WINOLEAPI ReadFmtUserTypeStg ['LPSTORAGE pstg', 'CLIPFORMAT FAR* pcf', 'LPOLESTR FAR* lplpszUserType']
WINOLEAPI OleInitialize ['LPVOID pvReserved']
WINOLEAPI OleQueryLinkFromData ['LPDATAOBJECT pSrcDataObject']
WINOLEAPI OleQueryCreateFromData ['LPDATAOBJECT pSrcDataObject']
WINOLEAPI OleCreate ['REFCLSID rclsid', 'REFIID riid', 'DWORD renderopt', 'LPFORMATETC pFormatEtc', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateEx ['REFCLSID rclsid', 'REFIID riid', 'DWORD dwFlags', 'DWORD renderopt', 'ULONG cFormats', 'DWORD* rgAdvf', 'LPFORMATETC rgFormatEtc', 'IAdviseSink FAR* lpAdviseSink', 'DWORD FAR* rgdwConnection', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateFromData ['LPDATAOBJECT pSrcDataObj', 'REFIID riid', 'DWORD renderopt', 'LPFORMATETC pFormatEtc', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateFromDataEx ['LPDATAOBJECT pSrcDataObj', 'REFIID riid', 'DWORD dwFlags', 'DWORD renderopt', 'ULONG cFormats', 'DWORD* rgAdvf', 'LPFORMATETC rgFormatEtc', 'IAdviseSink FAR* lpAdviseSink', 'DWORD FAR* rgdwConnection', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateLinkFromData ['LPDATAOBJECT pSrcDataObj', 'REFIID riid', 'DWORD renderopt', 'LPFORMATETC pFormatEtc', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateLinkFromDataEx ['LPDATAOBJECT pSrcDataObj', 'REFIID riid', 'DWORD dwFlags', 'DWORD renderopt', 'ULONG cFormats', 'DWORD* rgAdvf', 'LPFORMATETC rgFormatEtc', 'IAdviseSink FAR* lpAdviseSink', 'DWORD FAR* rgdwConnection', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateStaticFromData ['LPDATAOBJECT pSrcDataObj', 'REFIID iid', 'DWORD renderopt', 'LPFORMATETC pFormatEtc', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateLink ['LPMONIKER pmkLinkSrc', 'REFIID riid', 'DWORD renderopt', 'LPFORMATETC lpFormatEtc', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateLinkEx ['LPMONIKER pmkLinkSrc', 'REFIID riid', 'DWORD dwFlags', 'DWORD renderopt', 'ULONG cFormats', 'DWORD* rgAdvf', 'LPFORMATETC rgFormatEtc', 'IAdviseSink FAR* lpAdviseSink', 'DWORD FAR* rgdwConnection', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateLinkToFile ['LPCOLESTR lpszFileName', 'REFIID riid', 'DWORD renderopt', 'LPFORMATETC lpFormatEtc', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateLinkToFileEx ['LPCOLESTR lpszFileName', 'REFIID riid', 'DWORD dwFlags', 'DWORD renderopt', 'ULONG cFormats', 'DWORD* rgAdvf', 'LPFORMATETC rgFormatEtc', 'IAdviseSink FAR* lpAdviseSink', 'DWORD FAR* rgdwConnection', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateFromFile ['REFCLSID rclsid', 'LPCOLESTR lpszFileName', 'REFIID riid', 'DWORD renderopt', 'LPFORMATETC lpFormatEtc', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleCreateFromFileEx ['REFCLSID rclsid', 'LPCOLESTR lpszFileName', 'REFIID riid', 'DWORD dwFlags', 'DWORD renderopt', 'ULONG cFormats', 'DWORD* rgAdvf', 'LPFORMATETC rgFormatEtc', 'IAdviseSink FAR* lpAdviseSink', 'DWORD FAR* rgdwConnection', 'LPOLECLIENTSITE pClientSite', 'LPSTORAGE pStg', 'LPVOID FAR* ppvObj']
WINOLEAPI OleLoad ['LPSTORAGE pStg', 'REFIID riid', 'LPOLECLIENTSITE pClientSite', 'LPVOID FAR* ppvObj']
WINOLEAPI OleSave ['LPPERSISTSTORAGE pPS', 'LPSTORAGE pStg', 'BOOL fSameAsLoad']
WINOLEAPI OleLoadFromStream ['LPSTREAM pStm', 'REFIID iidInterface', 'LPVOID FAR* ppvObj']
WINOLEAPI OleSaveToStream ['LPPERSISTSTREAM pPStm', 'LPSTREAM pStm']
WINOLEAPI OleSetContainedObject ['LPUNKNOWN pUnknown', 'BOOL fContained']
WINOLEAPI OleNoteObjectVisible ['LPUNKNOWN pUnknown', 'BOOL fVisible']
WINOLEAPI RegisterDragDrop ['HWND hwnd', 'LPDROPTARGET pDropTarget']
WINOLEAPI RevokeDragDrop ['HWND hwnd']
WINOLEAPI DoDragDrop ['LPDATAOBJECT pDataObj', 'LPDROPSOURCE pDropSource', 'DWORD dwOKEffects', 'LPDWORD pdwEffect']
WINOLEAPI OleSetClipboard ['LPDATAOBJECT pDataObj']
WINOLEAPI OleGetClipboard ['LPDATAOBJECT FAR* ppDataObj']
WINOLEAPI OleFlushClipboard ['void']
WINOLEAPI OleIsCurrentClipboard ['LPDATAOBJECT pDataObj']
WINOLEAPI OleSetMenuDescriptor ['HOLEMENU holemenu', 'HWND hwndFrame', 'HWND hwndActiveObject', 'LPOLEINPLACEFRAME lpFrame', 'LPOLEINPLACEACTIVEOBJECT lpActiveObj']
WINOLEAPI OleDestroyMenuDescriptor ['HOLEMENU holemenu']
WINOLEAPI OleTranslateAccelerator ['LPOLEINPLACEFRAME lpFrame', 'LPOLEINPLACEFRAMEINFO lpFrameInfo', 'LPMSG lpmsg']
WINOLEAPI OleDraw ['LPUNKNOWN pUnknown', 'DWORD dwAspect', 'HDC hdcDraw', 'LPCRECT lprcBounds']
WINOLEAPI OleRun ['LPUNKNOWN pUnknown']
WINOLEAPI OleLockRunning ['LPUNKNOWN pUnknown', 'BOOL fLock', 'BOOL fLastUnlockCloses']
WINOLEAPI CreateOleAdviseHolder ['LPOLEADVISEHOLDER FAR* ppOAHolder']
WINOLEAPI OleCreateDefaultHandler ['REFCLSID clsid', 'LPUNKNOWN pUnkOuter', 'REFIID riid', 'LPVOID FAR* lplpObj']
WINOLEAPI OleCreateEmbeddingHelper ['REFCLSID clsid', 'LPUNKNOWN pUnkOuter', 'DWORD flags', 'LPCLASSFACTORY pCF', 'REFIID riid', 'LPVOID FAR* lplpObj']
WINOLEAPI OleRegGetUserType ['REFCLSID clsid', 'DWORD dwFormOfType', 'LPOLESTR FAR* pszUserType']
WINOLEAPI OleRegGetMiscStatus ['REFCLSID clsid', 'DWORD dwAspect', 'DWORD FAR* pdwStatus']
WINOLEAPI OleRegEnumFormatEtc ['REFCLSID clsid', 'DWORD dwDirection', 'LPENUMFORMATETC FAR* ppenum']
WINOLEAPI OleRegEnumVerbs ['REFCLSID clsid', 'LPENUMOLEVERB FAR* ppenum']
WINOLEAPI OleConvertOLESTREAMToIStorage ['LPOLESTREAM lpolestream', 'LPSTORAGE pstg', 'const DVTARGETDEVICE FAR* ptd']
WINOLEAPI OleConvertIStorageToOLESTREAM ['LPSTORAGE pstg', 'LPOLESTREAM lpolestream']
WINOLEAPI GetHGlobalFromILockBytes ['LPLOCKBYTES plkbyt', 'HGLOBAL FAR* phglobal']
WINOLEAPI CreateILockBytesOnHGlobal ['HGLOBAL hGlobal', 'BOOL fDeleteOnRelease', 'LPLOCKBYTES FAR* pplkbyt']
WINOLEAPI GetHGlobalFromStream ['LPSTREAM pstm', 'HGLOBAL FAR* phglobal']
WINOLEAPI CreateStreamOnHGlobal ['HGLOBAL hGlobal', 'BOOL fDeleteOnRelease', 'LPSTREAM FAR* ppstm']
WINOLEAPI OleDoAutoConvert ['LPSTORAGE pStg', 'LPCLSID pClsidNew']
WINOLEAPI OleGetAutoConvert ['REFCLSID clsidOld', 'LPCLSID pClsidNew']
WINOLEAPI OleSetAutoConvert ['REFCLSID clsidOld', 'REFCLSID clsidNew']
WINOLEAPI GetConvertStg ['LPSTORAGE pStg']
WINOLEAPI SetConvertStg ['LPSTORAGE pStg', 'BOOL fConvert']
WINOLEAPI OleConvertIStorageToOLESTREAMEx ['LPSTORAGE pstg', ' CLIPFORMAT cfFormat', ' LONG lWidth', ' LONG lHeight', ' DWORD dwSize', ' LPSTGMEDIUM pmedium', ' LPOLESTREAM polestm']
WINOLEAPI OleConvertOLESTREAMToIStorageEx ['LPOLESTREAM polestm', 'LPSTORAGE pstg', ' CLIPFORMAT FAR* pcfFormat', ' LONG FAR* plwWidth', ' LONG FAR* plHeight', ' DWORD FAR* pdwSize', ' LPSTGMEDIUM pmedium']
WSPAPI WSPStartup ['IN WORD wVersionRequested', 'OUT LPWSPDATA lpWSPData', 'IN LPWSAPROTOCOL_INFOW lpProtocolInfo', 'IN WSPUPCALLTABLE UpcallTable', 'OUT LPWSPPROC_TABLE lpProcTable']
WSPAPI WSCEnumProtocols ['IN LPINT lpiProtocols', 'OUT LPWSAPROTOCOL_INFOW lpProtocolBuffer', 'IN OUT LPDWORD lpdwBufferLength', 'OUT LPINT lpErrno']
WSPAPI WSCDeinstallProvider ['IN LPGUID lpProviderId', 'OUT LPINT lpErrno']
WSPAPI WSCInstallProvider ['IN LPGUID lpProviderId', 'IN const WCHAR FAR * lpszProviderDllPath', 'IN const LPWSAPROTOCOL_INFOW lpProtocolInfoList', 'IN DWORD dwNumberOfEntries', 'OUT LPINT lpErrno']
WSPAPI WSCGetProviderPath ['IN LPGUID lpProviderId', 'OUT WCHAR FAR * lpszProviderDllPath', 'IN OUT LPINT lpProviderDllPathLen', 'OUT LPINT lpErrno']
WSPAPI WSCUpdateProvider ['IN LPGUID lpProviderId', 'IN const WCHAR FAR * lpszProviderDllPath', 'IN const LPWSAPROTOCOL_INFOW lpProtocolInfoList', 'IN DWORD dwNumberOfEntries', 'OUT LPINT lpErrno']
WSPAPI WSCInstallQOSTemplate ['IN const LPGUID Guid', 'IN LPWSABUF QosName', 'IN LPQOS Qos']
WSPAPI WSCRemoveQOSTemplate ['IN const LPGUID Guid', 'IN LPWSABUF QosName']
WSPAPI WPUCloseEvent ['IN WSAEVENT hEvent', 'OUT LPINT lpErrno']
WSPAPI WPUCloseSocketHandle ['IN SOCKET s', 'OUT LPINT lpErrno']
WSPAPI WPUCreateEvent ['OUT LPINT lpErrno']
WSPAPI WPUCreateSocketHandle ['IN DWORD dwCatalogEntryId', 'IN DWORD_PTR dwContext', 'OUT LPINT lpErrno']
WSPAPI WPUFDIsSet ['IN SOCKET s', 'IN fd_set FAR * fdset']
WSPAPI WPUGetProviderPath ['IN LPGUID lpProviderId', 'OUT WCHAR FAR * lpszProviderDllPath', 'IN OUT LPINT lpProviderDllPathLen', 'OUT LPINT lpErrno']
WSPAPI WPUModifyIFSHandle ['IN DWORD dwCatalogEntryId', 'IN SOCKET ProposedHandle', 'OUT LPINT lpErrno']
WSPAPI WPUPostMessage ['IN HWND hWnd', 'IN UINT Msg', 'IN WPARAM wParam', 'IN LPARAM lParam']
WSPAPI WPUQueryBlockingCallback ['IN DWORD dwCatalogEntryId', 'OUT LPBLOCKINGCALLBACK FAR * lplpfnCallback', 'OUT PDWORD_PTR lpdwContext', 'OUT LPINT lpErrno']
WSPAPI WPUQuerySocketHandleContext ['IN SOCKET s', 'OUT PDWORD_PTR lpContext', 'OUT LPINT lpErrno']
WSPAPI WPUQueueApc ['IN LPWSATHREADID lpThreadId', 'IN LPWSAUSERAPC lpfnUserApc', 'IN DWORD_PTR dwContext', 'OUT LPINT lpErrno']
WSPAPI WPUResetEvent ['IN WSAEVENT hEvent', 'OUT LPINT lpErrno']
WSPAPI WPUSetEvent ['IN WSAEVENT hEvent', 'OUT LPINT lpErrno']
WSPAPI WPUCompleteOverlappedRequest ['SOCKET s', 'LPWSAOVERLAPPED lpOverlapped', 'DWORD dwError', 'DWORD cbTransferred', 'LPINT lpErrno']
WSPAPI WPUOpenCurrentThread ['LPWSATHREADID lpThreadId', 'LPINT lpErrno']
WSPAPI WPUCloseThread ['LPWSATHREADID lpThreadId', 'LPINT lpErrno']
WSPAPI WSCInstallNameSpace ['IN LPWSTR lpszIdentifier', 'IN LPWSTR lpszPathName', 'IN DWORD dwNameSpace', 'IN DWORD dwVersion', 'IN LPGUID lpProviderId']
WSPAPI WSCUnInstallNameSpace ['IN LPGUID lpProviderId']
WSPAPI WSCEnableNSProvider ['IN LPGUID lpProviderId', 'IN BOOL fEnable']
WSAAPI NSPStartup ['LPGUID lpProviderId', 'LPNSP_ROUTINE lpnspRoutines']
PCEDRIVER_OBJECT CeDriverLoad ['IN PWSTR wszRegistryKey', 'IN PWSTR wszDriverName', 'IN PWSTR wszGroupName']
DWORD CeDriverObjectExtensionAllocate ['IN\tPCEDRIVER_OBJECT\tpCeDriverObject', 'IN\tPVOID extensionID', 'IN\tsize_t extensionSize', 'OUT\tPVOID pExtension']
PVOID CeDriverObjectExtensionGet ['IN\tPCEDRIVER_OBJECT\tpCeDriverObject', 'IN\tPVOID extensionID']
PCEDRIVER_OBJECT CeDriverFindObjectByName ['IN\tLPWSTR\twszDriverName']
NTSTATUS CeDriverAddRef ['IN\tPCEDRIVER_OBJECT\tpCeDriverObject']
NTSTATUS CeDriverDelRef ['IN\tPCEDRIVER_OBJECT\tpCeDriverObject']
VOID CeDriverInitializeModule ['']
VOID CeDriverDeinitializeModule ['']
NTSTATUS CeDeviceCreate ['IN\tPCEDRIVER_OBJECT DriverObject', 'IN\tLONG DeviceExtensionSize', 'IN\tPUNICODE_STRING DeviceName OPTIONAL', 'OUT\tPCEDEVICE_OBJECT\t*DeviceObject']
NTSTATUS CeDeviceDelete ['IN\tPCEDEVICE_OBJECT DeviceObject']
NTSTATUS CeDeviceCreateDeviceForLoadedDriver ['IN\tPCEDRIVER_OBJECT DriverObject', 'IN\tPWSTR DeviceName', '\tIN\tDWORD BusType', '\tIN\tDWORD BusNumber', 'IN PDEVICE_ADD_ROUTINE pfnAddDevice', 'OUT\tPCEDEVICE_OBJECT *pPhysicalDeviceObject', 'IN HANDLE hBusAccessHandle']
NTSTATUS CeDeviceLoadDriverAndCreateDevice ['IN\tPWSTR wszRegistryKey', '\tIN\tPWSTR DriverName', '\tIN\tPWSTR GroupName', '\tIN\tPWSTR DeviceName', '\tIN\tDWORD BusType', '\tIN\tDWORD BusNumber', 'IN PDEVICE_ADD_ROUTINE pfnAddDevice', 'OUT\tPCEDEVICE_OBJECT *pPhysicalDeviceObject', 'IN HANDLE hBusAccessHandle']
NTSTATUS CeDeviceLoadDriverAndCreateNonPnPDevice ['IN\tPWSTR wszRegistryKey', '\tIN\tPWSTR DriverName', 'IN\tPWSTR GroupName', 'IN\tPWSTR DeviceName', 'IN PDEVICE_ADD_ROUTINE pfnAddDevice']
VOID CeDeviceEnumerateFromRegistry ['IN\tPWSTR wszRegistryKey', '\tIN\tPWSTR wszGroup', '\tIN PDEVICE_ADD_ROUTINE pfnAddDevice']
VOID CeDeviceInitializeModule ['']
VOID CeDeviceDeinitializeModule ['']
NTSTATUS CeConnectInterrupt ['OUT PCEKINTERRUPT *pInterruptObject', 'IN PCEKSERVICE_ROUTINE\tServiceRoutine', 'IN PVOID ServiceContext', 'IN UINT InterruptVector', 'IN UINT InterruptId', 'IN CEKINTERRUPT_MODE\tInterruptMode', 'IN BOOLEAN ShareVector', 'IN DWORD BusType', 'IN UINT InterruptThreadPriority', 'IN PWSTR wszRegKey', 'IN UINT SuperISTThreadPriority', 'IN PSISTSERVICE_ROUTINE SuperISTServiceRoutine']
NTSTATUS CeDisconnectInterrupt ['IN\tPCEKINTERRUPT\tInterruptObject']
VOID CeKeInitializeQueue ['IN PKQUEUE Queue', 'IN ULONG Count OPTIONAL']
VOID CeKeFreeQueue ['IN PKQUEUE Queue']
LONG CeKeInsertQueue ['IN\tPKQUEUE\tpQueue', 'IN\tPLIST_ENTRY\tpEntry']
PLIST_ENTRY CeKeRemoveQueue ['IN PKQUEUE pQueue', 'IN PLARGE_INTEGER Timeout OPTIONAL']
VOID CeKeInitializeDpc ['PKDPC pKDpc', 'PKDEFERRED_ROUTINE\tDeferredRoutine', 'PVOID DeferredContext']
VOID CeKeFreeDpc ['PKDPC pKDpc']
LONG CeKeInsertQueueDpc ['PKQUEUE\tpKQueue', 'PKDPC\tpKDpc']
HANDLE CeKeDpcInitializeModule ['OUT PKQUEUE pDpcQueue', 'IN\tUINT\tDpcThreadPriority']
VOID CeKeDpcCleanupModule ['IN\tPKQUEUE\tpDpcQueue', 'IN\tHANDLE\thDpcThread']
VOID CeKeInitializeTimer ['IN OUT PCEKTIMER Timer']
void CeKeSetTimer ['IN\tOUT\tPCEKTIMER\tTimer', 'IN\tUINT DelayMilliseconds', 'IN PCEKDPC Dpc']
void CeKeSetPeriodicTimer ['IN\tOUT\tPCEKTIMER\tTimer', 'IN\tUINT PeriodMilliseconds', 'IN PCEKDPC Dpc']
BOOLEAN CeKeCancelTimer ['IN OUT PCEKTIMER Timer']
DWORD CeKeInitializeTimerModule ['PKQUEUE\tpDpcQueue', 'DWORD\tthreadPriority']
VOID CeKeShutdownTimerModule ['']
void CeKePowerUp ['PFUNC_POWER_UP pFunc']
LARGE_INTEGER ExInterlockedAddLargeInteger ['IN\tPLARGE_INTEGER First', 'IN\tLARGE_INTEGER Second', 'IN PKSPIN_LOCK SpinLock']
PLIST_ENTRY ExInterlockedInsertHeadList ['IN PLIST_ENTRY ListHead', 'IN PLIST_ENTRY ListEntry', 'IN PKSPIN_LOCK SpinLock']
PLIST_ENTRY ExInterlockedInsertTailList ['IN PLIST_ENTRY ListHead', 'IN PLIST_ENTRY ListEntry', 'IN PKSPIN_LOCK SpinLock']
PLIST_ENTRY ExInterlockedRemoveHeadList ['IN PLIST_ENTRY ListHead', 'IN PKSPIN_LOCK SpinLock']
PLIST_ENTRY ExInterlockedRemoveTailList ['IN PLIST_ENTRY ListHead', 'IN PKSPIN_LOCK SpinLock']
PSINGLE_LIST_ENTRY ExInterlockedPushEntryList ['IN PSINGLE_LIST_ENTRY ListHead', 'IN PSINGLE_LIST_ENTRY ListEntry', 'IN PKSPIN_LOCK SpinLock']
PSINGLE_LIST_ENTRY ExInterlockedPopEntryList ['IN PSINGLE_LIST_ENTRY ListHead', 'IN PKSPIN_LOCK SpinLock']
DWORD CePsCreateSystemThread ['OUT\tPHANDLE pThreadHandle', 'IN\tPVOID startFunction', 'IN\tPVOID startParameter']
VOID DbgBreakPoint ['VOID']
ULONG DbgPrint ['IN PCHAR DebugMessage', '...']
BOOL GetRegistryDwordValue ['IN\tHKEY hKey', 'IN\tTCHAR\t*tszSubKeyName', 'OPTIONAL IN\tTCHAR\t*tszValueName', 'OUT\tDWORD\t*pdwValue']
BOOL SetRegistryDwordValue ['IN\tHKEY hKey', 'IN\tTCHAR\t*tszSubKeyName', 'OPTIONAL IN\tTCHAR\t*tszValueName', 'IN\tDWORD dwValue']
VOID RtlTimeToTimeFields ['IN PLARGE_INTEGER Time', 'OUT PTIME_FIELDS TimeFields']
BOOLEAN RtlTimeFieldsToTime ['IN PTIME_FIELDS TimeFields', 'OUT PLARGE_INTEGER Time']
VOID RtlInitString ['OUT PSTRING DestinationString', 'IN PCSZ SourceString OPTIONAL']
VOID RtlFreeAnsiString ['PANSI_STRING AnsiString']
VOID RtlInitAnsiString ['OUT PANSI_STRING DestinationString', 'IN PCSZ SourceString OPTIONAL']
VOID RtlInitUnicodeString ['OUT PUNICODE_STRING DestinationString', 'IN PCWSTR SourceString OPTIONAL']
BOOLEAN RtlCreateUnicodeString ['OUT\tPUNICODE_STRING DestinationString', 'IN\tPCWSTR SourceString']
VOID RtlFreeUnicodeString ['IN PUNICODE_STRING UnicodeString']
NTSTATUS RtlAnsiStringToUnicodeString ['OUT PUNICODE_STRING DestinationString', 'IN PANSI_STRING SourceString', 'IN BOOLEAN AllocateDestinationString']
NTSTATUS RtlUnicodeStringToAnsiString ['IN OUT PANSI_STRING DestinationString', 'IN PUNICODE_STRING SourceString', 'IN BOOLEAN AllocateDestinationString']
NTSTATUS RtlUpcaseUnicodeString ['OUT PUNICODE_STRING DestinationString', 'IN PUNICODE_STRING SourceString', 'IN BOOLEAN AllocateDestinationString']
NTSTATUS RtlDowncaseUnicodeString ['OUT PUNICODE_STRING DestinationString', 'IN PUNICODE_STRING SourceString', 'IN BOOLEAN AllocateDestinationString']
BOOLEAN RtlEqualUnicodeString ['IN PUNICODE_STRING String1', 'IN PUNICODE_STRING String2', 'IN BOOLEAN CaseInSensitive']
VOID RtlCopyUnicodeString ['OUT PUNICODE_STRING DestinationString', 'IN PUNICODE_STRING SourceString OPTIONAL']
NTSTATUS RtlAppendUnicodeToString ['IN PUNICODE_STRING Destination', 'IN PWSTR Source OPTIONAL']
NTSTATUS RtlUnicodeStringToInteger ['IN PUNICODE_STRING String', 'IN ULONG Base', 'OUT PINT pInteger']
NTSTATUS RtlAppendUnicodeStringToString ['PUNICODE_STRING Destination', 'PUNICODE_STRING Source']
BOOLEAN RtlCreateUnicodeStringFromAsciiz ['OUT PUNICODE_STRING DestinationString', 'IN PCSTR SourceString']
NTSTATUS RtlCharToInteger ['IN\tPCHAR String', 'IN\tULONG Base', 'OUT\tPINT pInteger']
LONG RtlCompareUnicodeString ['PUNICODE_STRING String1', 'PUNICODE_STRING String2', 'BOOLEAN CaseInSensitive']
BOOLEAN RtlEqualDomainName ['IN PUNICODE_STRING String1', 'IN PUNICODE_STRING String2']
NTSTATUS RtlConvertSidToUnicodeString ['PUNICODE_STRING UnicodeString', 'PSID Sid', 'BOOLEAN AllocateDestinationString']
VOID RtlRunEncodeUnicodeString ['PUCHAR Seed OPTIONAL', 'PUNICODE_STRING String']
VOID RtlRunDecodeUnicodeString ['UCHAR Seed', 'PUNICODE_STRING String']
VOID RtlAssert ['IN PVOID FailedAssertion', 'IN PVOID FileName', 'IN ULONG LineNumber', 'IN PCHAR Message OPTIONAL']
BOOL ConvertStringSidToSidW ['IN LPCWSTR StringSid', 'OUT PSID *Sid']
PVOID RtlFreeSid ['IN PSID Sid']
NTSTATUS RtlAllocateAndInitializeSid ['IN PSID_IDENTIFIER_AUTHORITY IdentifierAuthority', 'IN UCHAR SubAuthorityCount', 'IN ULONG SubAuthority0', 'IN ULONG SubAuthority1', 'IN ULONG SubAuthority2', 'IN ULONG SubAuthority3', 'IN ULONG SubAuthority4', 'IN ULONG SubAuthority5', 'IN ULONG SubAuthority6', 'IN ULONG SubAuthority7', 'OUT PSID *Sid']
PUCHAR RtlSubAuthorityCountSid ['PSID Sid']
ULONG RtlLengthSid ['PSID Sid']
NTSTATUS RtlCopySid ['ULONG DestinationSidLength', 'PSID DestinationSid', 'PSID SourceSid']
ULONG RtlLengthRequiredSid ['ULONG SubAuthorityCount']
BOOL USBDeviceAttach ['USB_HANDLE hDevice', 'LPCUSB_FUNCS lpUsbFuncs', 'LPCUSB_INTERFACE lpInterface', 'LPCWSTR szUniqueDriverId', 'LPBOOL fAcceptControl', 'LPCUSB_DRIVER_SETTINGS lpDriverSettings', 'DWORD dwUnused']
BOOL USBInstallDriver ['LPCWSTR szDriverLibFile']
BOOL USBUnInstallDriver ['']
VOID GetUSBDVersion ['LPDWORD lpdwMajorVersion', 'LPDWORD lpdwMinorVersion']
BOOL RegisterClientDriverID ['LPCWSTR szUniqueDriverId']
BOOL UnRegisterClientDriverID ['LPCWSTR szUniqueDriverId']
BOOL RegisterClientSettings ['LPCWSTR lpszDriverLibFile', 'LPCWSTR lpszUniqueDriverId', 'LPCWSTR szReserved', 'LPCUSB_DRIVER_SETTINGS lpDriverSettings']
BOOL UnRegisterClientSettings ['LPCWSTR lpszUniqueDriverId', 'LPCWSTR szReserved', 'LPCUSB_DRIVER_SETTINGS lpDriverSettings']
HKEY OpenClientRegistryKey ['LPCWSTR szUniqueDriverId']
BOOL GetClientRegistryPath ['LPWSTR szRegistryPath', 'DWORD dwRegPathUnit', 'LPCWSTR szUniqueDriverId']
VOID SDOutputBuffer ['PVOID pBuffer', 'ULONG BufferSize']
LPVOID HalAllocatePhysicalMemory ['IN LPVOID StartAddress', 'IN ULONG Size', 'OUT PPHYSICAL_ADDRESS PhysicalBuffer', 'IN BOOLEAN CacheEnabled']
ULONG HalFreePhysicalMemory ['IN PVOID VirtualAddress', 'IN ULONG Length']
BOOL HalMapInterrupt ['IN ULONG InterruptNumber', 'IN ULONG InterruptVector', 'OUT DWORD *InterruptId']
PIRP IoAllocateIrp ['IN CCHAR StackSize', 'IN BOOLEAN ChargeQuota']
PMDL IoAllocateMdl ['IN PVOID VirtualAddress', 'IN ULONG Length', 'IN BOOLEAN SecondaryBuffer', 'IN BOOLEAN ChargeQuota', 'IN OUT PIRP Irp OPTIONAL']
NTSTATUS IoAttachDevice ['IN PDEVICE_OBJECT SourceDevice', 'IN PUNICODE_STRING TargetDevice', 'OUT PDEVICE_OBJECT *AttachedDevice']
PDEVICE_OBJECT IoAttachDeviceToDeviceStack ['IN PDEVICE_OBJECT SourceDevice', 'IN PDEVICE_OBJECT TargetDevice']
VOID IoBuildPartialMdl ['IN PMDL SourceMdl', 'IN OUT PMDL TargetMdl', 'IN PVOID VirtualAddress', 'IN ULONG Length']
PIRP IoBuildAsynchronousFsdRequest ['IN ULONG MajorFunction', 'IN PDEVICE_OBJECT DeviceObject', 'IN OUT PVOID Buffer OPTIONAL', 'IN ULONG Length OPTIONAL', 'IN PLARGE_INTEGER StartingOffset OPTIONAL', 'IN PIO_STATUS_BLOCK IoStatusBlock OPTIONAL']
PIRP IoBuildDeviceIoControlRequest ['IN ULONG IoControlCode', 'IN PDEVICE_OBJECT DeviceObject', 'IN PVOID InputBuffer OPTIONAL', 'IN ULONG InputBufferLength', 'OUT PVOID OutputBuffer OPTIONAL', 'IN ULONG OutputBufferLength', 'IN BOOLEAN InternalDeviceIoControl', 'IN HANDLE Event', 'OUT PIO_STATUS_BLOCK IoStatusBlock']
PIRP IoBuildSynchronousFsdRequest ['IN ULONG MajorFunction', 'IN PDEVICE_OBJECT DeviceObject', 'IN OUT PVOID Buffer OPTIONAL', 'IN ULONG Length OPTIONAL', 'IN PLARGE_INTEGER StartingOffset OPTIONAL', 'IN HANDLE Event', 'OUT PIO_STATUS_BLOCK IoStatusBlock']
NTSTATUS IoCallDriver ['IN PDEVICE_OBJECT DeviceObject', 'IN OUT PIRP Irp']
VOID IoCompleteRequest ['IN PIRP Irp', 'IN CCHAR PriorityBoost']
NTSTATUS IoCreateDevice ['IN PDRIVER_OBJECT DriverObject', 'IN ULONG DeviceExtensionSize', 'IN PUNICODE_STRING DeviceName OPTIONAL', 'IN DEVICE_TYPE DeviceType', 'IN ULONG DeviceCharacteristics', 'IN BOOLEAN Exclusive', 'OUT PDEVICE_OBJECT *DeviceObject']
VOID IoDeleteDevice ['IN PDEVICE_OBJECT DeviceObject']
VOID IoDetachDevice ['IN OUT PDEVICE_OBJECT TargetDevice']
VOID IoFreeIrp ['IN PIRP Irp']
VOID IoFreeMdl ['IN PMDL Mdl']
NTSTATUS IoSendWinCePnPMessage ['IN PDEVICE_OBJECT pDeviceObject', 'IN PIRP pIrp']
NTSTATUS IoSendWinCePnPCallback ['IN PPNP_CALLBACK pCallback', 'IN PVOID pContext']
NTSTATUS IoGetDeviceObjectPointer ['IN PUNICODE_STRING ObjectName', 'IN ACCESS_MASK DesiredAccess', 'OUT PFILE_OBJECT *FileObject', 'OUT PDEVICE_OBJECT *DeviceObject']
PDEVICE_OBJECT IoGetRelatedDeviceObject ['IN PFILE_OBJECT FileObject']
VOID IoInitializeIrp ['IN OUT PIRP Irp', 'IN USHORT PacketSize', 'IN CCHAR StackSize']
VOID IoStartNextPacket ['IN PDEVICE_OBJECT DeviceObject', 'IN BOOLEAN Cancelable']
VOID IoStartNextPacketByKey ['IN PDEVICE_OBJECT DeviceObject', 'IN BOOLEAN Cancelable', 'IN ULONG Key']
VOID IoStartPacket ['IN PDEVICE_OBJECT DeviceObject', 'IN PIRP Irp', 'IN PULONG Key OPTIONAL', 'IN PDRIVER_CANCEL CancelFunction OPTIONAL']
ULONG DbgPrint ['IN PCHAR DebugMessage', '...']
VOID KeFlushIoBuffers ['IN PMDL Mdl', 'IN BOOLEAN ReadOperation', 'IN BOOLEAN DmaOperation']
VOID KeInitializeDeviceQueue ['IN PKDEVICE_QUEUE DeviceQueue']
BOOLEAN KeInsertDeviceQueue ['IN PKDEVICE_QUEUE DeviceQueue', 'IN PKDEVICE_QUEUE_ENTRY DeviceQueueEntry']
BOOLEAN KeInsertByKeyDeviceQueue ['IN PKDEVICE_QUEUE DeviceQueue', 'IN PKDEVICE_QUEUE_ENTRY DeviceQueueEntry', 'IN ULONG SortKey']
PKDEVICE_QUEUE_ENTRY KeRemoveDeviceQueue ['IN PKDEVICE_QUEUE DeviceQueue']
PKDEVICE_QUEUE_ENTRY KeRemoveByKeyDeviceQueue ['IN PKDEVICE_QUEUE DeviceQueue', 'IN ULONG SortKey']
BOOLEAN KeRemoveEntryDeviceQueue ['IN PKDEVICE_QUEUE DeviceQueue', 'IN PKDEVICE_QUEUE_ENTRY DeviceQueueEntry']
VOID MmBuildMdlForNonPagedPool ['IN OUT PMDL MemoryDescriptorList']
PMDL MmCreateMdl ['IN PMDL MemoryDescriptorList OPTIONAL', 'IN PVOID Base', 'IN ULONG Length']
PVOID MmMapLockedPages ['IN PMDL MemoryDescriptorList', 'IN KPROCESSOR_MODE AccessMode']
VOID MmProbeAndLockPages ['IN OUT PMDL MemoryDescriptorList', 'IN KPROCESSOR_MODE AccessMode', 'IN LOCK_OPERATION Operation']
VOID MmUnlockPages ['IN PMDL MemoryDescriptorList']
VOID MmUnmapLockedPages ['IN PVOID BaseAddress', 'IN PMDL MemoryDescriptorList']
NTSTATUS ObDereferenceObject ['IN PVOID Object']
PVOID PnPLoadWDMDriver ['IN LPCWSTR pDriverName', 'IN PDEVICE_OBJECT pPDO', 'IN LPWSTR pszRegPath', 'OUT PDRIVER_OBJECT *ppDriverObject']
NTSTATUS PnPUnLoadWDMDriver ['IN PVOID pContext']
VOID RtlInitUnicodeString ['PUNICODE_STRING DestinationString', 'PCWSTR SourceString']
NTSTATUS RtlAppendUnicodeToString ['IN PUNICODE_STRING Destination', 'IN PWSTR Source OPTIONAL']
NTSTATUS RtlIntegerToUnicodeString ['IN ULONG Value', 'IN ULONG Base OPTIONAL', 'IN OUT PUNICODE_STRING String']
NTSTATUS RtlAppendUnicodeStringToString ['IN PUNICODE_STRING Destination', 'IN PUNICODE_STRING Source']
VOID RtlCopyUnicodeString ['OUT PUNICODE_STRING DestinationString', 'IN PUNICODE_STRING SourceString OPTIONAL']
VOID RtlInitializeBitMap ['PRTL_BITMAP BitMapHeader', 'PULONG BitMapBuffer', 'ULONG SizeOfBitMap']
VOID RtlClearAllBits ['PRTL_BITMAP BitMapHeader']
VOID RtlSetAllBits ['PRTL_BITMAP BitMapHeader']
ULONG RtlFindClearBits ['PRTL_BITMAP BitMapHeader', 'ULONG NumberToFind', 'ULONG HintIndex']
ULONG RtlFindSetBits ['PRTL_BITMAP BitMapHeader', 'ULONG NumberToFind', 'ULONG HintIndex']
ULONG RtlFindClearBitsAndSet ['PRTL_BITMAP BitMapHeader', 'ULONG NumberToFind', 'ULONG HintIndex']
ULONG RtlFindSetBitsAndClear ['PRTL_BITMAP BitMapHeader', 'ULONG NumberToFind', 'ULONG HintIndex']
VOID RtlClearBits ['PRTL_BITMAP BitMapHeader', 'ULONG StartingIndex', 'ULONG NumberToClear']
VOID RtlSetBits ['PRTL_BITMAP BitMapHeader', 'ULONG StartingIndex', 'ULONG NumberToSet']
ULONG RtlFindClearRuns ['PRTL_BITMAP BitMapHeader', 'PRTL_BITMAP_RUN RunArray', 'ULONG SizeOfRunArray', 'BOOLEAN LocateLongestRuns']
ULONG RtlFindLongestRunClear ['PRTL_BITMAP BitMapHeader', 'PULONG StartingIndex']
ULONG RtlFindFirstRunClear ['PRTL_BITMAP BitMapHeader', 'PULONG StartingIndex']
ULONG RtlNumberOfClearBits ['PRTL_BITMAP BitMapHeader']
ULONG RtlNumberOfSetBits ['PRTL_BITMAP BitMapHeader']
BOOLEAN RtlAreBitsClear ['PRTL_BITMAP BitMapHeader', 'ULONG StartingIndex', 'ULONG Length']
BOOLEAN RtlAreBitsSet ['PRTL_BITMAP BitMapHeader', 'ULONG StartingIndex', 'ULONG Length']
ULONG RtlFindNextForwardRunClear ['IN PRTL_BITMAP BitMapHeader', 'IN ULONG FromIndex', 'IN PULONG StartingRunIndex']
ULONG RtlFindLastBackwardRunClear ['IN PRTL_BITMAP BitMapHeader', 'IN ULONG FromIndex', 'IN PULONG StartingRunIndex']
CCHAR RtlFindLeastSignificantBit ['IN ULONGLONG Set']
CCHAR RtlFindMostSignificantBit ['IN ULONGLONG Set']
PRTL_SPLAY_LINKS RtlSplay ['PRTL_SPLAY_LINKS Links']
PRTL_SPLAY_LINKS RtlDelete ['PRTL_SPLAY_LINKS Links']
VOID RtlDeleteNoSplay ['PRTL_SPLAY_LINKS Links', 'PRTL_SPLAY_LINKS *Root']
PRTL_SPLAY_LINKS RtlSubtreeSuccessor ['PRTL_SPLAY_LINKS Links']
PRTL_SPLAY_LINKS RtlSubtreePredecessor ['PRTL_SPLAY_LINKS Links']
PRTL_SPLAY_LINKS RtlRealSuccessor ['PRTL_SPLAY_LINKS Links']
PRTL_SPLAY_LINKS RtlRealPredecessor ['PRTL_SPLAY_LINKS Links']
FASTCALL RtlUshortByteSwap ['IN USHORT Source']
FASTCALL RtlUlongByteSwap ['IN ULONG Source']
FASTCALL RtlUlonglongByteSwap ['IN ULONGLONG Source']
BOOL CryptAcquireContextA ['HCRYPTPROV *phProv', 'LPCSTR szContainer', 'LPCSTR szProvider', 'DWORD dwProvType', 'DWORD dwFlags']
BOOL CryptAcquireContextW ['HCRYPTPROV *phProv', 'LPCWSTR szContainer', 'LPCWSTR szProvider', 'DWORD dwProvType', 'DWORD dwFlags']
BOOL CryptReleaseContext ['HCRYPTPROV hProv', 'DWORD dwFlags']
BOOL CryptGenKey ['HCRYPTPROV hProv', 'ALG_ID Algid', 'DWORD dwFlags', 'HCRYPTKEY *phKey']
BOOL CryptDeriveKey ['HCRYPTPROV hProv', 'ALG_ID Algid', 'HCRYPTHASH hBaseData', 'DWORD dwFlags', 'HCRYPTKEY *phKey']
BOOL CryptDestroyKey ['HCRYPTKEY hKey']
BOOL CryptSetKeyParam ['HCRYPTKEY hKey', 'DWORD dwParam', 'CONST BYTE *pbData', 'DWORD dwFlags']
BOOL CryptGetKeyParam ['HCRYPTKEY hKey', 'DWORD dwParam', 'BYTE *pbData', 'DWORD *pdwDataLen', 'DWORD dwFlags']
BOOL CryptSetHashParam ['HCRYPTHASH hHash', 'DWORD dwParam', 'CONST BYTE *pbData', 'DWORD dwFlags']
BOOL CryptGetHashParam ['HCRYPTHASH hHash', 'DWORD dwParam', 'BYTE *pbData', 'DWORD *pdwDataLen', 'DWORD dwFlags']
BOOL CryptSetProvParam ['HCRYPTPROV hProv', 'DWORD dwParam', 'CONST BYTE *pbData', 'DWORD dwFlags']
BOOL CryptGetProvParam ['HCRYPTPROV hProv', 'DWORD dwParam', 'BYTE *pbData', 'DWORD *pdwDataLen', 'DWORD dwFlags']
BOOL CryptGetUserKey ['HCRYPTPROV hProv', 'DWORD dwKeySpec', 'HCRYPTKEY *phUserKey']
BOOL CryptExportKey ['HCRYPTKEY hKey', 'HCRYPTKEY hExpKey', 'DWORD dwBlobType', 'DWORD dwFlags', 'BYTE *pbData', 'DWORD *pdwDataLen']
BOOL CryptEncrypt ['HCRYPTKEY hKey', 'HCRYPTHASH hHash', 'BOOL Final', 'DWORD dwFlags', 'BYTE *pbData', 'DWORD *pdwDataLen', 'DWORD dwBufLen']
BOOL CryptCreateHash ['HCRYPTPROV hProv', 'ALG_ID Algid', 'HCRYPTKEY hKey', 'DWORD dwFlags', 'HCRYPTHASH *phHash']
BOOL CryptHashSessionKey ['HCRYPTHASH hHash', 'HCRYPTKEY hKey', 'DWORD dwFlags']
BOOL CryptDestroyHash ['HCRYPTHASH hHash']
BOOL CryptSignHashA ['HCRYPTHASH hHash', 'DWORD dwKeySpec', 'LPCSTR szDescription', 'DWORD dwFlags', 'BYTE *pbSignature', 'DWORD *pdwSigLen']
BOOL CryptSignHashW ['HCRYPTHASH hHash', 'DWORD dwKeySpec', 'LPCWSTR szDescription', 'DWORD dwFlags', 'BYTE *pbSignature', 'DWORD *pdwSigLen']
BOOL CryptVerifySignatureA ['HCRYPTHASH hHash', 'CONST BYTE *pbSignature', 'DWORD dwSigLen', 'HCRYPTKEY hPubKey', 'LPCSTR szDescription', 'DWORD dwFlags']
BOOL CryptVerifySignatureW ['HCRYPTHASH hHash', 'CONST BYTE *pbSignature', 'DWORD dwSigLen', 'HCRYPTKEY hPubKey', 'LPCWSTR szDescription', 'DWORD dwFlags']
BOOL CryptSetProviderA ['LPCSTR pszProvName', 'DWORD dwProvType']
BOOL CryptSetProviderW ['LPCWSTR pszProvName', 'DWORD dwProvType']
BOOL CryptSetProviderExA ['LPCSTR pszProvName', 'DWORD dwProvType', 'DWORD *pdwReserved', 'DWORD dwFlags']
BOOL CryptSetProviderExW ['LPCWSTR pszProvName', 'DWORD dwProvType', 'DWORD *pdwReserved', 'DWORD dwFlags']
BOOL CryptGetDefaultProviderA ['DWORD dwProvType', 'DWORD *pdwReserved', 'DWORD dwFlags', 'LPSTR pszProvName', 'DWORD *pcbProvName']
BOOL CryptGetDefaultProviderW ['DWORD dwProvType', 'DWORD *pdwReserved', 'DWORD dwFlags', 'LPWSTR pszProvName', 'DWORD *pcbProvName']
BOOL CryptEnumProviderTypesA ['DWORD dwIndex', 'DWORD *pdwReserved', 'DWORD dwFlags', 'DWORD *pdwProvType', 'LPSTR szTypeName', 'DWORD *pcbTypeName']
BOOL CryptEnumProviderTypesW ['DWORD dwIndex', 'DWORD *pdwReserved', 'DWORD dwFlags', 'DWORD *pdwProvType', 'LPWSTR szTypeName', 'DWORD *pcbTypeName']
BOOL CryptEnumProvidersA ['DWORD dwIndex', 'DWORD *pdwReserved', 'DWORD dwFlags', 'DWORD *pdwProvType', 'LPSTR szProvName', 'DWORD *pcbProvName']
BOOL CryptEnumProvidersW ['DWORD dwIndex', 'DWORD *pdwReserved', 'DWORD dwFlags', 'DWORD *pdwProvType', 'LPWSTR szProvName', 'DWORD *pcbProvName']
BOOL CryptContextAddRef ['HCRYPTPROV hProv', 'DWORD *pdwReserved', 'DWORD dwFlags']
BOOL CryptDuplicateKey ['HCRYPTKEY hKey', 'DWORD *pdwReserved', 'DWORD dwFlags', 'HCRYPTKEY *phKey']
BOOL CryptDuplicateHash ['HCRYPTHASH hHash', 'DWORD *pdwReserved', 'DWORD dwFlags', 'HCRYPTHASH *phHash']
BOOL CryptFormatObject ['IN DWORD dwCertEncodingType', 'IN DWORD dwFormatType', 'IN DWORD dwFormatStrType', 'IN void *pFormatStruct', 'IN LPCSTR lpszStructType', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'OUT void *pbFormat', 'IN OUT DWORD *pcbFormat']
BOOL CryptEncodeObjectEx ['IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', 'IN const void *pvStructInfo', 'IN DWORD dwFlags', 'IN OPTIONAL PCRYPT_ENCODE_PARA pEncodePara', 'OUT void *pvEncoded', 'IN OUT DWORD *pcbEncoded']
BOOL CryptEncodeObject ['IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', 'IN const void *pvStructInfo', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded']
BOOL CryptDecodeObjectEx ['IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'IN DWORD dwFlags', 'IN OPTIONAL PCRYPT_DECODE_PARA pDecodePara', 'OUT OPTIONAL void *pvStructInfo', 'IN OUT DWORD *pcbStructInfo']
BOOL CryptDecodeObject ['IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'IN DWORD dwFlags', 'OUT void *pvStructInfo', 'IN OUT DWORD *pcbStructInfo']
BOOL CryptInstallOIDFunctionAddress ['IN HMODULE hModule', ' IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN DWORD cFuncEntry', 'IN const CRYPT_OID_FUNC_ENTRY rgFuncEntry[]', 'IN DWORD dwFlags']
HCRYPTOIDFUNCSET CryptInitOIDFunctionSet ['IN LPCSTR pszFuncName', 'IN DWORD dwFlags']
BOOL CryptGetOIDFunctionAddress ['IN HCRYPTOIDFUNCSET hFuncSet', 'IN DWORD dwEncodingType', 'IN LPCSTR pszOID', 'IN DWORD dwFlags', 'OUT void **ppvFuncAddr', 'OUT HCRYPTOIDFUNCADDR *phFuncAddr']
BOOL CryptGetDefaultOIDDllList ['IN HCRYPTOIDFUNCSET hFuncSet', 'IN DWORD dwEncodingType', 'OUT LPWSTR pwszDllList', 'IN OUT DWORD *pcchDllList']
BOOL CryptGetDefaultOIDFunctionAddress ['IN HCRYPTOIDFUNCSET hFuncSet', 'IN DWORD dwEncodingType', 'IN OPTIONAL LPCWSTR pwszDll', 'IN DWORD dwFlags', 'OUT void **ppvFuncAddr', 'IN OUT HCRYPTOIDFUNCADDR *phFuncAddr']
BOOL CryptFreeOIDFunctionAddress ['IN HCRYPTOIDFUNCADDR hFuncAddr', 'IN DWORD dwFlags']
BOOL CryptRegisterOIDFunction ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCSTR pszOID', 'IN OPTIONAL LPCWSTR pwszDll', 'IN OPTIONAL LPCSTR pszOverrideFuncName']
BOOL CryptUnregisterOIDFunction ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCSTR pszOID']
BOOL CryptRegisterDefaultOIDFunction ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN DWORD dwIndex', 'IN LPCWSTR pwszDll']
BOOL CryptUnregisterDefaultOIDFunction ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCWSTR pwszDll']
BOOL CryptSetOIDFunctionValue ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCSTR pszOID', 'IN LPCWSTR pwszValueName', 'IN DWORD dwValueType', 'IN const BYTE *pbValueData', 'IN DWORD cbValueData']
BOOL CryptGetOIDFunctionValue ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCSTR pszOID', 'IN LPCWSTR pwszValueName', 'OUT DWORD *pdwValueType', 'OUT BYTE *pbValueData', 'IN OUT DWORD *pcbValueData']
BOOL CryptEnumOIDFunction ['IN DWORD dwEncodingType', 'IN OPTIONAL LPCSTR pszFuncName', 'IN OPTIONAL LPCSTR pszOID', 'IN DWORD dwFlags', 'IN void *pvArg', 'IN PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc']
PCCRYPT_OID_INFO CryptFindOIDInfo ['IN DWORD dwKeyType', 'IN void *pvKey', 'IN DWORD dwGroupId']
BOOL CryptRegisterOIDInfo ['IN PCCRYPT_OID_INFO pInfo', 'IN DWORD dwFlags']
BOOL CryptUnregisterOIDInfo ['IN PCCRYPT_OID_INFO pInfo']
BOOL CryptEnumOIDInfo ['IN DWORD dwGroupId', 'IN DWORD dwFlags', 'IN void *pvArg', 'IN PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo']
LPCWSTR CryptFindLocalizedName ['IN LPCWSTR pwszCryptName']
HCRYPTMSG CryptMsgOpenToEncode ['IN DWORD dwMsgEncodingType', 'IN DWORD dwFlags', 'IN DWORD dwMsgType', 'IN void const *pvMsgEncodeInfo', 'IN OPTIONAL LPSTR pszInnerContentObjID', 'IN OPTIONAL PCMSG_STREAM_INFO pStreamInfo']
DWORD CryptMsgCalculateEncodedLength ['IN DWORD dwMsgEncodingType', 'IN DWORD dwFlags', 'IN DWORD dwMsgType', 'IN void const *pvMsgEncodeInfo', 'IN OPTIONAL LPSTR pszInnerContentObjID', 'IN DWORD cbData']
HCRYPTMSG CryptMsgOpenToDecode ['IN DWORD dwMsgEncodingType', 'IN DWORD dwFlags', 'IN DWORD dwMsgType', 'IN HCRYPTPROV hCryptProv', 'IN OPTIONAL PCERT_INFO pRecipientInfo', 'IN OPTIONAL PCMSG_STREAM_INFO pStreamInfo']
HCRYPTMSG CryptMsgDuplicate ['IN HCRYPTMSG hCryptMsg']
BOOL CryptMsgClose ['IN HCRYPTMSG hCryptMsg']
BOOL CryptMsgUpdate ['IN HCRYPTMSG hCryptMsg', 'IN const BYTE *pbData', 'IN DWORD cbData', 'IN BOOL fFinal']
BOOL CryptMsgGetParam ['IN HCRYPTMSG hCryptMsg', 'IN DWORD dwParamType', 'IN DWORD dwIndex', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
BOOL CryptMsgControl ['IN HCRYPTMSG hCryptMsg', 'IN DWORD dwFlags', 'IN DWORD dwCtrlType', 'IN void const *pvCtrlPara']
BOOL CryptMsgVerifyCountersignatureEncoded ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwEncodingType', 'IN PBYTE pbSignerInfo', 'IN DWORD cbSignerInfo', 'IN PBYTE pbSignerInfoCountersignature', 'IN DWORD cbSignerInfoCountersignature', 'IN PCERT_INFO pciCountersigner']
BOOL CryptMsgVerifyCountersignatureEncodedEx ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwEncodingType', 'IN PBYTE pbSignerInfo', 'IN DWORD cbSignerInfo', 'IN PBYTE pbSignerInfoCountersignature', 'IN DWORD cbSignerInfoCountersignature', 'IN DWORD dwSignerType', 'IN void *pvSigner', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved']
BOOL CryptMsgCountersign ['IN OUT HCRYPTMSG hCryptMsg', 'IN DWORD dwIndex', 'IN DWORD cCountersigners', 'IN PCMSG_SIGNER_ENCODE_INFO rgCountersigners']
BOOL CryptMsgCountersignEncoded ['IN DWORD dwEncodingType', 'IN PBYTE pbSignerInfo', 'IN DWORD cbSignerInfo', 'IN DWORD cCountersigners', 'IN PCMSG_SIGNER_ENCODE_INFO rgCountersigners', 'OUT PBYTE pbCountersignature', 'IN OUT PDWORD pcbCountersignature']
HCERTSTORE CertOpenStore ['IN LPCSTR lpszStoreProvider', 'IN DWORD dwEncodingType', 'IN HCRYPTPROV hCryptProv', 'IN DWORD dwFlags', 'IN const void *pvPara']
HCERTSTORE CertDuplicateStore ['IN HCERTSTORE hCertStore']
BOOL CertSaveStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwEncodingType', 'IN DWORD dwSaveAs', 'IN DWORD dwSaveTo', 'IN OUT void *pvSaveToPara', 'IN DWORD dwFlags']
BOOL CertCloseStore ['IN HCERTSTORE hCertStore', 'DWORD dwFlags']
PCCERT_CONTEXT CertGetSubjectCertificateFromStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN PCERT_INFO pCertId // fields are used']
PCCERT_CONTEXT CertEnumCertificatesInStore ['IN HCERTSTORE hCertStore', 'IN PCCERT_CONTEXT pPrevCertContext']
PCCERT_CONTEXT CertFindCertificateInStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN DWORD dwFindFlags', 'IN DWORD dwFindType', 'IN const void *pvFindPara', 'IN PCCERT_CONTEXT pPrevCertContext']
PCCERT_CONTEXT CertGetIssuerCertificateFromStore ['IN HCERTSTORE hCertStore', 'IN PCCERT_CONTEXT pSubjectContext', 'IN OPTIONAL PCCERT_CONTEXT pPrevIssuerContext', 'IN OUT DWORD *pdwFlags']
BOOL CertVerifySubjectCertificateContext ['IN PCCERT_CONTEXT pSubject', 'IN OPTIONAL PCCERT_CONTEXT pIssuer', 'IN OUT DWORD *pdwFlags']
PCCERT_CONTEXT CertDuplicateCertificateContext ['IN PCCERT_CONTEXT pCertContext']
PCCERT_CONTEXT CertCreateCertificateContext ['IN DWORD dwCertEncodingType', 'IN const BYTE *pbCertEncoded', 'IN DWORD cbCertEncoded']
BOOL CertFreeCertificateContext ['IN PCCERT_CONTEXT pCertContext']
BOOL CertSetCertificateContextProperty ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN const void *pvData']
BOOL CertGetCertificateContextProperty ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwPropId', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
DWORD CertEnumCertificateContextProperties ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwPropId']
BOOL CertCreateCTLEntryFromCertificateContextProperties ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD cOptAttr', 'IN OPTIONAL PCRYPT_ATTRIBUTE rgOptAttr', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved', 'OUT OPTIONAL PCTL_ENTRY pCtlEntry', 'IN OUT DWORD *pcbCtlEntry']
BOOL CertSetCertificateContextPropertiesFromCTLEntry ['IN PCCERT_CONTEXT pCertContext', 'IN PCTL_ENTRY pCtlEntry', 'IN DWORD dwFlags']
PCCRL_CONTEXT CertGetCRLFromStore ['IN HCERTSTORE hCertStore', 'IN OPTIONAL PCCERT_CONTEXT pIssuerContext', 'IN PCCRL_CONTEXT pPrevCrlContext', 'IN OUT DWORD *pdwFlags']
PCCRL_CONTEXT CertEnumCRLsInStore ['IN HCERTSTORE hCertStore', 'IN PCCRL_CONTEXT pPrevCrlContext']
PCCRL_CONTEXT CertFindCRLInStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN DWORD dwFindFlags', 'IN DWORD dwFindType', 'IN const void *pvFindPara', 'IN PCCRL_CONTEXT pPrevCrlContext']
PCCRL_CONTEXT CertDuplicateCRLContext ['IN PCCRL_CONTEXT pCrlContext']
PCCRL_CONTEXT CertCreateCRLContext ['IN DWORD dwCertEncodingType', 'IN const BYTE *pbCrlEncoded', 'IN DWORD cbCrlEncoded']
BOOL CertFreeCRLContext ['IN PCCRL_CONTEXT pCrlContext']
BOOL CertSetCRLContextProperty ['IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN const void *pvData']
BOOL CertGetCRLContextProperty ['IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwPropId', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
DWORD CertEnumCRLContextProperties ['IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwPropId']
BOOL CertFindCertificateInCRL ['IN PCCERT_CONTEXT pCert', 'IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved', 'OUT PCRL_ENTRY *ppCrlEntry']
BOOL CertIsValidCRLForCertificate ['IN PCCERT_CONTEXT pCert', 'IN PCCRL_CONTEXT pCrl', 'IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CertAddEncodedCertificateToStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN const BYTE *pbCertEncoded', 'IN DWORD cbCertEncoded', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCERT_CONTEXT *ppCertContext']
BOOL CertAddCertificateContextToStore ['IN HCERTSTORE hCertStore', 'IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCERT_CONTEXT *ppStoreContext']
BOOL CertAddSerializedElementToStore ['IN HCERTSTORE hCertStore', 'IN const BYTE *pbElement', 'IN DWORD cbElement', 'IN DWORD dwAddDisposition', 'IN DWORD dwFlags', 'IN DWORD dwContextTypeFlags', 'OUT OPTIONAL DWORD *pdwContextType', 'OUT OPTIONAL const void **ppvContext']
BOOL CertDeleteCertificateFromStore ['IN PCCERT_CONTEXT pCertContext']
BOOL CertAddEncodedCRLToStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN const BYTE *pbCrlEncoded', 'IN DWORD cbCrlEncoded', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCRL_CONTEXT *ppCrlContext']
BOOL CertAddCRLContextToStore ['IN HCERTSTORE hCertStore', 'IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCRL_CONTEXT *ppStoreContext']
BOOL CertDeleteCRLFromStore ['IN PCCRL_CONTEXT pCrlContext']
BOOL CertSerializeCertificateStoreElement ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwFlags', 'OUT BYTE *pbElement', 'IN OUT DWORD *pcbElement']
BOOL CertSerializeCRLStoreElement ['IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwFlags', 'OUT BYTE *pbElement', 'IN OUT DWORD *pcbElement']
PCCTL_CONTEXT CertDuplicateCTLContext ['IN PCCTL_CONTEXT pCtlContext']
PCCTL_CONTEXT CertCreateCTLContext ['IN DWORD dwMsgAndCertEncodingType', 'IN const BYTE *pbCtlEncoded', 'IN DWORD cbCtlEncoded']
BOOL CertFreeCTLContext ['IN PCCTL_CONTEXT pCtlContext']
BOOL CertSetCTLContextProperty ['IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN const void *pvData']
BOOL CertGetCTLContextProperty ['IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwPropId', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
DWORD CertEnumCTLContextProperties ['IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwPropId']
PCCTL_CONTEXT CertEnumCTLsInStore ['IN HCERTSTORE hCertStore', 'IN PCCTL_CONTEXT pPrevCtlContext']
PCTL_ENTRY CertFindSubjectInCTL ['IN DWORD dwEncodingType', 'IN DWORD dwSubjectType', 'IN void *pvSubject', 'IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwFlags']
PCCTL_CONTEXT CertFindCTLInStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwMsgAndCertEncodingType', 'IN DWORD dwFindFlags', 'IN DWORD dwFindType', 'IN const void *pvFindPara', 'IN PCCTL_CONTEXT pPrevCtlContext']
BOOL CertAddEncodedCTLToStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwMsgAndCertEncodingType', 'IN const BYTE *pbCtlEncoded', 'IN DWORD cbCtlEncoded', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCTL_CONTEXT *ppCtlContext']
BOOL CertAddCTLContextToStore ['IN HCERTSTORE hCertStore', 'IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCTL_CONTEXT *ppStoreContext']
BOOL CertSerializeCTLStoreElement ['IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwFlags', 'OUT BYTE *pbElement', 'IN OUT DWORD *pcbElement']
BOOL CertDeleteCTLFromStore ['IN PCCTL_CONTEXT pCtlContext']
BOOL CertAddCertificateLinkToStore ['IN HCERTSTORE hCertStore', 'IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCERT_CONTEXT *ppStoreContext']
BOOL CertAddCRLLinkToStore ['IN HCERTSTORE hCertStore', 'IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCRL_CONTEXT *ppStoreContext']
BOOL CertAddCTLLinkToStore ['IN HCERTSTORE hCertStore', 'IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCTL_CONTEXT *ppStoreContext']
BOOL CertAddStoreToCollection ['IN HCERTSTORE hCollectionStore', 'IN OPTIONAL HCERTSTORE hSiblingStore', 'IN DWORD dwUpdateFlags', 'IN DWORD dwPriority']
void CertRemoveStoreFromCollection ['IN HCERTSTORE hCollectionStore', 'IN HCERTSTORE hSiblingStore']
BOOL CertControlStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwFlags', 'IN DWORD dwCtrlType', 'IN void const *pvCtrlPara']
BOOL CertSetStoreProperty ['IN HCERTSTORE hCertStore', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN const void *pvData']
BOOL CertGetStoreProperty ['IN HCERTSTORE hCertStore', 'IN DWORD dwPropId', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
BOOL CertRegisterSystemStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags', 'IN PCERT_SYSTEM_STORE_INFO pStoreInfo', 'IN OPTIONAL void *pvReserved']
BOOL CertRegisterPhysicalStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags', 'IN LPCWSTR pwszStoreName', 'IN PCERT_PHYSICAL_STORE_INFO pStoreInfo', 'IN OPTIONAL void *pvReserved']
BOOL CertUnregisterSystemStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags']
BOOL CertUnregisterPhysicalStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags', 'IN LPCWSTR pwszStoreName']
BOOL CertEnumSystemStoreLocation ['IN DWORD dwFlags', 'IN void *pvArg', 'IN PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum']
BOOL CertEnumSystemStore ['IN DWORD dwFlags', 'IN OPTIONAL void *pvSystemStoreLocationPara', 'IN void *pvArg', 'IN PFN_CERT_ENUM_SYSTEM_STORE pfnEnum']
BOOL CertEnumPhysicalStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags', 'IN void *pvArg', 'IN PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum']
BOOL CertGetEnhancedKeyUsage ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwFlags', 'OUT PCERT_ENHKEY_USAGE pUsage', 'IN OUT DWORD *pcbUsage']
BOOL CertSetEnhancedKeyUsage ['IN PCCERT_CONTEXT pCertContext', 'IN PCERT_ENHKEY_USAGE pUsage']
BOOL CertAddEnhancedKeyUsageIdentifier ['IN PCCERT_CONTEXT pCertContext', 'IN LPCSTR pszUsageIdentifier']
BOOL CertRemoveEnhancedKeyUsageIdentifier ['IN PCCERT_CONTEXT pCertContext', 'IN LPCSTR pszUsageIdentifier']
BOOL CertGetValidUsages ['IN DWORD cCerts', 'IN PCCERT_CONTEXT *rghCerts', 'OUT int *cNumOIDs', 'OUT LPSTR *rghOIDs', 'IN OUT DWORD *pcbOIDs']
BOOL CryptMsgGetAndVerifySigner ['IN HCRYPTMSG hCryptMsg', 'IN DWORD cSignerStore', 'IN OPTIONAL HCERTSTORE *rghSignerStore', 'IN DWORD dwFlags', 'OUT OPTIONAL PCCERT_CONTEXT *ppSigner', 'IN OUT OPTIONAL DWORD *pdwSignerIndex']
BOOL CryptMsgSignCTL ['IN DWORD dwMsgEncodingType', 'IN BYTE *pbCtlContent', 'IN DWORD cbCtlContent', 'IN PCMSG_SIGNED_ENCODE_INFO pSignInfo', 'IN DWORD dwFlags', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded']
BOOL CryptMsgEncodeAndSignCTL ['IN DWORD dwMsgEncodingType', 'IN PCTL_INFO pCtlInfo', 'IN PCMSG_SIGNED_ENCODE_INFO pSignInfo', 'IN DWORD dwFlags', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded']
BOOL CertFindSubjectInSortedCTL ['IN PCRYPT_DATA_BLOB pSubjectIdentifier', 'IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwFlags', 'IN void *pvReserved', 'OUT OPTIONAL PCRYPT_DER_BLOB pEncodedAttributes']
BOOL CertEnumSubjectInSortedCTL ['IN PCCTL_CONTEXT pCtlContext', 'IN OUT void **ppvNextSubject', 'OUT OPTIONAL PCRYPT_DER_BLOB pSubjectIdentifier', 'OUT OPTIONAL PCRYPT_DER_BLOB pEncodedAttributes']
BOOL CertVerifyCTLUsage ['IN DWORD dwEncodingType', 'IN DWORD dwSubjectType', 'IN void *pvSubject', 'IN PCTL_USAGE pSubjectUsage', 'IN DWORD dwFlags', 'IN OPTIONAL PCTL_VERIFY_USAGE_PARA pVerifyUsagePara', 'IN OUT PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus']
BOOL CertVerifyRevocation ['IN DWORD dwEncodingType', 'IN DWORD dwRevType', 'IN DWORD cContext', 'IN PVOID rgpvContext[]', 'IN DWORD dwFlags', 'IN OPTIONAL PCERT_REVOCATION_PARA pRevPara', 'IN OUT PCERT_REVOCATION_STATUS pRevStatus']
BOOL CertCompareIntegerBlob ['IN PCRYPT_INTEGER_BLOB pInt1', 'IN PCRYPT_INTEGER_BLOB pInt2']
BOOL CertCompareCertificate ['IN DWORD dwCertEncodingType', 'IN PCERT_INFO pCertId1', 'IN PCERT_INFO pCertId2']
BOOL CertCompareCertificateName ['IN DWORD dwCertEncodingType', 'IN PCERT_NAME_BLOB pCertName1', 'IN PCERT_NAME_BLOB pCertName2']
BOOL CertIsRDNAttrsInCertificateName ['IN DWORD dwCertEncodingType', 'IN DWORD dwFlags', 'IN PCERT_NAME_BLOB pCertName', 'IN PCERT_RDN pRDN']
BOOL CertComparePublicKeyInfo ['IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pPublicKey1', 'IN PCERT_PUBLIC_KEY_INFO pPublicKey2']
DWORD CertGetPublicKeyLength ['IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pPublicKey']
BOOL CryptVerifyCertificateSignature ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN const BYTE * pbEncoded', 'IN DWORD cbEncoded', 'IN PCERT_PUBLIC_KEY_INFO pPublicKey']
BOOL CryptVerifyCertificateSignatureEx ['IN OPTIONAL HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN DWORD dwSubjectType', 'IN void *pvSubject', 'IN DWORD dwIssuerType', 'IN void *pvIssuer', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved']
BOOL CryptHashToBeSigned ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'OUT BYTE *pbComputedHash', 'IN OUT DWORD *pcbComputedHash']
BOOL CryptHashCertificate ['IN HCRYPTPROV hCryptProv', 'IN ALG_ID Algid', 'IN DWORD dwFlags', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'OUT BYTE *pbComputedHash', 'IN OUT DWORD *pcbComputedHash']
BOOL CryptSignCertificate ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwKeySpec', 'IN DWORD dwCertEncodingType', 'IN const BYTE *pbEncodedToBeSigned', 'IN DWORD cbEncodedToBeSigned', 'IN PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm', 'IN OPTIONAL const void *pvHashAuxInfo', 'OUT BYTE *pbSignature', 'IN OUT DWORD *pcbSignature']
BOOL CryptSignAndEncodeCertificate ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwKeySpec', 'IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', ' IN const void *pvStructInfo', 'IN PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm', 'IN OPTIONAL const void *pvHashAuxInfo', 'OUT PBYTE pbEncoded', 'IN OUT DWORD *pcbEncoded']
LONG CertVerifyTimeValidity ['IN LPFILETIME pTimeToVerify', 'IN PCERT_INFO pCertInfo']
LONG CertVerifyCRLTimeValidity ['IN LPFILETIME pTimeToVerify', 'IN PCRL_INFO pCrlInfo']
BOOL CertVerifyValidityNesting ['IN PCERT_INFO pSubjectInfo', 'IN PCERT_INFO pIssuerInfo']
BOOL CertVerifyCRLRevocation ['IN DWORD dwCertEncodingType', 'IN PCERT_INFO pCertId', ' IN DWORD cCrlInfo', 'IN PCRL_INFO rgpCrlInfo[]']
LPCSTR CertAlgIdToOID ['IN DWORD dwAlgId']
DWORD CertOIDToAlgId ['IN LPCSTR pszObjId']
PCERT_EXTENSION CertFindExtension ['IN LPCSTR pszObjId', 'IN DWORD cExtensions', 'IN CERT_EXTENSION rgExtensions[]']
PCRYPT_ATTRIBUTE CertFindAttribute ['IN LPCSTR pszObjId', 'IN DWORD cAttr', 'IN CRYPT_ATTRIBUTE rgAttr[]']
PCERT_RDN_ATTR CertFindRDNAttr ['IN LPCSTR pszObjId', 'IN PCERT_NAME_INFO pName']
BOOL CertGetIntendedKeyUsage ['IN DWORD dwCertEncodingType', 'IN PCERT_INFO pCertInfo', 'OUT BYTE *pbKeyUsage', 'IN DWORD cbKeyUsage']
BOOL CryptInstallDefaultContext ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwDefaultType', 'IN const void *pvDefaultPara', 'IN DWORD dwFlags', 'IN void *pvReserved', 'OUT HCRYPTDEFAULTCONTEXT *phDefaultContext']
BOOL CryptUninstallDefaultContext ['HCRYPTDEFAULTCONTEXT hDefaultContext', 'IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CryptExportPublicKeyInfo ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwKeySpec', 'IN DWORD dwCertEncodingType', 'OUT PCERT_PUBLIC_KEY_INFO pInfo', 'IN OUT DWORD *pcbInfo']
BOOL CryptExportPublicKeyInfoEx ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwKeySpec', 'IN DWORD dwCertEncodingType', 'IN LPSTR pszPublicKeyObjId', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvAuxInfo', 'OUT PCERT_PUBLIC_KEY_INFO pInfo', 'IN OUT DWORD *pcbInfo']
BOOL CryptImportPublicKeyInfo ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pInfo', 'OUT HCRYPTKEY *phKey']
BOOL CryptImportPublicKeyInfoEx ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pInfo', 'IN ALG_ID aiKeyAlg', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvAuxInfo', 'OUT HCRYPTKEY *phKey']
BOOL CryptAcquireCertificatePrivateKey ['IN PCCERT_CONTEXT pCert', 'IN DWORD dwFlags', 'IN void *pvReserved', 'OUT HCRYPTPROV *phCryptProv', 'OUT OPTIONAL DWORD *pdwKeySpec', 'OUT OPTIONAL BOOL *pfCallerFreeProv']
BOOL CryptFindCertificateKeyProvInfo ['IN PCCERT_CONTEXT pCert', 'IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CryptImportPKCS8 ['CRYPT_PKCS8_IMPORT_PARAMS sImportParams', ' DWORD dwFlags', '// in', 'optional HCRYPTPROV *phCryptProv', '// out', 'optional void *pvAuxInfo // in', 'optional']
BOOL CryptExportPKCS8 ['HCRYPTPROV hCryptProv', ' DWORD dwKeySpec', ' LPSTR pszPrivateKeyObjId', ' DWORD dwFlags', ' void *pvAuxInfo', ' BYTE *pbPrivateKeyBlob', ' DWORD *pcbPrivateKeyBlob // in', 'out']
BOOL CryptExportPKCS8Ex ['CRYPT_PKCS8_EXPORT_PARAMS* psExportParams', ' DWORD dwFlags', ' void *pvAuxInfo', ' BYTE *pbPrivateKeyBlob', ' DWORD *pcbPrivateKeyBlob // in', 'out']
BOOL CryptHashPublicKeyInfo ['IN HCRYPTPROV hCryptProv', 'IN ALG_ID Algid', 'IN DWORD dwFlags', 'IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pInfo', 'OUT BYTE *pbComputedHash', 'IN OUT DWORD *pcbComputedHash']
DWORD CertRDNValueToStrA ['IN DWORD dwValueType', 'IN PCERT_RDN_VALUE_BLOB pValue', 'OUT OPTIONAL LPSTR psz', 'IN DWORD csz']
DWORD CertRDNValueToStrW ['IN DWORD dwValueType', 'IN PCERT_RDN_VALUE_BLOB pValue', 'OUT OPTIONAL LPWSTR psz', 'IN DWORD csz']
DWORD CertNameToStrA ['IN DWORD dwCertEncodingType', 'IN PCERT_NAME_BLOB pName', 'IN DWORD dwStrType', 'OUT OPTIONAL LPSTR psz', 'IN DWORD csz']
DWORD CertNameToStrW ['IN DWORD dwCertEncodingType', 'IN PCERT_NAME_BLOB pName', 'IN DWORD dwStrType', 'OUT OPTIONAL LPWSTR psz', 'IN DWORD csz']
BOOL CertStrToNameA ['IN DWORD dwCertEncodingType', 'IN LPCSTR pszX500', 'IN DWORD dwStrType', 'IN OPTIONAL void *pvReserved', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded', 'OUT OPTIONAL LPCSTR *ppszError']
BOOL CertStrToNameW ['IN DWORD dwCertEncodingType', 'IN LPCWSTR pszX500', 'IN DWORD dwStrType', 'IN OPTIONAL void *pvReserved', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded', 'OUT OPTIONAL LPCWSTR *ppszError']
DWORD CertGetNameStringA ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwType', 'IN DWORD dwFlags', 'IN void *pvTypePara', 'OUT OPTIONAL LPSTR pszNameString', 'IN DWORD cchNameString']
DWORD CertGetNameStringW ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwType', 'IN DWORD dwFlags', 'IN void *pvTypePara', 'OUT OPTIONAL LPWSTR pszNameString', 'IN DWORD cchNameString']
BOOL CryptSignMessage ['IN PCRYPT_SIGN_MESSAGE_PARA pSignPara', 'IN BOOL fDetachedSignature', 'IN DWORD cToBeSigned', 'IN const BYTE *rgpbToBeSigned[]', 'IN DWORD rgcbToBeSigned[]', 'OUT BYTE *pbSignedBlob', 'IN OUT DWORD *pcbSignedBlob']
BOOL CryptVerifyMessageSignature ['IN PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara', 'IN DWORD dwSignerIndex', 'IN const BYTE *pbSignedBlob', 'IN DWORD cbSignedBlob', 'OUT BYTE OPTIONAL *pbDecoded', 'IN OUT OPTIONAL DWORD *pcbDecoded', 'OUT OPTIONAL PCCERT_CONTEXT *ppSignerCert']
LONG CryptGetMessageSignerCount ['IN DWORD dwMsgEncodingType', 'IN const BYTE *pbSignedBlob', 'IN DWORD cbSignedBlob']
HCERTSTORE CryptGetMessageCertificates ['IN DWORD dwMsgAndCertEncodingType', 'IN HCRYPTPROV hCryptProv', ' IN DWORD dwFlags', ' IN const BYTE *pbSignedBlob', 'IN DWORD cbSignedBlob']
BOOL CryptVerifyDetachedMessageSignature ['IN PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara', 'IN DWORD dwSignerIndex', 'IN const BYTE *pbDetachedSignBlob', 'IN DWORD cbDetachedSignBlob', 'IN DWORD cToBeSigned', 'IN const BYTE *rgpbToBeSigned[]', 'IN DWORD rgcbToBeSigned[]', 'OUT OPTIONAL PCCERT_CONTEXT *ppSignerCert']
BOOL CryptEncryptMessage ['IN PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara', 'IN DWORD cRecipientCert', 'IN PCCERT_CONTEXT rgpRecipientCert[]', 'IN const BYTE *pbToBeEncrypted', 'IN DWORD cbToBeEncrypted', 'OUT BYTE *pbEncryptedBlob', 'IN OUT DWORD *pcbEncryptedBlob']
BOOL CryptDecryptMessage ['IN PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara', 'IN const BYTE *pbEncryptedBlob', 'IN DWORD cbEncryptedBlob', 'OUT OPTIONAL BYTE *pbDecrypted', 'IN OUT OPTIONAL DWORD *pcbDecrypted', 'OUT OPTIONAL PCCERT_CONTEXT *ppXchgCert']
BOOL CryptSignAndEncryptMessage ['IN PCRYPT_SIGN_MESSAGE_PARA pSignPara', 'IN PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara', 'IN DWORD cRecipientCert', 'IN PCCERT_CONTEXT rgpRecipientCert[]', 'IN const BYTE *pbToBeSignedAndEncrypted', 'IN DWORD cbToBeSignedAndEncrypted', 'OUT BYTE *pbSignedAndEncryptedBlob', 'IN OUT DWORD *pcbSignedAndEncryptedBlob']
BOOL CryptDecryptAndVerifyMessageSignature ['IN PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara', 'IN PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara', 'IN DWORD dwSignerIndex', 'IN const BYTE *pbEncryptedBlob', 'IN DWORD cbEncryptedBlob', 'OUT OPTIONAL BYTE *pbDecrypted', 'IN OUT OPTIONAL DWORD *pcbDecrypted', 'OUT OPTIONAL PCCERT_CONTEXT *ppXchgCert', 'OUT OPTIONAL PCCERT_CONTEXT *ppSignerCert']
BOOL CryptDecodeMessage ['IN DWORD dwMsgTypeFlags', 'IN PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara', 'IN PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara', 'IN DWORD dwSignerIndex', 'IN const BYTE *pbEncodedBlob', 'IN DWORD cbEncodedBlob', 'IN DWORD dwPrevInnerContentType', 'OUT OPTIONAL DWORD *pdwMsgType', 'OUT OPTIONAL DWORD *pdwInnerContentType', 'OUT OPTIONAL BYTE *pbDecoded', 'IN OUT OPTIONAL DWORD *pcbDecoded', 'OUT OPTIONAL PCCERT_CONTEXT *ppXchgCert', 'OUT OPTIONAL PCCERT_CONTEXT *ppSignerCert']
BOOL CryptHashMessage ['IN PCRYPT_HASH_MESSAGE_PARA pHashPara', 'IN BOOL fDetachedHash', 'IN DWORD cToBeHashed', 'IN const BYTE *rgpbToBeHashed[]', 'IN DWORD rgcbToBeHashed[]', 'OUT OPTIONAL BYTE *pbHashedBlob', 'IN OUT OPTIONAL DWORD *pcbHashedBlob', 'OUT OPTIONAL BYTE *pbComputedHash', 'IN OUT OPTIONAL DWORD *pcbComputedHash']
BOOL CryptVerifyMessageHash ['IN PCRYPT_HASH_MESSAGE_PARA pHashPara', 'IN BYTE *pbHashedBlob', 'IN DWORD cbHashedBlob', 'OUT OPTIONAL BYTE *pbToBeHashed', 'IN OUT OPTIONAL DWORD *pcbToBeHashed', 'OUT OPTIONAL BYTE *pbComputedHash', 'IN OUT OPTIONAL DWORD *pcbComputedHash']
BOOL CryptVerifyDetachedMessageHash ['IN PCRYPT_HASH_MESSAGE_PARA pHashPara', 'IN BYTE *pbDetachedHashBlob', 'IN DWORD cbDetachedHashBlob', 'IN DWORD cToBeHashed', 'IN const BYTE *rgpbToBeHashed[]', 'IN DWORD rgcbToBeHashed[]', 'OUT OPTIONAL BYTE *pbComputedHash', 'IN OUT OPTIONAL DWORD *pcbComputedHash']
BOOL CryptSignMessageWithKey ['IN PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara', 'IN const BYTE *pbToBeSigned', 'IN DWORD cbToBeSigned', 'OUT BYTE *pbSignedBlob', 'IN OUT DWORD *pcbSignedBlob']
BOOL CryptVerifyMessageSignatureWithKey ['IN PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara', 'IN OPTIONAL PCERT_PUBLIC_KEY_INFO pPublicKeyInfo', 'IN const BYTE *pbSignedBlob', 'IN DWORD cbSignedBlob', 'OUT OPTIONAL BYTE *pbDecoded', 'IN OUT OPTIONAL DWORD *pcbDecoded']
HCERTSTORE CertOpenSystemStoreA ['HCRYPTPROV hProv', 'LPCSTR szSubsystemProtocol']
HCERTSTORE CertOpenSystemStoreW ['HCRYPTPROV hProv', 'LPCWSTR szSubsystemProtocol']
BOOL CertAddEncodedCertificateToSystemStoreA ['LPCSTR szCertStoreName', 'const BYTE * pbCertEncoded', 'DWORD cbCertEncoded']
BOOL CertAddEncodedCertificateToSystemStoreW ['LPCWSTR szCertStoreName', 'const BYTE * pbCertEncoded', 'DWORD cbCertEncoded']
BOOL CryptQueryObject ['DWORD dwObjectType', 'const void *pvObject', 'DWORD dwExpectedContentTypeFlags', 'DWORD dwExpectedFormatTypeFlags', 'DWORD dwFlags', 'DWORD *pdwMsgAndCertEncodingType', 'DWORD *pdwContentType', 'DWORD *pdwFormatType', 'HCERTSTORE *phCertStore', 'HCRYPTMSG *phMsg', 'const void **ppvContext']
LPVOID CryptMemAlloc ['IN ULONG cbSize']
LPVOID CryptMemRealloc ['IN LPVOID pv', 'IN ULONG cbSize']
VOID CryptMemFree ['IN LPVOID pv']
BOOL CryptCreateAsyncHandle ['IN DWORD dwFlags', 'OUT PHCRYPTASYNC phAsync']
BOOL CryptSetAsyncParam ['IN HCRYPTASYNC hAsync', 'IN LPSTR pszParamOid', 'IN LPVOID pvParam', 'IN OPTIONAL PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree']
BOOL CryptGetAsyncParam ['IN HCRYPTASYNC hAsync', 'IN LPSTR pszParamOid', 'OUT LPVOID* ppvParam', 'OUT OPTIONAL PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree']
BOOL CryptCloseAsyncHandle ['IN HCRYPTASYNC hAsync']
BOOL CryptRetrieveObjectByUrlA ['IN LPCSTR pszUrl', 'IN LPCSTR pszObjectOid', 'IN DWORD dwRetrievalFlags', 'IN DWORD dwTimeout', ' OUT LPVOID* ppvObject', 'IN HCRYPTASYNC hAsyncRetrieve', 'IN OPTIONAL PCRYPT_CREDENTIALS pCredentials', 'IN OPTIONAL LPVOID pvVerify', 'IN OPTIONAL PCRYPT_RETRIEVE_AUX_INFO pAuxInfo']
BOOL CryptRetrieveObjectByUrlW ['IN LPCWSTR pszUrl', 'IN LPCSTR pszObjectOid', 'IN DWORD dwRetrievalFlags', 'IN DWORD dwTimeout', ' OUT LPVOID* ppvObject', 'IN HCRYPTASYNC hAsyncRetrieve', 'IN OPTIONAL PCRYPT_CREDENTIALS pCredentials', 'IN OPTIONAL LPVOID pvVerify', 'IN OPTIONAL PCRYPT_RETRIEVE_AUX_INFO pAuxInfo']
BOOL CryptInstallCancelRetrieval ['IN PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel', 'IN const void *pvArg', 'IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CryptUninstallCancelRetrieval ['IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CryptCancelAsyncRetrieval ['HCRYPTASYNC hAsyncRetrieval']
BOOL CryptGetObjectUrl ['IN LPCSTR pszUrlOid', 'IN LPVOID pvPara', 'IN DWORD dwFlags', 'OUT OPTIONAL PCRYPT_URL_ARRAY pUrlArray', 'IN OUT DWORD* pcbUrlArray', 'OUT OPTIONAL PCRYPT_URL_INFO pUrlInfo', 'IN OUT OPTIONAL DWORD* pcbUrlInfo', 'IN OPTIONAL LPVOID pvReserved']
BOOL CryptGetTimeValidObject ['IN LPCSTR pszTimeValidOid', 'IN LPVOID pvPara', 'IN PCCERT_CONTEXT pIssuer', 'IN OPTIONAL LPFILETIME pftValidFor', 'IN DWORD dwFlags', 'IN DWORD dwTimeout', ' OUT OPTIONAL LPVOID* ppvObject', 'IN OPTIONAL PCRYPT_CREDENTIALS pCredentials', 'IN OPTIONAL LPVOID pvReserved']
BOOL CryptFlushTimeValidObject ['IN LPCSTR pszFlushTimeValidOid', 'IN LPVOID pvPara', 'IN PCCERT_CONTEXT pIssuer', 'IN DWORD dwFlags', 'IN LPVOID pvReserved']
BOOL CryptProtectData ['IN DATA_BLOB* pDataIn', 'IN LPCWSTR szDataDescr', 'IN OPTIONAL DATA_BLOB* pOptionalEntropy', 'IN PVOID pvReserved', 'IN OPTIONAL CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct', 'IN DWORD dwFlags', 'OUT DATA_BLOB* pDataOut // out encr blob']
BOOL CryptUnprotectData ['IN DATA_BLOB* pDataIn', ' OUT OPTIONAL LPWSTR* ppszDataDescr', ' IN OPTIONAL DATA_BLOB* pOptionalEntropy', 'IN PVOID pvReserved', 'IN OPTIONAL CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct', 'IN DWORD dwFlags', 'OUT DATA_BLOB* pDataOut']
BOOL CryptProtectMemory ['IN OUT LPVOID pDataIn', ' IN DWORD cbDataIn', ' IN DWORD dwFlags']
BOOL CryptUnprotectMemory ['IN OUT LPVOID pDataIn', ' IN DWORD cbDataIn', ' IN DWORD dwFlags']
PCCERT_CONTEXT CertCreateSelfSignCertificate ['IN HCRYPTPROV hProv', 'IN PCERT_NAME_BLOB pSubjectIssuerBlob', 'IN DWORD dwFlags', 'OPTIONAL PCRYPT_KEY_PROV_INFO pKeyProvInfo', 'OPTIONAL PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm', 'OPTIONAL LPSYSTEMTIME pStartTime', 'OPTIONAL LPSYSTEMTIME pEndTime', 'OPTIONAL PCERT_EXTENSIONS pExtensions']
BOOL CryptGetKeyIdentifierProperty ['IN const CRYPT_HASH_BLOB *pKeyIdentifier', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN OPTIONAL LPCWSTR pwszComputerName', 'IN OPTIONAL void *pvReserved', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
BOOL CryptSetKeyIdentifierProperty ['IN const CRYPT_HASH_BLOB *pKeyIdentifier', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN OPTIONAL LPCWSTR pwszComputerName', 'IN OPTIONAL void *pvReserved', 'IN const void *pvData']
BOOL CryptEnumKeyIdentifierProperties ['IN OPTIONAL const CRYPT_HASH_BLOB *pKeyIdentifier', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN OPTIONAL LPCWSTR pwszComputerName', 'IN OPTIONAL void *pvReserved', 'IN OPTIONAL void *pvArg', 'IN PFN_CRYPT_ENUM_KEYID_PROP pfnEnum']
BOOL CryptCreateKeyIdentifierFromCSP ['IN DWORD dwCertEncodingType', 'IN OPTIONAL LPCSTR pszPubKeyOID', 'IN const PUBLICKEYSTRUC *pPubKeyStruc', 'IN DWORD cbPubKeyStruc', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved', 'OUT BYTE *pbHash', 'IN OUT DWORD *pcbHash']
BOOL CertCreateCertificateChainEngine ['IN PCERT_CHAIN_ENGINE_CONFIG pConfig', 'OUT HCERTCHAINENGINE* phChainEngine']
VOID CertFreeCertificateChainEngine ['IN HCERTCHAINENGINE hChainEngine']
BOOL CertResyncCertificateChainEngine ['IN HCERTCHAINENGINE hChainEngine']
BOOL CertGetCertificateChain ['IN OPTIONAL HCERTCHAINENGINE hChainEngine', 'IN PCCERT_CONTEXT pCertContext', 'IN OPTIONAL LPFILETIME pTime', 'IN OPTIONAL HCERTSTORE hAdditionalStore', 'IN PCERT_CHAIN_PARA pChainPara', 'IN DWORD dwFlags', 'IN LPVOID pvReserved', 'OUT PCCERT_CHAIN_CONTEXT* ppChainContext']
VOID CertFreeCertificateChain ['IN PCCERT_CHAIN_CONTEXT pChainContext']
PCCERT_CHAIN_CONTEXT CertDuplicateCertificateChain ['IN PCCERT_CHAIN_CONTEXT pChainContext']
PCCERT_CHAIN_CONTEXT CertFindChainInStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN DWORD dwFindFlags', 'IN DWORD dwFindType', 'IN const void *pvFindPara', 'IN PCCERT_CHAIN_CONTEXT pPrevChainContext']
BOOL CertVerifyCertificateChainPolicy ['IN LPCSTR pszPolicyOID', 'IN PCCERT_CHAIN_CONTEXT pChainContext', 'IN PCERT_CHAIN_POLICY_PARA pPolicyPara', 'IN OUT PCERT_CHAIN_POLICY_STATUS pPolicyStatus']
BOOL CryptStringToBinaryA ['IN LPCSTR pszString', 'IN DWORD cchString', 'IN DWORD dwFlags', 'IN BYTE *pbBinary', 'IN OUT DWORD *pcbBinary', 'OUT DWORD *pdwSkip', ' OUT DWORD *pdwFlags //OPTIONAL']
BOOL CryptStringToBinaryW ['IN LPCWSTR pszString', 'IN DWORD cchString', 'IN DWORD dwFlags', 'IN BYTE *pbBinary', 'IN OUT DWORD *pcbBinary', 'OUT DWORD *pdwSkip', ' OUT DWORD *pdwFlags //OPTIONAL']
BOOL CryptBinaryToStringA ['IN CONST BYTE *pbBinary', 'IN DWORD cbBinary', 'IN DWORD dwFlags', 'IN LPSTR pszString', 'IN OUT DWORD *pcchString']
BOOL CryptBinaryToStringW ['IN CONST BYTE *pbBinary', 'IN DWORD cbBinary', 'IN DWORD dwFlags', 'IN LPWSTR pszString', 'IN OUT DWORD *pcchString']
HCERTSTORE PFXImportCertStore ['IN CRYPT_DATA_BLOB* pPFX', 'IN LPCWSTR szPassword', 'IN DWORD dwFlags']
BOOL PFXIsPFXBlob ['IN CRYPT_DATA_BLOB* pPFX']
BOOL PFXVerifyPassword ['IN CRYPT_DATA_BLOB* pPFX', 'IN LPCWSTR szPassword', 'IN DWORD dwFlags']
BOOL PFXExportCertStoreEx ['IN HCERTSTORE hStore', 'IN OUT CRYPT_DATA_BLOB* pPFX', 'IN LPCWSTR szPassword', 'IN void* pvReserved', 'IN DWORD dwFlags']
BOOL PFXExportCertStore ['IN HCERTSTORE hStore', 'IN OUT CRYPT_DATA_BLOB* pPFX', 'IN LPCWSTR szPassword', 'IN DWORD dwFlags']
extern DirectDrawEnumerateEx ['LPDDENUMCALLBACKEX lpCallback', 'LPVOID lpContext', 'DWORD dwFlags']
extern DirectDrawCreate ['LPGUID lpGUID', 'LPDIRECTDRAW *lplpDD', 'IUnknown *pUnkOuter']
extern DirectDrawCreateClipper ['DWORD dwFlags', 'LPDIRECTDRAWCLIPPER *lplpDDClipper', 'IUnknown *pUnkOuter']
DWORD InstallApplication ['PINSTALLDATA pInstallInfo']
DWORD UninstallApplication ['WCHAR * ProductCode']
DWORD CommandLineFromMsiDescriptor ['WCHAR * Descriptor', 'WCHAR * CommandLine', 'DWORD * CommandLineLength']
DWORD GetManagedApplications ['GUID * pCategory', 'DWORD dwQueryFlags', 'DWORD dwInfoLevel', 'LPDWORD pdwApps', 'PMANAGEDAPPLICATION* prgManagedApps']
DWORD GetLocalManagedApplications ['BOOL bUserApps', 'LPDWORD pdwApps', 'PLOCALMANAGEDAPPLICATION* prgLocalApps']
DWORD tcpxsum ['DWORD Seed', 'BYTE *Ptr', 'ULONG Length']
HANDLE CreateToolhelp32Snapshot ['DWORD dwFlags', 'DWORD th32ProcessID']
BOOL CloseToolhelp32Snapshot ['HANDLE hSnapshot']
BOOL Heap32ListFirst ['HANDLE hSnapshot', 'LPHEAPLIST32 lphl']
BOOL Heap32ListNext ['HANDLE hSnapshot', 'LPHEAPLIST32 lphl']
BOOL Heap32First ['HANDLE hSnapshot', 'LPHEAPENTRY32 lphe', 'DWORD th32ProcessID', 'DWORD th32HeapID']
BOOL Heap32Next ['HANDLE hSnapshot', 'LPHEAPENTRY32 lphe']
BOOL Toolhelp32ReadProcessMemory ['DWORD th32ProcessID', 'LPCVOID lpBaseAddress', 'LPVOID lpBuffer', 'DWORD cbRead', 'LPDWORD lpNumberOfBytesRead']
BOOL Process32First ['HANDLE hSnapshot', 'LPPROCESSENTRY32 lppe']
BOOL Process32Next ['HANDLE hSnapshot', 'LPPROCESSENTRY32 lppe']
BOOL Thread32First ['HANDLE hSnapshot', 'LPTHREADENTRY32 lpte']
BOOL Thread32Next ['HANDLE hSnapshot', 'LPTHREADENTRY32 lpte']
BOOL Module32First ['HANDLE hSnapshot', 'LPMODULEENTRY32 lpme']
BOOL Module32Next ['HANDLE hSnapshot', 'LPMODULEENTRY32 lpme']
int PerfRegister ['char * szTag', 'char * szOwner', 'char * szDescrip']
void PerfDump ['']
void PerfClear ['']
void PerfTags ['']
DWORD __GetUserKData ['DWORD dwOfst']
BOOL EventModify ['HANDLE hEvent', 'DWORD func']
void DebugBreak ['void']
void __emit ['unsigned const t32']
HANDLE GetCurrentThread ['void']
HANDLE GetCurrentProcess ['void']
DWORD GetCurrentThreadId ['void']
DWORD GetCurrentProcessId ['void']
DWORD TlsCall ['DWORD p1', 'DWORD p2']
DWORD CeGetCurrentTrust ['void']
DWORD CeGetCallerTrust ['void']
DWORD CeGetProcessTrust ['HANDLE hProc']
ULONG64 UnsignedMultiply128 ['ULONG64 Multiplier', 'ULONG64 Multiplicand', 'ULONG64 *HighProduct']
int SyncMgrResolveConflictW ['HWND hWndParent', 'RFCDLGPARAMW *pdlgParam']
int SyncMgrResolveConflictA ['HWND hWndParent', 'RFCDLGPARAMA *pdlgParam']
WSAAPI accept ['IN SOCKET s', 'OUT sockaddr FAR * addr', 'IN OUT int FAR * addrlen']
WSAAPI bind ['IN SOCKET s', 'IN const sockaddr FAR * name', 'IN int namelen']
WSAAPI closesocket ['IN SOCKET s']
WSAAPI connect ['IN SOCKET s', 'IN const sockaddr FAR * name', 'IN int namelen']
WSAAPI ioctlsocket ['IN SOCKET s', 'IN long cmd', 'IN OUT u_long FAR * argp']
WSAAPI getpeername ['IN SOCKET s', 'OUT sockaddr FAR * name', 'IN OUT int FAR * namelen']
WSAAPI getsockname ['IN SOCKET s', 'OUT sockaddr FAR * name', 'IN OUT int FAR * namelen']
WSAAPI htonl ['IN u_long hostlong']
WSAAPI htons ['IN u_short hostshort']
WSAAPI inet_addr ['IN const char FAR * cp']
WSAAPI inet_ntoa ['IN in_addr in']
WSAAPI listen ['IN SOCKET s', 'IN int backlog']
WSAAPI ntohl ['IN u_long netlong']
WSAAPI ntohs ['IN u_short netshort']
WSAAPI select ['IN int nfds', 'IN OUT fd_set FAR * readfds', 'IN OUT fd_set FAR * writefds', 'IN OUT fd_set FAR *exceptfds', 'IN const timeval FAR * timeout']
WSAAPI sendto ['IN SOCKET s', 'IN const char FAR * buf', 'IN int len', 'IN int flags', 'IN const sockaddr FAR * to', 'IN int tolen']
WSAAPI shutdown ['IN SOCKET s', 'IN int how']
WSAAPI socket ['IN int af', 'IN int type', 'IN int protocol']
WSAAPI gethostbyaddr ['IN const char FAR * addr', 'IN int len', 'IN int type']
WSAAPI gethostbyname ['IN const char FAR * name']
WSAAPI sethostname ['IN char *pName', 'IN int cName']
WSAAPI getservbyport ['IN int port', 'IN const char FAR * proto']
WSAAPI getservbyname ['IN const char FAR * name', 'IN const char FAR * proto']
WSAAPI getprotobynumber ['IN int number']
WSAAPI getprotobyname ['IN const char FAR * name']
WSAAPI WSAStartup ['IN WORD wVersionRequested', 'OUT LPWSADATA lpWSAData']
WSAAPI WSACleanup ['void']
WSAAPI WSASetLastError ['IN int iError']
WSAAPI WSAGetLastError ['void']
DWORD WSAControl ['DWORD Protocol', 'DWORD Action', 'LPVOID InputBuffer', 'LPDWORD InputBufferLength', 'LPVOID OutputBuffer', 'LPDWORD OutputBufferLength']
WSAAPI WSAIsBlocking ['void']
WSAAPI WSAUnhookBlockingHook ['void']
WSAAPI WSASetBlockingHook ['IN FARPROC lpBlockFunc']
WSAAPI WSACancelBlockingCall ['void']
WSAAPI WSAAsyncGetServByName ['IN HWND hWnd', 'IN u_int wMsg', 'IN const char FAR * name', 'IN const char FAR * proto', 'OUT char FAR * buf', 'IN int buflen']
WSAAPI WSAAsyncGetServByPort ['IN HWND hWnd', 'IN u_int wMsg', 'IN int port', 'IN const char FAR * proto', 'OUT char FAR * buf', 'IN int buflen']
WSAAPI WSAAsyncGetProtoByName ['IN HWND hWnd', 'IN u_int wMsg', 'IN const char FAR * name', 'OUT char FAR * buf', 'IN int buflen']
WSAAPI WSAAsyncGetProtoByNumber ['IN HWND hWnd', 'IN u_int wMsg', 'IN int number', 'OUT char FAR * buf', 'IN int buflen']
WSAAPI WSAAsyncGetHostByName ['IN HWND hWnd', 'IN u_int wMsg', 'IN const char FAR * name', 'OUT char FAR * buf', 'IN int buflen']
WSAAPI WSAAsyncGetHostByAddr ['IN HWND hWnd', 'IN u_int wMsg', 'IN const char FAR * addr', 'IN int len', 'IN int type', 'OUT char FAR * buf', 'IN int buflen']
WSAAPI WSACancelAsyncRequest ['IN HANDLE hAsyncTaskHandle']
WSAAPI WSAAsyncSelect ['IN SOCKET s', 'IN HWND hWnd', 'IN u_int wMsg', 'IN long lEvent']
WSAAPI WSAAccept ['IN SOCKET s', 'OUT sockaddr FAR * addr', 'IN OUT LPINT addrlen', 'IN LPCONDITIONPROC lpfnCondition', 'IN DWORD_PTR dwCallbackData']
WSAAPI WSACloseEvent ['IN WSAEVENT hEvent']
WSAAPI WSAConnect ['IN SOCKET s', 'IN const sockaddr FAR * name', 'IN int namelen', 'IN LPWSABUF lpCallerData', 'OUT LPWSABUF lpCalleeData', 'IN LPQOS lpSQOS', 'IN LPQOS lpGQOS']
WSAAPI WSACreateEvent ['void']
WSAAPI WSADuplicateSocketA ['IN SOCKET s', 'IN DWORD dwProcessId', 'OUT LPWSAPROTOCOL_INFOA lpProtocolInfo']
WSAAPI WSADuplicateSocketW ['IN SOCKET s', 'IN DWORD dwProcessId', 'OUT LPWSAPROTOCOL_INFOW lpProtocolInfo']
WSAAPI WSAEnumNetworkEvents ['IN SOCKET s', 'IN WSAEVENT hEventObject', 'OUT LPWSANETWORKEVENTS lpNetworkEvents']
WSAAPI WSAEnumProtocolsA ['IN LPINT lpiProtocols', 'OUT LPWSAPROTOCOL_INFOA lpProtocolBuffer', 'IN OUT LPDWORD lpdwBufferLength']
WSAAPI WSAEnumProtocolsW ['IN LPINT lpiProtocols', 'OUT LPWSAPROTOCOL_INFOW lpProtocolBuffer', 'IN OUT LPDWORD lpdwBufferLength']
WSAAPI WSAEventSelect ['IN SOCKET s', 'IN WSAEVENT hEventObject', 'IN long lNetworkEvents']
WSAAPI WSAGetOverlappedResult ['IN SOCKET s', 'IN LPWSAOVERLAPPED lpOverlapped', 'OUT LPDWORD lpcbTransfer', 'IN BOOL fWait', 'OUT LPDWORD lpdwFlags']
WSAAPI WSAGetQOSByName ['IN SOCKET s', 'IN LPWSABUF lpQOSName', 'OUT LPQOS lpQOS']
WSAAPI WSAHtonl ['IN SOCKET s', 'IN u_long hostlong', 'OUT u_long FAR * lpnetlong']
WSAAPI WSAHtons ['IN SOCKET s', 'IN u_short hostshort', 'OUT u_short FAR * lpnetshort']
WSAAPI WSAJoinLeaf ['IN SOCKET s', 'IN const sockaddr FAR * name', 'IN int namelen', 'IN LPWSABUF lpCallerData', 'OUT LPWSABUF lpCalleeData', 'IN LPQOS lpSQOS', 'IN LPQOS lpGQOS', 'IN DWORD dwFlags']
WSAAPI WSANtohl ['IN SOCKET s', 'IN u_long netlong', 'OUT u_long FAR * lphostlong']
WSAAPI WSANtohs ['IN SOCKET s', 'IN u_short netshort', 'OUT u_short FAR * lphostshort']
WSAAPI WSARecv ['IN SOCKET s', 'IN OUT LPWSABUF lpBuffers', 'IN DWORD dwBufferCount', 'OUT LPDWORD lpNumberOfBytesRecvd', 'IN OUT LPDWORD lpFlags', 'IN LPWSAOVERLAPPED lpOverlapped', 'IN LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine']
WSAAPI WSARecvDisconnect ['IN SOCKET s', 'OUT LPWSABUF lpInboundDisconnectData']
WSAAPI WSARecvFrom ['IN SOCKET s', 'IN OUT LPWSABUF lpBuffers', 'IN DWORD dwBufferCount', 'OUT LPDWORD lpNumberOfBytesRecvd', 'IN OUT LPDWORD lpFlags', 'OUT sockaddr FAR * lpFrom', 'IN OUT LPINT lpFromlen', 'IN LPWSAOVERLAPPED lpOverlapped', 'IN LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine']
WSAAPI WSAResetEvent ['IN WSAEVENT hEvent']
WSAAPI WSASend ['IN SOCKET s', 'IN LPWSABUF lpBuffers', 'IN DWORD dwBufferCount', 'OUT LPDWORD lpNumberOfBytesSent', 'IN DWORD dwFlags', 'IN LPWSAOVERLAPPED lpOverlapped', 'IN LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine']
WSAAPI WSASendDisconnect ['IN SOCKET s', 'IN LPWSABUF lpOutboundDisconnectData']
WSAAPI WSASendTo ['IN SOCKET s', 'IN LPWSABUF lpBuffers', 'IN DWORD dwBufferCount', 'OUT LPDWORD lpNumberOfBytesSent', 'IN DWORD dwFlags', 'IN const sockaddr FAR * lpTo', 'IN int iTolen', 'IN LPWSAOVERLAPPED lpOverlapped', 'IN LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine']
WSAAPI WSASetEvent ['IN WSAEVENT hEvent']
WSAAPI WSASocketA ['IN int af', 'IN int type', 'IN int protocol', 'IN LPWSAPROTOCOL_INFOA lpProtocolInfo', 'IN GROUP g', 'IN DWORD dwFlags']
WSAAPI WSASocketW ['IN int af', 'IN int type', 'IN int protocol', 'IN LPWSAPROTOCOL_INFOW lpProtocolInfo', 'IN GROUP g', 'IN DWORD dwFlags']
WSAAPI WSAWaitForMultipleEvents ['IN DWORD cEvents', 'IN const WSAEVENT FAR * lphEvents', 'IN BOOL fWaitAll', 'IN DWORD dwTimeout', 'IN BOOL fAlertable']
WSAAPI WSAStringToAddressA ['IN LPSTR AddressString', 'IN INT AddressFamily', 'IN LPWSAPROTOCOL_INFOA lpProtocolInfo', 'OUT LPSOCKADDR lpAddress', 'IN OUT LPINT lpAddressLength']
WSAAPI WSAStringToAddressW ['IN LPWSTR AddressString', 'IN INT AddressFamily', 'IN LPWSAPROTOCOL_INFOW lpProtocolInfo', 'OUT LPSOCKADDR lpAddress', 'IN OUT LPINT lpAddressLength']
WSAAPI WSALookupServiceBeginA ['IN LPWSAQUERYSETA lpqsRestrictions', 'IN DWORD dwControlFlags', 'OUT LPHANDLE lphLookup']
WSAAPI WSALookupServiceBeginW ['IN LPWSAQUERYSETW lpqsRestrictions', 'IN DWORD dwControlFlags', 'OUT LPHANDLE lphLookup']
WSAAPI WSALookupServiceNextA ['IN HANDLE hLookup', 'IN DWORD dwControlFlags', 'IN OUT LPDWORD lpdwBufferLength', 'OUT LPWSAQUERYSETA lpqsResults']
WSAAPI WSALookupServiceNextW ['IN HANDLE hLookup', 'IN DWORD dwControlFlags', 'IN OUT LPDWORD lpdwBufferLength', 'OUT LPWSAQUERYSETW lpqsResults']
WSAAPI WSANSPIoctl ['IN HANDLE hLookup', 'IN DWORD dwControlCode', 'IN LPVOID lpvInBuffer', 'IN DWORD cbInBuffer', 'OUT LPVOID lpvOutBuffer', 'IN DWORD cbOutBuffer', 'OUT LPDWORD lpcbBytesReturned', 'IN LPWSACOMPLETION lpCompletion']
WSAAPI WSALookupServiceEnd ['IN HANDLE hLookup']
WSAAPI WSAInstallServiceClassA ['IN LPWSASERVICECLASSINFOA lpServiceClassInfo']
WSAAPI WSAInstallServiceClassW ['IN LPWSASERVICECLASSINFOW lpServiceClassInfo']
WSAAPI WSARemoveServiceClass ['IN LPGUID lpServiceClassId']
WSAAPI WSAGetServiceClassInfoA ['IN LPGUID lpProviderId', 'IN LPGUID lpServiceClassId', 'IN OUT LPDWORD lpdwBufSize', 'OUT LPWSASERVICECLASSINFOA lpServiceClassInfo']
WSAAPI WSAGetServiceClassInfoW ['IN LPGUID lpProviderId', 'IN LPGUID lpServiceClassId', 'IN OUT LPDWORD lpdwBufSize', 'OUT LPWSASERVICECLASSINFOW lpServiceClassInfo']
WSAAPI WSAEnumNameSpaceProvidersA ['IN OUT LPDWORD lpdwBufferLength', 'OUT LPWSANAMESPACE_INFOA lpnspBuffer']
WSAAPI WSAEnumNameSpaceProvidersW ['IN OUT LPDWORD lpdwBufferLength', 'OUT LPWSANAMESPACE_INFOW lpnspBuffer']
WSAAPI WSAGetServiceClassNameByClassIdA ['IN LPGUID lpServiceClassId', 'OUT LPSTR lpszServiceClassName', 'IN OUT LPDWORD lpdwBufferLength']
WSAAPI WSAGetServiceClassNameByClassIdW ['IN LPGUID lpServiceClassId', 'OUT LPWSTR lpszServiceClassName', 'IN OUT LPDWORD lpdwBufferLength']
WSAAPI WSASetServiceA ['IN LPWSAQUERYSETA lpqsRegInfo', 'IN WSAESETSERVICEOP essoperation', 'IN DWORD dwControlFlags']
WSAAPI WSASetServiceW ['IN LPWSAQUERYSETW lpqsRegInfo', 'IN WSAESETSERVICEOP essoperation', 'IN DWORD dwControlFlags']
WSAAPI WSAProviderConfigChange ['IN OUT LPHANDLE lpNotificationHandle', 'IN LPWSAOVERLAPPED lpOverlapped', 'IN LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine']
UINT NdisGetPacketFlags ['IN PNDIS_PACKET Packet']
VOID NdisSetPacketFlags ['IN PNDIS_PACKET Packet', 'IN UINT Flags']
ULONG NdisGetPhysicalAddressHigh ['IN NDIS_PHYSICAL_ADDRESS PhysicalAddress']
VOID NdisSetPhysicalAddressHigh ['IN NDIS_PHYSICAL_ADDRESS PhysicalAddress', 'IN ULONG Value']
ULONG NdisGetPhysicalAddressLow ['IN NDIS_PHYSICAL_ADDRESS PhysicalAddress']
VOID NdisSetPhysicalAddressLow ['IN NDIS_PHYSICAL_ADDRESS PhysicalAddress', 'IN ULONG Value']
VOID NdisAllocateSpinLock ['IN PNDIS_SPIN_LOCK SpinLock']
VOID NdisFreeSpinLock ['IN PNDIS_SPIN_LOCK SpinLock']
VOID NdisAcquireSpinLock ['IN PNDIS_SPIN_LOCK SpinLock']
VOID NdisReleaseSpinLock ['IN PNDIS_SPIN_LOCK SpinLock']
VOID NdisDprAcquireSpinLock ['IN PNDIS_SPIN_LOCK SpinLock']
VOID NdisDprReleaseSpinLock ['IN PNDIS_SPIN_LOCK SpinLock']
VOID NdisGetCurrentSystemTime ['PLARGE_INTEGER pSystemTime']
ULONG NdisInterlockedIncrement ['IN PLONG Addend']
ULONG NdisInterlockedDecrement ['IN PLONG Addend']
VOID NdisInterlockedAddUlong ['IN PULONG Addend', 'IN ULONG Increment', 'IN PNDIS_SPIN_LOCK SpinLock']
PLIST_ENTRY NdisInterlockedInsertHeadList ['IN PLIST_ENTRY ListHead', 'IN PLIST_ENTRY ListEntry', 'IN PNDIS_SPIN_LOCK SpinLock']
PLIST_ENTRY NdisInterlockedInsertTailList ['IN PLIST_ENTRY ListHead', 'IN PLIST_ENTRY ListEntry', 'IN PNDIS_SPIN_LOCK SpinLock']
PLIST_ENTRY NdisInterlockedRemoveHeadList ['IN PLIST_ENTRY ListHead', 'IN PNDIS_SPIN_LOCK SpinLock']
LARGE_INTEGER NdisInterlockedAddLargeInteger ['IN PLARGE_INTEGER Addend', 'IN ULONG Increment', 'IN PKSPIN_LOCK Lock']
VOID NdisInitializeReadWriteLock ['IN PNDIS_RW_LOCK Lock']
VOID NdisAcquireReadWriteLock ['IN PNDIS_RW_LOCK Lock', 'IN BOOLEAN fWrite', '// TRUE -> Write', 'FALSE -> Read IN PLOCK_STATE LockState']
VOID NdisReleaseReadWriteLock ['IN PNDIS_RW_LOCK Lock', 'IN PLOCK_STATE LockState']
VOID NdisFreeReadWriteLock ['IN PNDIS_RW_LOCK Lock']
VOID NdisGetCurrentProcessorCpuUsage ['OUT PULONG pCpuUsage']
VOID NdisGetCurrentProcessorCounts ['OUT PULONG pIdleCount', 'OUT PULONG pKernelAndUser', 'OUT PULONG pIndex']
VOID NdisGetSystemUpTime ['OUT PULONG pSystemUpTime']
VOID NdisInitializeListHead ['IN PLIST_ENTRY ListHead']
VOID NdisOpenConfiguration ['OUT PNDIS_STATUS Status', 'OUT PNDIS_HANDLE ConfigurationHandle', 'IN NDIS_HANDLE WrapperConfigurationContext']
VOID NdisOpenConfigurationKeyByName ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE ConfigurationHandle', 'IN PNDIS_STRING SubKeyName', 'OUT PNDIS_HANDLE SubKeyHandle']
VOID NdisOpenConfigurationKeyByIndex ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE ConfigurationHandle', 'IN ULONG Index', 'OUT PNDIS_STRING KeyName', 'OUT PNDIS_HANDLE KeyHandle']
VOID NdisReadConfiguration ['OUT PNDIS_STATUS Status', 'OUT PNDIS_CONFIGURATION_PARAMETER *ParameterValue', 'IN NDIS_HANDLE ConfigurationHandle', 'IN PNDIS_STRING Keyword', 'IN NDIS_PARAMETER_TYPE ParameterType']
VOID NdisWriteConfiguration ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE ConfigurationHandle', 'IN PNDIS_STRING Keyword', 'IN PNDIS_CONFIGURATION_PARAMETER ParameterValue']
VOID NdisCloseConfiguration ['IN NDIS_HANDLE ConfigurationHandle']
VOID NdisReadNetworkAddress ['OUT PNDIS_STATUS Status', 'OUT PVOID * NetworkAddress', 'OUT PUINT NetworkAddressLength', 'IN NDIS_HANDLE ConfigurationHandle']
VOID NdisReadEisaSlotInformation ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE WrapperConfigurationContext', 'OUT PUINT SlotNumber', 'OUT PNDIS_EISA_FUNCTION_INFORMATION EisaData']
VOID NdisReadEisaSlotInformationEx ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE WrapperConfigurationContext', 'OUT PUINT SlotNumber', 'OUT PNDIS_EISA_FUNCTION_INFORMATION *EisaData', 'OUT PUINT NumberOfFunctions']
ULONG NdisReadPciSlotInformation ['IN NDIS_HANDLE NdisAdapterHandle', 'IN ULONG SlotNumber', 'IN ULONG Offset', 'IN PVOID Buffer', 'IN ULONG Length']
ULONG NdisWritePciSlotInformation ['IN NDIS_HANDLE NdisAdapterHandle', 'IN ULONG SlotNumber', 'IN ULONG Offset', 'IN PVOID Buffer', 'IN ULONG Length']
NDIS_STATUS NdisPciAssignResources ['IN NDIS_HANDLE NdisMacHandle', 'IN NDIS_HANDLE NdisWrapperHandle', 'IN NDIS_HANDLE WrapperConfigurationContext', 'IN ULONG SlotNumber', 'OUT PNDIS_RESOURCE_LIST * AssignedResources']
ULONG NdisReadPcmciaAttributeMemory ['IN NDIS_HANDLE NdisAdapterHandle', 'IN ULONG Offset', 'IN PVOID Buffer', 'IN ULONG Length']
ULONG NdisWritePcmciaAttributeMemory ['IN NDIS_HANDLE NdisAdapterHandle', 'IN ULONG Offset', 'IN PVOID Buffer', 'IN ULONG Length']
VOID NdisAllocateBufferPool ['OUT PNDIS_STATUS Status', 'OUT PNDIS_HANDLE PoolHandle', 'IN UINT NumberOfDescriptors']
VOID NdisFreeBufferPool ['IN NDIS_HANDLE PoolHandle']
VOID NdisAllocateBuffer ['OUT PNDIS_STATUS Status', 'OUT PNDIS_BUFFER * Buffer', 'IN NDIS_HANDLE PoolHandle', 'IN PVOID VirtualAddress', 'IN UINT Length']
VOID NdisCopyBuffer ['OUT PNDIS_STATUS Status', 'OUT PNDIS_BUFFER * Buffer', 'IN NDIS_HANDLE PoolHandle', 'IN PVOID MemoryDescriptor', 'IN UINT Offset', 'IN UINT Length']
VOID NdisAllocatePacketPool ['OUT PNDIS_STATUS Status', 'OUT PNDIS_HANDLE PoolHandle', 'IN UINT NumberOfDescriptors', 'IN UINT ProtocolReservedLength']
VOID NdisAllocatePacketPoolEx ['OUT PNDIS_STATUS Status', 'OUT PNDIS_HANDLE PoolHandle', 'IN UINT NumberOfDescriptors', 'IN UINT NumberOfOverflowDescriptors', 'IN UINT ProtocolReservedLength']
VOID NdisSetPacketPoolProtocolId ['IN NDIS_HANDLE PacketPoolHandle', 'IN UINT ProtocolId']
UINT NdisPacketPoolUsage ['IN NDIS_HANDLE PoolHandle']
UINT NdisPacketSize ['IN UINT ProtocolReservedSize']
NDIS_HANDLE NdisGetPoolFromPacket ['IN PNDIS_PACKET Packet']
PNDIS_PACKET_STACK NdisIMGetCurrentPacketStack ['IN PNDIS_PACKET Packet', 'OUT BOOLEAN * StacksRemaining']
VOID NdisFreePacketPool ['IN NDIS_HANDLE PoolHandle']
VOID NdisFreePacket ['IN PNDIS_PACKET Packet']
VOID NdisDprFreePacket ['IN PNDIS_PACKET Packet']
VOID NdisDprFreePacketNonInterlocked ['IN PNDIS_PACKET Packet']
VOID NdisAllocatePacket ['OUT PNDIS_STATUS Status', 'OUT PNDIS_PACKET * Packet', 'IN NDIS_HANDLE PoolHandle']
VOID NdisDprAllocatePacket ['OUT PNDIS_STATUS Status', 'OUT PNDIS_PACKET * Packet', 'IN NDIS_HANDLE PoolHandle']
VOID NdisDprAllocatePacketNonInterlocked ['OUT PNDIS_STATUS Status', 'OUT PNDIS_PACKET * Packet', 'IN NDIS_HANDLE PoolHandle']
NDIS_HANDLE NdisCreateBlockPool ['IN USHORT BlockSize', 'IN USHORT FreeBlockLinkOffset', 'IN ULONG Tag', 'IN NDIS_BLOCK_INITIALIZER InitFunction OPTIONAL']
VOID NdisDestroyBlockPool ['IN NDIS_HANDLE BlockPoolHandle']
PUCHAR NdisAllocateFromBlockPool ['IN NDIS_HANDLE BlockPoolHandle']
VOID NdisFreeToBlockPool ['IN PUCHAR Block']
VOID NdisFreeBuffer ['IN PNDIS_BUFFER Buffer']
VOID NdisQueryBuffer ['IN PNDIS_BUFFER Buffer', 'OUT PVOID * VirtualAddress OPTIONAL', 'OUT PUINT Length']
VOID NdisQueryBufferSafe ['IN PNDIS_BUFFER Buffer', 'OUT PVOID * VirtualAddress OPTIONAL', 'OUT PUINT Length', 'IN MM_PAGE_PRIORITY Priority']
VOID NdisQueryBufferOffset ['IN PNDIS_BUFFER Buffer', 'OUT PUINT Offset', 'OUT PUINT Length']
VOID NdisGetFirstBufferFromPacket ['IN PNDIS_PACKET Packet', 'OUT PNDIS_BUFFER * FirstBuffer', 'OUT PVOID * FirstBufferVA', 'OUT PUINT FirstBufferLength', 'OUT PUINT TotalBufferLength']
VOID NdisGetFirstBufferFromPacketSafe ['IN PNDIS_PACKET Packet', 'OUT PNDIS_BUFFER * FirstBuffer', 'OUT PVOID * FirstBufferVA', 'OUT PUINT FirstBufferLength', 'OUT PUINT TotalBufferLength', 'IN MM_PAGE_PRIORITY Priority']
ULONG NDIS_BUFFER_TO_SPAN_PAGES ['IN PNDIS_BUFFER Buffer']
VOID NdisGetBufferPhysicalArraySize ['IN PNDIS_BUFFER Buffer', 'OUT PUINT ArraySize']
VOID NdisRecalculatePacketCounts ['IN OUT PNDIS_PACKET Packet']
VOID NdisChainBufferAtFront ['IN OUT PNDIS_PACKET Packet', 'IN OUT PNDIS_BUFFER Buffer']
VOID NdisChainBufferAtBack ['IN OUT PNDIS_PACKET Packet', 'IN OUT PNDIS_BUFFER Buffer']
VOID NdisUnchainBufferAtFront ['IN OUT PNDIS_PACKET Packet', 'OUT PNDIS_BUFFER * Buffer']
VOID NdisUnchainBufferAtBack ['IN OUT PNDIS_PACKET Packet', 'OUT PNDIS_BUFFER * Buffer']
VOID NdisQueryPacket ['IN PNDIS_PACKET _Packet', 'OUT PUINT _PhysicalBufferCount OPTIONAL', 'OUT PUINT _BufferCount OPTIONAL', 'OUT PNDIS_BUFFER * _FirstBuffer OPTIONAL', 'OUT PUINT _TotalPacketLength OPTIONAL']
VOID NdisQueryPacket ['IN PNDIS_PACKET _Packet', 'OUT PUINT _PhysicalBufferCount OPTIONAL', 'OUT PUINT _BufferCount OPTIONAL', 'OUT PNDIS_BUFFER * _FirstBuffer OPTIONAL', 'OUT PUINT _TotalPacketLength OPTIONAL']
VOID NdisQueryPacketFirstBuffer ['IN PNDIS_PACKET _Packet', 'OUT PNDIS_BUFFER * _FirstBuffer']
VOID NdisQueryPacketLength ['IN PNDIS_PACKET _Packet', 'OUT PUINT _TotalPacketLength OPTIONAL']
VOID NdisGetNextBuffer ['IN PNDIS_BUFFER CurrentBuffer', 'OUT PNDIS_BUFFER * NextBuffer']
VOID NdisAdjustBufferLength ['IN PNDIS_BUFFER Buffer', 'IN UINT Length']
VOID NdisCopyFromPacketToPacket ['IN PNDIS_PACKET Destination', 'IN UINT DestinationOffset', 'IN UINT BytesToCopy', 'IN PNDIS_PACKET Source', 'IN UINT SourceOffset', 'OUT PUINT BytesCopied']
NDIS_STATUS NdisAllocateMemory ['OUT PVOID * VirtualAddress', 'IN UINT Length', 'IN UINT MemoryFlags', 'IN NDIS_PHYSICAL_ADDRESS HighestAcceptableAddress']
NDIS_STATUS NdisAllocateMemoryWithTag ['OUT PVOID * VirtualAddress', 'IN UINT Length', 'IN ULONG Tag']
VOID NdisFreeMemory ['IN PVOID VirtualAddress', 'IN UINT Length', 'IN UINT MemoryFlags']
VOID NdisStallExecution ['IN UINT MicrosecondsToStall']
VOID NdisInitializeEvent ['IN PNDIS_EVENT Event']
VOID NdisFreeEvent ['IN PNDIS_EVENT Event']
VOID NdisSetEvent ['IN PNDIS_EVENT Event']
VOID NdisResetEvent ['IN PNDIS_EVENT Event']
BOOLEAN NdisWaitEvent ['IN PNDIS_EVENT Event', 'IN UINT msToWait']
VOID NdisInitializeWorkItem ['IN PNDIS_WORK_ITEM WorkItem', 'IN NDIS_PROC Routine', 'IN PVOID Context']
NDIS_STATUS NdisScheduleWorkItem ['IN PNDIS_WORK_ITEM WorkItem']
VOID NdisOpenFile ['OUT PNDIS_STATUS Status', 'OUT PNDIS_HANDLE FileHandle', 'OUT PUINT FileLength', 'IN PNDIS_STRING FileName', 'IN NDIS_PHYSICAL_ADDRESS HighestAcceptableAddress']
VOID NdisCloseFile ['IN NDIS_HANDLE FileHandle']
VOID NdisMapFile ['OUT PNDIS_STATUS Status', 'OUT PVOID * MappedBuffer', 'IN NDIS_HANDLE FileHandle']
VOID NdisUnmapFile ['IN NDIS_HANDLE FileHandle']
VOID NdisFlushBuffer ['IN PNDIS_BUFFER Buffer', 'IN BOOLEAN WriteToDevice']
ULONG NdisGetSharedDataAlignment ['VOID']
VOID NdisInitializeString ['OUT PNDIS_STRING Destination', 'IN PUCHAR Source']
VOID NdisCreateLookaheadBufferFromSharedMemory ['IN PVOID pSharedMemory', 'IN UINT LookaheadLength', 'OUT PVOID * pLookaheadBuffer']
VOID NdisDestroyLookaheadBufferFromSharedMemory ['IN PVOID pLookaheadBuffer']
VOID NdisInitializeTimer ['IN OUT PNDIS_TIMER Timer', 'IN PNDIS_TIMER_FUNCTION TimerFunction', 'IN PVOID FunctionContext']
VOID NdisCancelTimer ['IN PNDIS_TIMER Timer', 'OUT PBOOLEAN TimerCancelled']
VOID NdisSetTimer ['IN PNDIS_TIMER Timer', 'IN UINT MillisecondsToDelay']
VOID NdisSetTimerEx ['IN PNDIS_TIMER Timer', 'IN UINT MillisecondsToDelay', 'IN PVOID FunctionContext']
VOID NdisAllocateDmaChannel ['OUT PNDIS_STATUS Status', 'OUT PNDIS_HANDLE NdisDmaHandle', 'IN NDIS_HANDLE NdisAdapterHandle', 'IN PNDIS_DMA_DESCRIPTION DmaDescription', 'IN ULONG MaximumLength']
VOID NdisFreeDmaChannel ['IN NDIS_HANDLE NdisDmaHandle']
VOID NdisSetupDmaTransfer ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisDmaHandle', 'IN PNDIS_BUFFER Buffer', 'IN ULONG Offset', 'IN ULONG Length', 'IN BOOLEAN WriteToDevice']
VOID NdisCompleteDmaTransfer ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisDmaHandle', 'IN PNDIS_BUFFER Buffer', 'IN ULONG Offset', 'IN ULONG Length', 'IN BOOLEAN WriteToDevice']
VOID NdisInitializeWrapper ['OUT PNDIS_HANDLE NdisWrapperHandle', 'IN PVOID SystemSpecific1', 'IN PVOID SystemSpecific2', 'IN PVOID SystemSpecific3']
VOID NdisTerminateWrapper ['IN NDIS_HANDLE NdisWrapperHandle', 'IN PVOID SystemSpecific']
CCHAR NdisSystemProcessorCount ['VOID']
PVOID NdisGetRoutineAddress ['IN PUNICODE_STRING NdisRoutineName']
UINT NdisGetVersion ['VOID']
VOID NdisInitAnsiString ['IN OUT PANSI_STRING DestinationString', 'IN PCSTR SourceString']
VOID NdisInitUnicodeString ['IN OUT PUNICODE_STRING DestinationString', 'IN PCWSTR SourceString']
NDIS_STATUS NdisAnsiStringToUnicodeString ['IN OUT PUNICODE_STRING DestinationString', 'IN PANSI_STRING SourceString']
NDIS_STATUS NdisUnicodeStringToAnsiString ['IN OUT PANSI_STRING DestinationString', 'IN PUNICODE_STRING SourceString']
NDIS_STATUS NdisUpcaseUnicodeString ['OUT PUNICODE_STRING DestinationString', 'IN PUNICODE_STRING SourceString']
void NdisInitializeNPagedLookasideList ['IN PNPAGED_LOOKASIDE_LIST Lookaside', 'IN PALLOCATE_FUNCTION Allocate OPTIONAL', 'IN PFREE_FUNCTION Free OPTIONAL', 'IN ULONG Flags', 'IN ULONG Size', 'IN ULONG Tag', 'IN USHORT Depth']
void NdisDeleteNPagedLookasideList ['IN PNPAGED_LOOKASIDE_LIST Lookaside']
PVOID NdisAllocateFromNPagedLookasideList ['IN PNPAGED_LOOKASIDE_LIST Lookaside']
void NdisFreeToNPagedLookasideList ['IN PNPAGED_LOOKASIDE_LIST Lookaside', 'IN PVOID Entry']
VOID NdisSetPacketStatus ['IN PNDIS_PACKET Packet', 'IN NDIS_STATUS Status', 'IN NDIS_HANDLE Handle', 'IN ULONG Code']
VOID NdisRegisterProtocol ['OUT PNDIS_STATUS Status', 'OUT PNDIS_HANDLE NdisProtocolHandle', 'IN PNDIS_PROTOCOL_CHARACTERISTICS ProtocolCharacteristics', 'IN UINT CharacteristicsLength']
VOID NdisDeregisterProtocol ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisProtocolHandle']
VOID NdisOpenAdapter ['OUT PNDIS_STATUS Status', 'OUT PNDIS_STATUS OpenErrorStatus', 'OUT PNDIS_HANDLE NdisBindingHandle', 'OUT PUINT SelectedMediumIndex', 'IN PNDIS_MEDIUM MediumArray', 'IN UINT MediumArraySize', 'IN NDIS_HANDLE NdisProtocolHandle', 'IN NDIS_HANDLE ProtocolBindingContext', 'IN PNDIS_STRING AdapterName', 'IN UINT OpenOptions', 'IN PSTRING AddressingInformation OPTIONAL']
VOID NdisCloseAdapter ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisBindingHandle']
VOID NdisCompleteBindAdapter ['IN NDIS_HANDLE BindAdapterContext', 'IN NDIS_STATUS Status', 'IN NDIS_STATUS OpenStatus']
VOID NdisCompleteUnbindAdapter ['IN NDIS_HANDLE UnbindAdapterContext', 'IN NDIS_STATUS Status']
VOID NdisSetProtocolFilter ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisBindingHandle', 'IN RECEIVE_HANDLER ReceiveHandler', 'IN RECEIVE_PACKET_HANDLER ReceivePacketHandler', 'IN NDIS_MEDIUM Medium', 'IN UINT Offset', 'IN UINT Size', 'IN PUCHAR Pattern']
VOID NdisOpenProtocolConfiguration ['OUT PNDIS_STATUS Status', 'OUT PNDIS_HANDLE ConfigurationHandle', 'IN PNDIS_STRING ProtocolSection']
VOID NdisGetDriverHandle ['IN NDIS_HANDLE NdisBindingHandle', 'OUT PNDIS_HANDLE NdisDriverHandle']
VOID NdisReEnumerateProtocolBindings ['IN NDIS_HANDLE NdisProtocolHandle']
NDIS_STATUS NdisWriteEventLogEntry ['IN PVOID LogHandle', 'IN NDIS_STATUS EventCode', 'IN ULONG UniqueEventValue', 'IN USHORT NumStrings', 'IN PVOID StringsList OPTIONAL', 'IN ULONG DataSize', 'IN PVOID Data OPTIONAL']
VOID NdisCompletePnPEvent ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisBindingHandle', 'IN PNET_PNP_EVENT NetPnPEvent']
NDIS_STATUS NdisQueryAdapterInstanceName ['OUT PNDIS_STRING pAdapterInstanceName', 'IN NDIS_HANDLE NdisBindingHandle']
NDIS_STATUS NdisQueryBindInstanceName ['OUT PNDIS_STRING pAdapterInstanceName', 'IN NDIS_HANDLE BindingContext']
VOID NdisRegisterTdiCallBack ['IN TDI_REGISTER_CALLBACK RegsterCallback', 'IN TDI_PNP_HANDLER PnPHandler']
VOID NdisRegisterTdiPnpHandler ['IN TDI_PNP_HANDLER PnPHandler']
VOID NdisSend ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisBindingHandle', 'IN PNDIS_PACKET Packet']
VOID NdisTransferData ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisBindingHandle', 'IN NDIS_HANDLE MacReceiveContext', 'IN UINT ByteOffset', 'IN UINT BytesToTransfer', 'IN OUT PNDIS_PACKET Packet', 'OUT PUINT BytesTransferred']
VOID NdisReset ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisBindingHandle']
VOID NdisRequest ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE NdisBindingHandle', 'IN PNDIS_REQUEST NdisRequest']
VOID NdisSetSendFlags ['IN PNDIS_PACKET Packet', 'IN UINT Flags']
VOID NdisQuerySendFlags ['IN PNDIS_PACKET Packet', 'OUT PUINT Flags']
VOID NdisReturnPackets ['IN PNDIS_PACKET * PacketsToReturn', 'IN UINT NumberOfPackets']
PNDIS_PACKET NdisGetReceivedPacket ['IN NDIS_HANDLE NdisBindingHandle', 'IN NDIS_HANDLE MacContext']
ULONG NdisBufferLength ['IN PNDIS_BUFFER Buffer']
PVOID NdisBufferVirtualAddress ['IN PNDIS_BUFFER Buffer']
VOID NdisSetPacketCancelId ['IN PNDIS_PACKET Packet', 'IN PVOID CancelId']
PVOID NdisGetPacketCancelId ['IN PNDIS_PACKET Packet']
VOID NdisCancelSendPackets ['IN NDIS_HANDLE NdisBindingHandle', 'IN PVOID CancelId']
NDIS_STATUS NdisQueryPendingIOCount ['IN PVOID NdisBindingHandle', 'IN OUT PULONG IoCount']
UCHAR NdisGeneratePartialCancelId ['VOID']
NDIS_STATUS NdisIMRegisterLayeredMiniport ['IN NDIS_HANDLE NdisWrapperHandle', 'IN PNDIS_MINIPORT_CHARACTERISTICS MiniportCharacteristics', 'IN UINT CharacteristicsLength', 'OUT PNDIS_HANDLE DriverHandle']
VOID NdisIMDeregisterLayeredMiniport ['IN NDIS_HANDLE DriverHandle']
VOID NdisIMAssociateMiniport ['IN NDIS_HANDLE DriverHandle', 'IN NDIS_HANDLE ProtocolHandle']
BOOLEAN NdisIMSwitchToMiniport ['IN NDIS_HANDLE MiniportAdapterHandle', 'OUT PNDIS_HANDLE SwitchHandle']
VOID NdisIMRevertBack ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN NDIS_HANDLE SwitchHandle']
NDIS_STATUS NdisIMQueueMiniportCallback ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN W_MINIPORT_CALLBACK CallbackRoutine', 'IN PVOID CallbackContext']
NDIS_STATUS NdisMRegisterDevice ['IN NDIS_HANDLE NdisWrapperHandle', 'IN PNDIS_STRING DeviceName', 'IN PNDIS_STRING SymbolicName', 'IN PDRIVER_DISPATCH MajorFunctions[]', 'OUT PDEVICE_OBJECT * pDeviceObject', 'OUT NDIS_HANDLE * NdisDeviceHandle']
NDIS_STATUS NdisMDeregisterDevice ['IN NDIS_HANDLE NdisDeviceHandle']
VOID NdisMRegisterUnloadHandler ['IN NDIS_HANDLE NdisWrapperHandle', 'IN PDRIVER_UNLOAD UnloadHandler']
NDIS_STATUS NdisMAllocateMapRegisters ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN UINT DmaChannel', 'IN NDIS_DMA_SIZE DmaSize', 'IN ULONG PhysicalMapRegistersNeeded', 'IN ULONG MaximumPhysicalMapping']
VOID NdisMFreeMapRegisters ['IN NDIS_HANDLE MiniportAdapterHandle']
NDIS_STATUS NdisMInitializeScatterGatherDma ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN BOOLEAN Dma64BitAddresses', 'IN ULONG MaximumPhysicalMapping']
NDIS_STATUS NdisMRegisterIoPortRange ['OUT PVOID * PortOffset', 'IN NDIS_HANDLE MiniportAdapterHandle', 'IN UINT InitialPort', 'IN UINT NumberOfPorts']
VOID NdisMDeregisterIoPortRange ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN UINT InitialPort', 'IN UINT NumberOfPorts', 'IN PVOID PortOffset']
NDIS_STATUS NdisMMapIoSpace ['OUT PVOID * VirtualAddress', 'IN NDIS_HANDLE MiniportAdapterHandle', 'IN NDIS_PHYSICAL_ADDRESS PhysicalAddress', 'IN UINT Length']
VOID NdisMUnmapIoSpace ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN PVOID VirtualAddress', 'IN UINT Length']
NDIS_STATUS NdisMRegisterInterrupt ['OUT PNDIS_MINIPORT_INTERRUPT Interrupt', 'IN NDIS_HANDLE MiniportAdapterHandle', 'IN UINT InterruptVector', 'IN UINT InterruptLevel', 'IN BOOLEAN RequestIsr', 'IN BOOLEAN SharedInterrupt', 'IN NDIS_INTERRUPT_MODE InterruptMode']
VOID NdisMDeregisterInterrupt ['IN PNDIS_MINIPORT_INTERRUPT Interrupt']
BOOLEAN NdisMSynchronizeWithInterrupt ['IN PNDIS_MINIPORT_INTERRUPT Interrupt', 'IN PVOID SynchronizeFunction', 'IN PVOID SynchronizeContext']
VOID NdisMSetPeriodicTimer ['IN PNDIS_MINIPORT_TIMER Timer', 'IN UINT MillisecondPeriod']
VOID NdisMInitializeTimer ['IN OUT PNDIS_MINIPORT_TIMER Timer', 'IN NDIS_HANDLE MiniportAdapterHandle', 'IN PNDIS_TIMER_FUNCTION TimerFunction', 'IN PVOID FunctionContext']
VOID NdisMCancelTimer ['IN PNDIS_MINIPORT_TIMER Timer', 'OUT PBOOLEAN TimerCancelled']
VOID NdisMSleep ['IN ULONG MicrosecondsToSleep']
VOID NdisMStartBufferPhysicalMapping ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN PNDIS_BUFFER Buffer', 'IN ULONG PhysicalMapRegister', 'IN BOOLEAN WriteToDevice', 'OUT PNDIS_PHYSICAL_ADDRESS_UNIT PhysicalAddressArray', 'OUT PUINT ArraySize']
VOID NdisMCompleteBufferPhysicalMapping ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN PNDIS_BUFFER Buffer', 'IN ULONG PhysicalMapRegister']
VOID NdisMAllocateSharedMemory ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN ULONG Length', 'IN BOOLEAN Cached', 'OUT PVOID * VirtualAddress', 'OUT PNDIS_PHYSICAL_ADDRESS PhysicalAddress']
NDIS_STATUS NdisMAllocateSharedMemoryAsync ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN ULONG Length', 'IN BOOLEAN Cached', 'IN PVOID Context']
VOID NdisMFreeSharedMemory ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN ULONG Length', 'IN BOOLEAN Cached', 'IN PVOID VirtualAddress', 'IN NDIS_PHYSICAL_ADDRESS PhysicalAddress']
NDIS_STATUS NdisMRegisterDmaChannel ['OUT PNDIS_HANDLE MiniportDmaHandle', 'IN NDIS_HANDLE MiniportAdapterHandle', 'IN UINT DmaChannel', 'IN BOOLEAN Dma32BitAddresses', 'IN PNDIS_DMA_DESCRIPTION DmaDescription', 'IN ULONG MaximumLength']
VOID NdisMDeregisterDmaChannel ['IN NDIS_HANDLE MiniportDmaHandle']
ULONG NdisMReadDmaCounter ['IN NDIS_HANDLE MiniportDmaHandle']
NDIS_STATUS NdisMRegisterMiniport ['IN NDIS_HANDLE NdisWrapperHandle', 'IN PNDIS_MINIPORT_CHARACTERISTICS MiniportCharacteristics', 'IN UINT CharacteristicsLength']
NDIS_STATUS NdisIMInitializeDeviceInstanceEx ['IN NDIS_HANDLE DriverHandle', 'IN PNDIS_STRING DriverInstance', 'IN NDIS_HANDLE DeviceContext OPTIONAL']
NDIS_STATUS NdisIMCancelInitializeDeviceInstance ['IN NDIS_HANDLE DriverHandle', 'IN PNDIS_STRING DeviceInstance']
NDIS_HANDLE NdisIMGetDeviceContext ['IN NDIS_HANDLE MiniportAdapterHandle']
NDIS_HANDLE NdisIMGetBindingContext ['IN NDIS_HANDLE NdisBindingHandle']
NDIS_STATUS NdisIMDeInitializeDeviceInstance ['IN NDIS_HANDLE NdisMiniportHandle']
VOID NdisIMCopySendPerPacketInfo ['OUT PNDIS_PACKET DstPacket', 'IN PNDIS_PACKET SrcPacket']
VOID NdisIMCopySendCompletePerPacketInfo ['OUT PNDIS_PACKET DstPacket', 'IN PNDIS_PACKET SrcPacket']
VOID NdisMSetAttributesEx ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN NDIS_HANDLE MiniportAdapterContext', 'IN UINT CheckForHangTimeInSeconds OPTIONAL', 'IN ULONG AttributeFlags', 'IN NDIS_INTERFACE_TYPE AdapterType OPTIONAL']
NDIS_STATUS NdisMSetMiniportSecondary ['IN NDIS_HANDLE MiniportHandle', 'IN NDIS_HANDLE PrimaryMiniportHandle']
NDIS_STATUS NdisMPromoteMiniport ['IN NDIS_HANDLE MiniportHandle']
NDIS_STATUS NdisMRemoveMiniport ['IN NDIS_HANDLE MiniportHandle']
VOID NdisMWanSendComplete ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN PVOID Packet', 'IN NDIS_STATUS Status']
VOID NdisMIndicateReceivePacket ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN PPNDIS_PACKET ReceivedPackets', 'IN UINT NumberOfPackets']
VOID NdisMWanIndicateReceive ['OUT PNDIS_STATUS Status', 'IN NDIS_HANDLE MiniportAdapterHandle', 'IN NDIS_HANDLE NdisLinkContext', 'IN PUCHAR Packet', 'IN ULONG PacketSize']
VOID NdisMWanIndicateReceiveComplete ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN NDIS_HANDLE NdisLinkContext']
VOID NdisMEthIndicateReceiveComplete ['IN NDIS_HANDLE MiniportHandle']
VOID NdisMTrIndicateReceiveComplete ['IN NDIS_HANDLE MiniportHandle']
VOID NdisMFddiIndicateReceiveComplete ['IN NDIS_HANDLE MiniportHandle']
VOID NdisMArcIndicateReceiveComplete ['IN NDIS_HANDLE MiniportHandle']
VOID NdisMIndicateStatus ['IN NDIS_HANDLE MiniportHandle', 'IN NDIS_STATUS GeneralStatus', 'IN PVOID StatusBuffer', 'IN UINT StatusBufferSize']
VOID NdisMIndicateStatusComplete ['IN NDIS_HANDLE MiniportHandle']
VOID NdisMRegisterAdapterShutdownHandler ['IN NDIS_HANDLE MiniportHandle', 'IN PVOID ShutdownContext', 'IN ADAPTER_SHUTDOWN_HANDLER ShutdownHandler']
VOID NdisMDeregisterAdapterShutdownHandler ['IN NDIS_HANDLE MiniportHandle']
NDIS_STATUS NdisMPciAssignResources ['IN NDIS_HANDLE MiniportHandle', 'IN ULONG SlotNumber', 'IN PNDIS_RESOURCE_LIST * AssignedResources']
NDIS_STATUS NdisMNotifyPnPEvent ['IN NDIS_HANDLE MiniportHandle', 'IN PNET_PNP_EVENT NetPnPEvent']
NDIS_STATUS NdisIMNotifyPnPEvent ['IN NDIS_HANDLE MiniportHandle', 'IN PNET_PNP_EVENT NetPnPEvent']
NDIS_STATUS NdisMCreateLog ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN UINT Size', 'OUT PNDIS_HANDLE LogHandle']
VOID NdisMCloseLog ['IN NDIS_HANDLE LogHandle']
VOID NdisMFlushLog ['IN NDIS_HANDLE LogHandle']
VOID NdisMGetDeviceProperty ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN OUT PDEVICE_OBJECT * PhysicalDeviceObject OPTIONAL', 'IN OUT PDEVICE_OBJECT * FunctionalDeviceObject OPTIONAL', 'IN OUT PDEVICE_OBJECT * NextDeviceObject OPTIONAL', 'IN OUT PCM_RESOURCE_LIST * AllocatedResources OPTIONAL', 'IN OUT PCM_RESOURCE_LIST * AllocatedResourcesTranslated OPTIONAL']
NDIS_STATUS NdisMQueryAdapterInstanceName ['OUT PNDIS_STRING pAdapterInstanceName', 'IN NDIS_HANDLE MiniportHandle']
VOID NdisMCoIndicateReceivePacket ['IN NDIS_HANDLE NdisVcHandle', 'IN PPNDIS_PACKET PacketArray', 'IN UINT NumberOfPackets']
VOID NdisMCoIndicateStatus ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN NDIS_HANDLE NdisVcHandle OPTIONAL', 'IN NDIS_STATUS GeneralStatus', 'IN PVOID StatusBuffer OPTIONAL', 'IN ULONG StatusBufferSize']
VOID NdisMCoReceiveComplete ['IN NDIS_HANDLE MiniportAdapterHandle']
VOID NdisMCoSendComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisVcHandle', 'IN PNDIS_PACKET Packet']
VOID NdisMCoActivateVcComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisVcHandle', 'IN PCO_CALL_PARAMETERS CallParameters']
VOID NdisMCoDeactivateVcComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisVcHandle']
VOID NdisMCoRequestComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE MiniportAdapterHandle', 'IN PNDIS_REQUEST Request']
NDIS_STATUS NdisMCmRegisterAddressFamily ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN PCO_ADDRESS_FAMILY AddressFamily', 'IN PNDIS_CALL_MANAGER_CHARACTERISTICS CmCharacteristics', 'IN UINT SizeOfCmCharacteristics']
NDIS_STATUS NdisMCmCreateVc ['IN NDIS_HANDLE MiniportAdapterHandle', 'IN NDIS_HANDLE NdisAfHandle', 'IN NDIS_HANDLE MiniportVcContext', 'OUT PNDIS_HANDLE NdisVcHandle']
NDIS_STATUS NdisMCmDeleteVc ['IN NDIS_HANDLE NdisVcHandle']
NDIS_STATUS NdisMCmActivateVc ['IN NDIS_HANDLE NdisVcHandle', 'IN PCO_CALL_PARAMETERS CallParameters']
NDIS_STATUS NdisMCmDeactivateVc ['IN NDIS_HANDLE NdisVcHandle']
NDIS_STATUS NdisMCmRequest ['IN NDIS_HANDLE NdisAfHandle', 'IN NDIS_HANDLE NdisVcHandle OPTIONAL', 'IN NDIS_HANDLE NdisPartyHandle OPTIONAL', 'IN OUT PNDIS_REQUEST NdisRequest']
VOID NdisConvertStringToAtmAddress ['OUT PNDIS_STATUS Status', 'IN PNDIS_STRING String', 'OUT PATM_ADDRESS AtmAddress']
NDIS_STATUS NdisCoAssignInstanceName ['IN NDIS_HANDLE NdisVcHandle', 'IN PNDIS_STRING BaseInstanceName', 'OUT PNDIS_STRING VcInstanceName']
VOID NdisCoSendPackets ['IN NDIS_HANDLE NdisVcHandle', 'IN PPNDIS_PACKET PacketArray', 'IN UINT NumberOfPackets']
NDIS_STATUS NdisCoCreateVc ['IN NDIS_HANDLE NdisBindingHandle', 'IN NDIS_HANDLE NdisAfHandle OPTIONAL', ' IN NDIS_HANDLE ProtocolVcContext', 'IN OUT PNDIS_HANDLE NdisVcHandle']
NDIS_STATUS NdisCoDeleteVc ['IN NDIS_HANDLE NdisVcHandle']
NDIS_STATUS NdisCoRequest ['IN NDIS_HANDLE NdisBindingHandle', 'IN NDIS_HANDLE NdisAfHandle OPTIONAL', 'IN NDIS_HANDLE NdisVcHandle OPTIONAL', 'IN NDIS_HANDLE NdisPartyHandle OPTIONAL', 'IN OUT PNDIS_REQUEST NdisRequest']
VOID NdisCoRequestComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisAfHandle', 'IN NDIS_HANDLE NdisVcHandle OPTIONAL', 'IN NDIS_HANDLE NdisPartyHandle OPTIONAL', 'IN PNDIS_REQUEST NdisRequest']
NDIS_STATUS NdisCoGetTapiCallId ['IN NDIS_HANDLE NdisVcHandle', 'IN OUT PVAR_STRING TapiCallId']
NDIS_STATUS NdisClOpenAddressFamily ['IN NDIS_HANDLE NdisBindingHandle', 'IN PCO_ADDRESS_FAMILY AddressFamily', 'IN NDIS_HANDLE ProtocolAfContext', 'IN PNDIS_CLIENT_CHARACTERISTICS ClCharacteristics', 'IN UINT SizeOfClCharacteristics', 'OUT PNDIS_HANDLE NdisAfHandle']
NDIS_STATUS NdisClCloseAddressFamily ['IN NDIS_HANDLE NdisAfHandle']
NDIS_STATUS NdisClRegisterSap ['IN NDIS_HANDLE NdisAfHandle', 'IN NDIS_HANDLE ProtocolSapContext', 'IN PCO_SAP Sap', 'OUT PNDIS_HANDLE NdisSapHandle']
NDIS_STATUS NdisClDeregisterSap ['IN NDIS_HANDLE NdisSapHandle']
NDIS_STATUS NdisClMakeCall ['IN NDIS_HANDLE NdisVcHandle', 'IN OUT PCO_CALL_PARAMETERS CallParameters', 'IN NDIS_HANDLE ProtocolPartyContext OPTIONAL', 'OUT PNDIS_HANDLE NdisPartyHandle OPTIONAL']
NDIS_STATUS NdisClCloseCall ['IN NDIS_HANDLE NdisVcHandle', 'IN NDIS_HANDLE NdisPartyHandle OPTIONAL', 'IN PVOID Buffer OPTIONAL', 'IN UINT Size OPTIONAL']
NDIS_STATUS NdisClModifyCallQoS ['IN NDIS_HANDLE NdisVcHandle', 'IN PCO_CALL_PARAMETERS CallParameters']
VOID NdisClIncomingCallComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisVcHandle', 'IN PCO_CALL_PARAMETERS CallParameters']
NDIS_STATUS NdisClAddParty ['IN NDIS_HANDLE NdisVcHandle', 'IN NDIS_HANDLE ProtocolPartyContext', 'IN OUT PCO_CALL_PARAMETERS CallParameters', 'OUT PNDIS_HANDLE NdisPartyHandle']
NDIS_STATUS NdisClDropParty ['IN NDIS_HANDLE NdisPartyHandle', 'IN PVOID Buffer OPTIONAL', 'IN UINT Size OPTIONAL']
NDIS_STATUS NdisClGetProtocolVcContextFromTapiCallId ['IN UNICODE_STRING TapiCallId', 'OUT PNDIS_HANDLE ProtocolVcContext']
NDIS_STATUS NdisCmRegisterAddressFamily ['IN NDIS_HANDLE NdisBindingHandle', 'IN PCO_ADDRESS_FAMILY AddressFamily', 'IN PNDIS_CALL_MANAGER_CHARACTERISTICS CmCharacteristics', 'IN UINT SizeOfCmCharacteristics']
VOID NdisCmOpenAddressFamilyComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisAfHandle', 'IN NDIS_HANDLE CallMgrAfContext']
VOID NdisCmCloseAddressFamilyComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisAfHandle']
VOID NdisCmRegisterSapComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisSapHandle', 'IN NDIS_HANDLE CallMgrSapContext']
VOID NdisCmDeregisterSapComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisSapHandle']
NDIS_STATUS NdisCmActivateVc ['IN NDIS_HANDLE NdisVcHandle', 'IN OUT PCO_CALL_PARAMETERS CallParameters']
NDIS_STATUS NdisCmDeactivateVc ['IN NDIS_HANDLE NdisVcHandle']
VOID NdisCmMakeCallComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisVcHandle', 'IN NDIS_HANDLE NdisPartyHandle OPTIONAL', 'IN NDIS_HANDLE CallMgrPartyContext OPTIONAL', 'IN PCO_CALL_PARAMETERS CallParameters']
VOID NdisCmCloseCallComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisVcHandle', 'IN NDIS_HANDLE NdisPartyHandle OPTIONAL']
VOID NdisCmAddPartyComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisPartyHandle', 'IN NDIS_HANDLE CallMgrPartyContext OPTIONAL', 'IN PCO_CALL_PARAMETERS CallParameters']
VOID NdisCmDropPartyComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisPartyHandle']
NDIS_STATUS NdisCmDispatchIncomingCall ['IN NDIS_HANDLE NdisSapHandle', 'IN NDIS_HANDLE NdisVcHandle', 'IN PCO_CALL_PARAMETERS CallParameters']
VOID NdisCmDispatchCallConnected ['IN NDIS_HANDLE NdisVcHandle']
VOID NdisCmModifyCallQoSComplete ['IN NDIS_STATUS Status', 'IN NDIS_HANDLE NdisVcHandle', 'IN PCO_CALL_PARAMETERS CallParameters']
VOID NdisCmDispatchIncomingCallQoSChange ['IN NDIS_HANDLE NdisVcHandle', 'IN PCO_CALL_PARAMETERS CallParameters']
VOID NdisCmDispatchIncomingCloseCall ['IN NDIS_STATUS CloseStatus', 'IN NDIS_HANDLE NdisVcHandle', 'IN PVOID Buffer OPTIONAL', 'IN UINT Size OPTIONAL']
VOID NdisCmDispatchIncomingDropParty ['IN NDIS_STATUS DropStatus', 'IN NDIS_HANDLE NdisPartyHandle', 'IN PVOID Buffer OPTIONAL', 'IN UINT Size OPTIONAL']
LONG FindFirstControl ['HANDLE& hFindHandle', 'HANDLE& hControlHandle', 'LPCTSTR lpszCachePath = NULL']
LONG FindNextControl ['HANDLE& hFindHandle', 'HANDLE& hControlHandle']
void FindControlClose ['HANDLE hFindHandle']
void ReleaseControlHandle ['HANDLE hControlHandle']
BOOL GetControlInfo ['HANDLE hControlHandle', 'UINT nFlag', 'LPDWORD lpdwData', 'LPTSTR lpszBuf', 'int nBufLen']
LONG GetControlDependentFile ['int iFile', 'HANDLE hControlHandle', 'LPTSTR lpszFile', 'LPDWORD lpdwSize', 'BOOL bToUpper = FALSE']
BOOL IsModuleRemovable ['LPCTSTR lpszFile']
FLOAT D3DMXVec3Length ['CONST D3DMXVECTOR3 *pV']
FIXED D3DMXVec3LengthFxd ['CONST D3DMXVECTOR3FXD *pV']
FLOAT D3DMXVec3LengthSq ['CONST D3DMXVECTOR3 *pV']
FIXED D3DMXVec3LengthSqFxd ['CONST D3DMXVECTOR3FXD *pV']
FLOAT D3DMXVec3Dot ['CONST D3DMXVECTOR3 *pV1', 'CONST D3DMXVECTOR3 *pV2']
FIXED D3DMXVec3DotFxd ['CONST D3DMXVECTOR3FXD *pV1', 'CONST D3DMXVECTOR3FXD *pV2']
FLOAT D3DMXVec4Length ['CONST D3DMXVECTOR4 *pV']
FIXED D3DMXVec4LengthFxd ['CONST D3DMXVECTOR4FXD *pV']
FLOAT D3DMXVec4LengthSq ['CONST D3DMXVECTOR4 *pV']
FIXED D3DMXVec4LengthSqFxd ['CONST D3DMXVECTOR4FXD *pV']
FLOAT D3DMXVec4Dot ['CONST D3DMXVECTOR4 *pV1', 'CONST D3DMXVECTOR4 *pV2']
FIXED D3DMXVec4DotFxd ['CONST D3DMXVECTOR4FXD *pV1', 'CONST D3DMXVECTOR4FXD *pV2']
FLOAT D3DMXMatrixfDeterminant ['CONST D3DMXMATRIX *pM']
FIXED D3DMXMatrixfDeterminantFxd ['CONST D3DMXMATRIXFXD *pM']
WSAAPI getaddrinfo ['IN const char FAR * nodename', 'IN const char FAR * servname', 'IN const addrinfo FAR * hints', 'OUT addrinfo FAR * FAR * res']
WSAAPI freeaddrinfo ['IN addrinfo FAR * ai']
BOOL InitLAP ['InitLap *il']
void DeinitLAP ['']
BOOL VerifyUser ['const GUID *AEKey', ' LPCWSTR pwszAEDisplayText', '/*Text Plugin will display', 'if null use from registry.*/ HWND hWndParent', ' DWORD dwOptions', ' PVOID pExtended /*Reserved', 'must be 0*/']
BOOL LAPCreateEnrollmentConfigDialog ['HWND hParentWindow', 'DWORD dwOptions']
VOID VerifyUserStart ['const GUID *AEKey', ' LPCWSTR pwszAEDisplayText', '/*Text Plugin will display', 'if null use from registry.*/ HWND hWndParent', ' DWORD dwOptions', ' PVOID pExtended /*Reserved', 'must be 0*/']
VOID VerifyUserStop ['']
VOID VerifyUserToTop ['']
BOOL LAPDisplayCodeword ['HWND hwndParent', 'LPCWSTR pwszCodeword']
BOOL LAPDisplayPreWipe ['HWND hwndParent']
BOOL LAPCancelVerifySequence ['']
BOOL LAPLockoutUser ['HWND hwnd', 'LPCWSTR', 'DWORD cSecondsToLockout']
DWORD IsDialogBoxHandled ['IN HWND hWnd', 'IN DWORD dwError', 'IN LPVOID lpInfo']
DWORD IsMessageBoxHandled ['IN HWND hWnd', 'IN UINT uText', 'IN UINT uCaption', 'IN UINT uType']
NTAPI Int32x32To64 ['LONG Multiplier', 'LONG Multiplicand']
NTAPI UInt32x32To64 ['DWORD Multiplier', 'DWORD Multiplicand']
NTAPI Int64ShllMod32 ['ULONGLONG Value', 'DWORD ShiftCount']
NTAPI Int64ShraMod32 ['LONGLONG Value', 'DWORD ShiftCount']
NTAPI Int64ShrlMod32 ['ULONGLONG Value', 'DWORD ShiftCount']
NTAPI Int64ShllMod32 ['ULONGLONG Value', 'DWORD ShiftCount']
NTAPI Int64ShraMod32 ['LONGLONG Value', 'DWORD ShiftCount']
NTAPI Int64ShrlMod32 ['ULONGLONG Value', 'DWORD ShiftCount']
VOID __jump_unwind ['PVOID VirtualFramePointer', 'PVOID TargetPc']
VOID __jump_unwind ['PVOID Fp', 'PVOID TargetPc']
VOID __jump_unwind ['PVOID Fp', 'PVOID TargetPc']
VOID __jump_unwind ['PVOID Fp', 'PVOID TargetPc']
VOID __jump_unwind ['ULONGLONG TargetMsFrame', 'ULONGLONG TargetBsFrame', 'ULONGLONG TargetPc']
NTAPI RtlCompareMemory ['const VOID *Source1', 'const VOID *Source2', 'SIZE_T Length']
NTAPI RtlCopyMemory ['VOID UNALIGNED *Destination', 'CONST VOID UNALIGNED *Source', 'SIZE_T Length']
NTAPI RtlCopyMemory32 ['VOID UNALIGNED *Destination', 'CONST VOID UNALIGNED *Source', 'DWORD Length']
NTAPI RtlMoveMemory ['VOID UNALIGNED *Destination', 'CONST VOID UNALIGNED *Source', 'SIZE_T Length']
NTAPI RtlFillMemory ['VOID UNALIGNED *Destination', 'SIZE_T Length', 'BYTE Fill']
NTAPI RtlZeroMemory ['VOID UNALIGNED *Destination', 'SIZE_T Length']
BOOL CeSafeCopyMemory ['LPVOID pDst', 'LPCVOID pSrc', 'DWORD cbSize']
NTAPI RtlMoveMemory64 ['IN PVOID64 Destination', 'IN PVOID64 Source', 'IN ULONGLONG Length']
NTAPI RtlFillMemory64 ['IN PVOID64 Destination', 'IN ULONGLONG Length', 'IN BYTE Fill']
NTAPI RtlZeroMemory64 ['IN PVOID64 Destination', 'IN ULONGLONG Length']
HANDLE CeOpenModuleByPolicy ['HANDLE ReferenceTokenHandle', 'LPCWSTR ModuleName', 'DWORD OpenModuleFlags', 'HANDLE *NewTokenHandle']
BOOL CePolicyCheck ['HANDLE TokenHandle', 'DWORD PolicyType', 'DWORD PolicyClass', 'DWORD PolicyMethod', 'LPCWSTR Name', 'DWORD DesiredAccess']
HANDLE CeOpenPolicy ['DWORD PolicyType', 'DWORD PolicyClass', 'DWORD PolicyMethod', 'LPCWSTR Name', 'DWORD OpenPolicyFlags']
BOOL CePolicyCheckByHandle ['HANDLE PolicyHandle', 'HANDLE TokenHandle', 'DWORD DesiredAccess']
BOOL CeGetPolicyInfo ['HANDLE PolicyHandle', 'CE_POLICY_INFO_TYPE PolicyInfoType', 'LPVOID pPolicyInfo', 'DWORD BufferLength', 'LPDWORD pBufferReturned']
BOOL CeClosePolicy ['HANDLE PolicyHandle']
BOOL SHEnumPropSheetHandlers ['HKEY hkey', 'int *pcPages', 'HPROPSHEETPAGE *prghPropPages', 'IShellPropSheetExt **prgpispse']
STDMETHODIMP OpenStreamOnFile ['LPALLOCATEBUFFER\tlpAllocateBuffer', 'LPFREEBUFFER lpFreeBuffer', 'ULONG ulFlags', 'LPTSTR lpszFileName', 'LPTSTR lpszPrefix', 'LPSTREAM FAR * lppStream']
HANDLE ActivateService ['LPCWSTR lpszDevKey', 'DWORD dwClientInfo']
HANDLE RegisterService ['LPCWSTR lpszType', 'DWORD dwIndex', 'LPCWSTR lpszLib', 'DWORD dwInfo']
BOOL DeregisterService ['HANDLE hDevice']
HANDLE CreateServiceHandle ['LPCWSTR lpNew', 'DWORD dwAccess', 'DWORD dwShareMode', 'HANDLE hProc']
BOOL GetServiceByIndex ['DWORD dwIndex', 'LPWIN32_FIND_DATA lpFindFileData']
BOOL ServiceIoControl ['HANDLE hService', 'DWORD dwIoControlCode', 'LPVOID lpInBuf', 'DWORD nInBufSize', 'LPVOID lpOutBuf', 'DWORD nOutBufSize', 'LPDWORD lpBytesReturned', 'LPOVERLAPPED lpOverlapped']
BOOL ServiceAddPort ['HANDLE hService', 'SOCKADDR *pSockAddr', 'int cbSockAddr', 'int iProtocol', 'WCHAR *szRegWritePath']
BOOL ServiceClosePort ['HANDLE hService', 'SOCKADDR *pSockAddr', 'int cbSockAddr', 'int iProtocol', 'BOOL fRemoveFromRegistry']
BOOL ServiceUnbindPorts ['HANDLE hService']
BOOL EnumServices ['PBYTE pBuffer', 'DWORD *pdwServiceEntries', 'DWORD *pdwBufferLen']
HANDLE GetServiceHandle ['LPWSTR szPrefix', 'LPWSTR szDllName', 'DWORD *pdwDllBuf']
LRESULT DrvClose ['HDRVR hdrvr', 'LPARAM lParam1', 'LPARAM lParam2']
HDRVR DrvOpen ['LPCSTR szDriverName', 'LPCSTR szSectionName', 'LPARAM lParam2']
LRESULT DrvSendMessage ['HDRVR hdrvr', 'UINT uMsg', 'LPARAM lParam1', 'LPARAM lParam2']
HINSTANCE DrvGetModuleHandle ['HDRVR hdrvr']
LRESULT DrvDefDriverProc ['DWORD dwDriverIdentifier', 'HDRVR hdrvr', 'UINT uMsg', 'LPARAM lParam1', 'LPARAM lParam2']
BOOL PlaySoundA ['LPCSTR pszSound', 'HMODULE hmod', 'DWORD fdwSound']
BOOL PlaySoundW ['LPCWSTR pszSound', 'HMODULE hmod', 'DWORD fdwSound']
UINT waveOutGetNumDevs ['void']
MMRESULT waveOutGetDevCaps ['UINT uDeviceID', 'LPWAVEOUTCAPS pwoc', 'UINT cbwoc']
MMRESULT waveOutGetVolume ['HWAVEOUT hwo', 'LPDWORD pdwVolume']
MMRESULT waveOutSetVolume ['HWAVEOUT hwo', 'DWORD dwVolume']
MMRESULT waveOutGetErrorText ['MMRESULT mmrError', 'LPTSTR pszText', 'UINT cchText']
MMRESULT waveOutClose ['HWAVEOUT hwo']
MMRESULT waveOutPrepareHeader ['HWAVEOUT hwo', 'LPWAVEHDR pwh', 'UINT cbwh']
MMRESULT waveOutUnprepareHeader ['HWAVEOUT hwo', 'LPWAVEHDR pwh', 'UINT cbwh']
MMRESULT waveOutWrite ['HWAVEOUT hwo', 'LPWAVEHDR pwh', 'UINT cbwh']
MMRESULT waveOutPause ['HWAVEOUT hwo']
MMRESULT waveOutRestart ['HWAVEOUT hwo']
MMRESULT waveOutReset ['HWAVEOUT hwo']
MMRESULT waveOutBreakLoop ['HWAVEOUT hwo']
MMRESULT waveOutGetPosition ['HWAVEOUT hwo', 'LPMMTIME pmmt', 'UINT cbmmt']
MMRESULT waveOutGetPitch ['HWAVEOUT hwo', 'LPDWORD pdwPitch']
MMRESULT waveOutSetPitch ['HWAVEOUT hwo', 'DWORD dwPitch']
MMRESULT waveOutGetPlaybackRate ['HWAVEOUT hwo', 'LPDWORD pdwRate']
MMRESULT waveOutSetPlaybackRate ['HWAVEOUT hwo', 'DWORD dwRate']
MMRESULT waveOutGetID ['HWAVEOUT hwo', 'LPUINT puDeviceID']
MMRESULT waveOutMessage ['HWAVEOUT hwo', 'UINT uMsg', 'DWORD dw1', 'DWORD dw2']
MMRESULT waveOutOpen ['LPHWAVEOUT phwo', 'UINT uDeviceID', 'LPCWAVEFORMATEX pwfx', 'DWORD dwCallback', 'DWORD dwInstance', 'DWORD fdwOpen']
MMRESULT waveOutGetProperty ['UINT uDeviceID', 'const GUID* pPropSetId', 'ULONG ulPropId', 'LPVOID pvPropParams', 'ULONG cbPropParams', 'LPVOID pvPropData', 'ULONG cbPropData', 'PULONG pcbReturn']
MMRESULT waveOutSetProperty ['UINT uDeviceID', 'const GUID* pPropSetId', 'ULONG ulPropId', 'LPVOID pvPropParams', 'ULONG cbPropParams', 'LPVOID pvPropData', 'ULONG cbPropData']
UINT waveInGetNumDevs ['void']
MMRESULT waveInGetDevCaps ['UINT uDeviceID', 'LPWAVEINCAPS pwic', 'UINT cbwic']
MMRESULT waveInGetErrorText ['MMRESULT mmrError', 'LPTSTR pszText', 'UINT cchText']
MMRESULT waveInClose ['HWAVEIN hwi']
MMRESULT waveInPrepareHeader ['HWAVEIN hwi', 'LPWAVEHDR pwh', 'UINT cbwh']
MMRESULT waveInUnprepareHeader ['HWAVEIN hwi', 'LPWAVEHDR pwh', 'UINT cbwh']
MMRESULT waveInAddBuffer ['HWAVEIN hwi', 'LPWAVEHDR pwh', 'UINT cbwh']
MMRESULT waveInStart ['HWAVEIN hwi']
MMRESULT waveInStop ['HWAVEIN hwi']
MMRESULT waveInReset ['HWAVEIN hwi']
MMRESULT waveInGetPosition ['HWAVEIN hwi', 'LPMMTIME pmmt', 'UINT cbmmt']
MMRESULT waveInGetID ['HWAVEIN hwi', 'LPUINT puDeviceID']
MMRESULT waveInMessage ['HWAVEIN hwi', 'UINT uMsg', 'DWORD dw1', 'DWORD dw2']
MMRESULT waveInOpen ['LPHWAVEIN phwi', 'UINT uDeviceID', 'LPCWAVEFORMATEX pwfx', 'DWORD dwCallback', 'DWORD dwInstance', 'DWORD fdwOpen']
MMRESULT waveInGetProperty ['UINT uDeviceID', 'const GUID* pPropSetId', 'ULONG ulPropId', 'LPVOID pvPropParams', 'ULONG cbPropParams', 'LPVOID pvPropData', 'ULONG cbPropData', 'PULONG pcbReturn']
MMRESULT waveInSetProperty ['UINT uDeviceID', 'const GUID* pPropSetId', 'ULONG ulPropId', 'LPVOID pvPropParams', 'ULONG cbPropParams', 'LPVOID pvPropData', 'ULONG cbPropData']
MMRESULT midiOutGetDevCaps ['UINT uDeviceID', 'LPMIDIOUTCAPS pmoc', 'UINT cbmoc']
DWORD midiOutMessage ['HMIDIOUT hmo', 'UINT uMsg', 'DWORD dw1', 'DWORD dw2']
MMRESULT midiInGetDevCaps ['UINT uDeviceID', 'LPMIDIINCAPS pmic', 'UINT cbmic']
DWORD midiInMessage ['HMIDIIN hmi', 'UINT uMsg', 'DWORD dw1', 'DWORD dw2']
UINT mixerGetNumDevs ['void']
MMRESULT mixerGetDevCaps ['UINT uMxId', 'LPMIXERCAPS pmxcaps', 'UINT cbmxcaps']
MMRESULT mixerOpen ['LPHMIXER phmx', 'UINT uMxId', 'DWORD dwCallback', 'DWORD dwInstance', 'DWORD fdwOpen']
MMRESULT mixerClose ['HMIXER hmx']
DWORD mixerMessage ['HMIXER hmx', 'UINT uMsg', 'DWORD dwParam1', 'DWORD dwParam2']
MMRESULT mixerGetLineInfo ['HMIXEROBJ hmxobj', 'LPMIXERLINE pmxl', 'DWORD fdwInfo']
MMRESULT mixerGetID ['HMIXEROBJ hmxobj', 'UINT FAR *puMxId', 'DWORD fdwId']
MMRESULT mixerGetLineControls ['HMIXEROBJ hmxobj', 'LPMIXERLINECONTROLS pmxlc', 'DWORD fdwControls']
MMRESULT mixerGetControlDetails ['HMIXEROBJ hmxobj', 'LPMIXERCONTROLDETAILS pmxcd', 'DWORD fdwDetails']
MMRESULT mixerSetControlDetails ['HMIXEROBJ hmxobj', 'LPMIXERCONTROLDETAILS pmxcd', 'DWORD fdwDetails']
extern DirectSoundCreate ['LPGUID', 'LPDIRECTSOUND *', 'LPUNKNOWN']
extern DirectSoundEnumerateW ['LPDSENUMCALLBACKW', 'LPVOID']
extern DirectSoundEnumerateA ['LPDSENUMCALLBACKA', 'LPVOID']
extern DirectSoundCaptureCreate ['LPGUID', 'LPDIRECTSOUNDCAPTURE *', 'LPUNKNOWN']
extern DirectSoundCaptureEnumerateW ['LPDSENUMCALLBACKW', 'LPVOID']
extern DirectSoundCaptureEnumerateA ['LPDSENUMCALLBACKA', 'LPVOID']
BOOLAPI InternetTimeFromSystemTimeW ['IN CONST SYSTEMTIME *pst', ' IN DWORD dwRFC', ' OUT LPWSTR lpszTime', ' IN DWORD cbTime // output buffer size']
BOOLAPI InternetTimeFromSystemTime ['IN CONST SYSTEMTIME *pst', ' IN DWORD dwRFC', ' OUT LPSTR lpszTime', ' IN DWORD cbTime // output buffer size']
BOOLAPI InternetTimeToSystemTimeA ['IN LPCSTR lpszTime', ' OUT SYSTEMTIME *pst', ' IN DWORD dwReserved']
BOOLAPI InternetTimeToSystemTimeW ['IN LPCWSTR lpszTime', ' OUT SYSTEMTIME *pst', ' IN DWORD dwReserved']
BOOLAPI InternetTimeToSystemTime ['IN LPCSTR lpszTime', ' OUT SYSTEMTIME *pst', ' IN DWORD dwReserved']
BOOLAPI InternetCrackUrlA ['IN LPCSTR lpszUrl', 'IN DWORD dwUrlLength', 'IN DWORD dwFlags', 'IN OUT LPURL_COMPONENTSA lpUrlComponents']
BOOLAPI InternetCrackUrlW ['IN LPCWSTR lpszUrl', 'IN DWORD dwUrlLength', 'IN DWORD dwFlags', 'IN OUT LPURL_COMPONENTSW lpUrlComponents']
BOOLAPI InternetCombineUrlA ['IN LPCSTR lpszBaseUrl', 'IN LPCSTR lpszRelativeUrl', 'OUT LPSTR lpszBuffer', 'IN OUT LPDWORD lpdwBufferLength', 'IN DWORD dwFlags']
BOOLAPI InternetCloseHandle ['IN HINTERNET hInternet']
BOOLAPI InternetWriteFile ['IN HINTERNET hFile', 'IN LPCVOID lpBuffer', 'IN DWORD dwNumberOfBytesToWrite', 'OUT LPDWORD lpdwNumberOfBytesWritten']
BOOLAPI InternetQueryDataAvailable ['IN HINTERNET hFile', 'OUT LPDWORD lpdwNumberOfBytesAvailable OPTIONAL', 'IN DWORD dwFlags', 'IN DWORD_PTR dwContext']
BOOLAPI InternetFindNextFileA ['IN HINTERNET hFind', 'OUT LPVOID lpvFindData']
BOOLAPI InternetFindNextFileW ['IN HINTERNET hFind', 'OUT LPVOID lpvFindData']
BOOLAPI InternetQueryOptionW ['IN HINTERNET hInternet OPTIONAL', 'IN DWORD dwOption', 'OUT LPVOID lpBuffer OPTIONAL', 'IN OUT LPDWORD lpdwBufferLength']
BOOLAPI InternetLockRequestFile ['IN HINTERNET hInternet', 'OUT HANDLE * lphLockRequestInfo']
BOOLAPI InternetUnlockRequestFile ['IN HANDLE hLockRequestInfo']
BOOLAPI InternetGetLastResponseInfoA ['OUT LPDWORD lpdwError', 'OUT LPSTR lpszBuffer OPTIONAL', 'IN OUT LPDWORD lpdwBufferLength']
BOOLAPI InternetGetLastResponseInfoW ['OUT LPDWORD lpdwError', 'OUT LPWSTR lpszBuffer OPTIONAL', 'IN OUT LPDWORD lpdwBufferLength']
BOOLAPI FtpGetFileA ['IN HINTERNET hConnect', 'IN LPCSTR lpszRemoteFile', 'IN LPCSTR lpszNewFile', 'IN BOOL fFailIfExists', 'IN DWORD dwFlagsAndAttributes', 'IN DWORD dwFlags', 'IN DWORD_PTR dwContext']
BOOLAPI FtpGetFileW ['IN HINTERNET hConnect', 'IN LPCWSTR lpszRemoteFile', 'IN LPCWSTR lpszNewFile', 'IN BOOL fFailIfExists', 'IN DWORD dwFlagsAndAttributes', 'IN DWORD dwFlags', 'IN DWORD_PTR dwContext']
BOOLAPI FtpPutFileA ['IN HINTERNET hConnect', 'IN LPCSTR lpszLocalFile', 'IN LPCSTR lpszNewRemoteFile', 'IN DWORD dwFlags', 'IN DWORD_PTR dwContext']
BOOLAPI FtpPutFileW ['IN HINTERNET hConnect', 'IN LPCWSTR lpszLocalFile', 'IN LPCWSTR lpszNewRemoteFile', 'IN DWORD dwFlags', 'IN DWORD_PTR dwContext']
BOOLAPI FtpGetFileEx ['IN HINTERNET hFtpSession', 'IN LPCSTR lpszRemoteFile', 'IN LPCWSTR lpszNewFile', 'IN BOOL fFailIfExists', 'IN DWORD dwFlagsAndAttributes', 'IN DWORD dwFlags', 'IN DWORD_PTR dwContext']
BOOLAPI FtpPutFileEx ['IN HINTERNET hFtpSession', 'IN LPCWSTR lpszLocalFile', 'IN LPCSTR lpszNewRemoteFile', 'IN DWORD dwFlags', 'IN DWORD_PTR dwContext']
BOOLAPI FtpDeleteFileA ['IN HINTERNET hConnect', 'IN LPCSTR lpszFileName']
BOOLAPI FtpDeleteFileW ['IN HINTERNET hConnect', 'IN LPCWSTR lpszFileName']
BOOLAPI FtpRenameFileA ['IN HINTERNET hConnect', 'IN LPCSTR lpszExisting', 'IN LPCSTR lpszNew']
BOOLAPI FtpRenameFileW ['IN HINTERNET hConnect', 'IN LPCWSTR lpszExisting', 'IN LPCWSTR lpszNew']
BOOLAPI FtpCreateDirectoryA ['IN HINTERNET hConnect', 'IN LPCSTR lpszDirectory']
BOOLAPI FtpCreateDirectoryW ['IN HINTERNET hConnect', 'IN LPCWSTR lpszDirectory']
BOOLAPI FtpRemoveDirectoryA ['IN HINTERNET hConnect', 'IN LPCSTR lpszDirectory']
BOOLAPI FtpRemoveDirectoryW ['IN HINTERNET hConnect', 'IN LPCWSTR lpszDirectory']
BOOLAPI FtpSetCurrentDirectoryA ['IN HINTERNET hConnect', 'IN LPCSTR lpszDirectory']
BOOLAPI FtpSetCurrentDirectoryW ['IN HINTERNET hConnect', 'IN LPCWSTR lpszDirectory']
BOOLAPI FtpGetCurrentDirectoryA ['IN HINTERNET hConnect', 'OUT LPSTR lpszCurrentDirectory', 'IN OUT LPDWORD lpdwCurrentDirectory']
BOOLAPI FtpGetCurrentDirectoryW ['IN HINTERNET hConnect', 'OUT LPWSTR lpszCurrentDirectory', 'IN OUT LPDWORD lpdwCurrentDirectory']
BOOLAPI FtpCommandA ['IN HINTERNET hConnect', 'IN BOOL fExpectResponse', 'IN DWORD dwFlags', 'IN LPCSTR lpszCommand', 'IN DWORD_PTR dwContext', 'OUT HINTERNET *phFtpCommand OPTIONAL']
BOOLAPI FtpCommandW ['IN HINTERNET hConnect', 'IN BOOL fExpectResponse', 'IN DWORD dwFlags', 'IN LPCWSTR lpszCommand', 'IN DWORD_PTR dwContext', 'OUT HINTERNET *phFtpCommand OPTIONAL']
BOOLAPI GopherCreateLocatorA ['IN LPCSTR lpszHost', 'IN INTERNET_PORT nServerPort', 'IN LPCSTR lpszDisplayString OPTIONAL', 'IN LPCSTR lpszSelectorString OPTIONAL', 'IN DWORD dwGopherType', 'OUT LPSTR lpszLocator OPTIONAL', 'IN OUT LPDWORD lpdwBufferLength']
BOOLAPI GopherCreateLocatorW ['IN LPCWSTR lpszHost', 'IN INTERNET_PORT nServerPort', 'IN LPCWSTR lpszDisplayString OPTIONAL', 'IN LPCWSTR lpszSelectorString OPTIONAL', 'IN DWORD dwGopherType', 'OUT LPWSTR lpszLocator OPTIONAL', 'IN OUT LPDWORD lpdwBufferLength']
BOOLAPI GopherGetLocatorTypeA ['IN LPCSTR lpszLocator', 'OUT LPDWORD lpdwGopherType']
BOOLAPI GopherGetLocatorTypeW ['IN LPCWSTR lpszLocator', 'OUT LPDWORD lpdwGopherType']
BOOLAPI GopherGetAttributeA ['IN HINTERNET hConnect', 'IN LPCSTR lpszLocator', 'IN LPCSTR lpszAttributeName OPTIONAL', 'OUT LPBYTE lpBuffer', 'IN DWORD dwBufferLength', 'OUT LPDWORD lpdwCharactersReturned', 'IN GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator OPTIONAL', 'IN DWORD_PTR dwContext']
BOOLAPI GopherGetAttributeW ['IN HINTERNET hConnect', 'IN LPCWSTR lpszLocator', 'IN LPCWSTR lpszAttributeName OPTIONAL', 'OUT LPBYTE lpBuffer', 'IN DWORD dwBufferLength', 'OUT LPDWORD lpdwCharactersReturned', 'IN GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator OPTIONAL', 'IN DWORD_PTR dwContext']
BOOLAPI HttpAddRequestHeadersA ['IN HINTERNET hRequest', 'IN LPCSTR lpszHeaders', 'IN DWORD dwHeadersLength', 'IN DWORD dwModifiers']
BOOLAPI HttpAddRequestHeadersW ['IN HINTERNET hRequest', 'IN LPCWSTR lpszHeaders', 'IN DWORD dwHeadersLength', 'IN DWORD dwModifiers']
BOOLAPI HttpQueryInfoW ['IN HINTERNET hRequest', 'IN DWORD dwInfoLevel', 'IN OUT LPVOID lpBuffer OPTIONAL', 'IN OUT LPDWORD lpdwBufferLength', 'IN OUT LPDWORD lpdwIndex OPTIONAL']
BOOLAPI InternetSetCookieA ['IN LPCSTR lpszUrl', 'IN LPCSTR lpszCookieName', 'IN LPCSTR lpszCookieData']
BOOLAPI InternetSetCookieW ['IN LPCWSTR lpszUrl', 'IN LPCWSTR lpszCookieName', 'IN LPCWSTR lpszCookieData']
BOOLAPI InternetGetCookieA ['IN LPCSTR lpszUrl', 'IN LPCSTR lpszCookieName', 'OUT LPSTR lpCookieData', 'IN OUT LPDWORD lpdwSize']
BOOLAPI InternetGetCookieW ['IN LPCWSTR lpszUrl', 'IN LPCWSTR lpszCookieName', 'OUT LPWSTR lpCookieData', 'IN OUT LPDWORD lpdwSize']
BOOLAPI InternetGetCookieExA ['IN LPCSTR pchURL', 'IN LPCSTR pchCookieName', 'IN LPSTR pchCookieData OPTIONAL', 'IN OUT LPDWORD pcchCookieData OPTIONAL', 'IN DWORD dwFlags', 'IN LPVOID lpReserved']
BOOLAPI InternetGetCookieExW ['IN LPCWSTR pchURL', 'IN LPCWSTR pchCookieName', 'IN LPWSTR pchCookieData OPTIONAL', 'IN OUT LPDWORD pcchCookieData OPTIONAL', 'IN DWORD dwFlags', 'IN LPVOID lpReserved']
BOOLAPI InternetCheckConnectionA ['IN LPCSTR lpszUrl', 'IN DWORD dwFlags', 'IN DWORD dwReserved']
BOOLAPI InternetCheckConnectionW ['IN LPCWSTR lpszUrl', 'IN DWORD dwFlags', 'IN DWORD dwReserved']
DWORD InternetAuthNotifyCallback ['DWORD_PTR dwContext', 'DWORD dwReturn', '// error code: success', 'resend', 'or cancel\nLPVOID lpReserved // reserved: will be set to null']
BOOLAPI CreateUrlCacheEntryA ['IN LPCSTR lpszUrlName', 'IN DWORD dwExpectedFileSize', 'IN LPCSTR lpszFileExtension', 'OUT LPSTR lpszFileName', 'IN DWORD dwReserved']
BOOLAPI CreateUrlCacheEntryW ['IN LPCWSTR lpszUrlName', 'IN DWORD dwExpectedFileSize', 'IN LPCWSTR lpszFileExtension', 'OUT LPWSTR lpszFileName', 'IN DWORD dwReserved']
BOOLAPI CommitUrlCacheEntryA ['IN LPCSTR lpszUrlName', 'IN LPCSTR lpszLocalFileName', 'IN FILETIME ExpireTime', 'IN FILETIME LastModifiedTime', 'IN DWORD CacheEntryType', 'IN LPBYTE lpHeaderInfo', 'IN DWORD dwHeaderSize', 'IN LPCSTR lpszFileExtension', 'IN LPCSTR lpszOriginalUrl']
BOOLAPI CommitUrlCacheEntryW ['IN LPCWSTR lpszUrlName', 'IN LPCWSTR lpszLocalFileName', 'IN FILETIME ExpireTime', 'IN FILETIME LastModifiedTime', 'IN DWORD CacheEntryType', 'IN LPWSTR lpHeaderInfo', 'IN DWORD dwHeaderSize', 'IN LPCWSTR lpszFileExtension', 'IN LPCWSTR lpszOriginalUrl']
BOOLAPI RetrieveUrlCacheEntryFileA ['IN LPCSTR lpszUrlName', 'OUT LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo', 'IN OUT LPDWORD lpdwCacheEntryInfoBufferSize', 'IN DWORD dwReserved']
BOOLAPI RetrieveUrlCacheEntryFileW ['IN LPCWSTR lpszUrlName', 'OUT LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo', 'IN OUT LPDWORD lpdwCacheEntryInfoBufferSize', 'IN DWORD dwReserved']
BOOLAPI UnlockUrlCacheEntryFileA ['IN LPCSTR lpszUrlName', 'IN DWORD dwReserved']
BOOLAPI UnlockUrlCacheEntryFileW ['IN LPCWSTR lpszUrlName', 'IN DWORD dwReserved']
BOOLAPI UnlockUrlCacheEntryFile ['IN LPCSTR lpszUrlName', 'IN DWORD dwReserved']
BOOLAPI UnlockUrlCacheEntryStream ['IN HANDLE hUrlCacheStream', 'IN DWORD Reserved']
BOOLAPI DeleteUrlCacheGroup ['IN GROUPID GroupId', 'IN DWORD dwFlags', 'IN LPVOID lpReserved']
BOOLAPI SetUrlCacheEntryInfoA ['IN LPCSTR lpszUrlName', 'IN LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo', 'IN DWORD dwFieldControl']
BOOLAPI SetUrlCacheEntryInfoW ['IN LPCWSTR lpszUrlName', 'IN LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo', 'IN DWORD dwFieldControl']
BOOLAPI DeleteUrlCacheGroup ['IN GROUPID GroupId', 'IN DWORD dwFlags', ' IN LPVOID lpReserved // must pass NULL']
BOOLAPI SetUrlCacheEntryGroupA ['IN LPCSTR lpszUrlName', 'IN DWORD dwFlags', 'IN GROUPID GroupId', 'IN LPBYTE pbGroupAttributes', ' IN DWORD cbGroupAttributes', ' IN LPVOID lpReserved // must pass NULL']
BOOLAPI SetUrlCacheEntryGroupW ['IN LPCWSTR lpszUrlName', 'IN DWORD dwFlags', 'IN GROUPID GroupId', 'IN LPBYTE pbGroupAttributes', ' IN DWORD cbGroupAttributes', ' IN LPVOID lpReserved // must pass NULL']
BOOLAPI SetUrlCacheEntryGroup ['IN LPCSTR lpszUrlName', 'IN DWORD dwFlags', 'IN GROUPID GroupId', 'IN LPBYTE pbGroupAttributes', ' IN DWORD cbGroupAttributes', ' IN LPVOID lpReserved // must pass NULL']
BOOLAPI FindNextUrlCacheEntryExW ['IN HANDLE hEnumHandle', 'OUT LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo', 'IN OUT LPDWORD lpdwFirstCacheEntryInfoBufferSize', 'OUT LPVOID lpReserved', ' IN OUT LPDWORD pcbReserved2', ' IN LPVOID lpReserved3 // must pass NULL']
BOOLAPI FindNextUrlCacheEntryW ['IN HANDLE hEnumHandle', 'OUT LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo', 'IN OUT LPDWORD lpdwNextCacheEntryInfoBufferSize']
BOOLAPI FindCloseUrlCache ['IN HANDLE hEnumHandle']
BOOLAPI DeleteUrlCacheEntryA ['IN LPCSTR lpszUrlName']
BOOLAPI DeleteUrlCacheEntryW ['IN LPCWSTR lpszUrlName']
BOOLAPI DeleteUrlCacheEntry ['IN LPCSTR lpszUrlName']
void DeleteMediaType ['AM_MEDIA_TYPE *pmt']
void CopyMediaType ['AM_MEDIA_TYPE *pmtTarget', 'const AM_MEDIA_TYPE *pmtSource']
void FreeMediaType ['AM_MEDIA_TYPE& mt']
HANDLE GetBusAccessHandle ['']
BOOL NTLMSetUserInfo ['IN LPTSTR pszUser', 'IN LPTSTR pszPassword']
BOOL NTLMEnumUser ['IN DWORD index', 'OUT LPTSTR pszUser', 'IN OUT LPDWORD pcchUser']
BOOL NTLMDeleteUser ['IN LPTSTR pszUser']
BOOL NTLMAddGroup ['IN WCHAR *groupName']
BOOL NTLMRemoveGroup ['IN WCHAR *groupName']
BOOL NTLMEnumGroups ['IN DWORD index', 'IN OUT WCHAR *groupName', 'IN OUT DWORD *dwSizeInChars']
BOOL NTLMAddUserToGroup ['IN WCHAR *groupName', 'IN WCHAR *userName']
BOOL NTLMRemoveUserFromGroup ['IN WCHAR *groupName', 'IN WCHAR *userName']
BOOL NTLMGetUserList ['IN WCHAR *groupName', 'IN OUT WCHAR *userList', 'IN OUT DWORD *pdwccLen']
BOOL NTLMGetGroupList ['IN WCHAR *userName', 'IN OUT WCHAR *groupList', 'IN OUT DWORD *pdwccLen']
TSPIAPI TSPI_phoneClose ['HDRVPHONE hdPhone']
TSPIAPI TSPI_phoneDevSpecific ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'LPVOID lpParams', 'DWORD dwSize']
TSPIAPI TSPI_phoneGetButtonInfo ['HDRVPHONE hdPhone', 'DWORD dwButtonLampID', 'LPPHONEBUTTONINFO lpButtonInfo']
TSPIAPI TSPI_phoneGetData ['HDRVPHONE hdPhone', 'DWORD dwDataID', 'LPVOID lpData', 'DWORD dwSize']
TSPIAPI TSPI_phoneGetDevCaps ['DWORD dwDeviceID', 'DWORD dwTSPIVersion', 'DWORD dwExtVersion', 'LPPHONECAPS lpPhoneCaps']
TSPIAPI TSPI_phoneGetDisplay ['HDRVPHONE hdPhone', 'LPVARSTRING lpDisplay']
TSPIAPI TSPI_phoneGetExtensionID ['DWORD dwDeviceID', 'DWORD dwTSPIVersion', 'LPPHONEEXTENSIONID lpExtensionID']
TSPIAPI TSPI_phoneGetGain ['HDRVPHONE hdPhone', 'DWORD dwHookSwitchDev', 'LPDWORD lpdwGain']
TSPIAPI TSPI_phoneGetHookSwitch ['HDRVPHONE hdPhone', 'LPDWORD lpdwHookSwitchDevs']
TSPIAPI TSPI_phoneGetIcon ['DWORD dwDeviceID', 'LPCWSTR lpszDeviceClass', 'LPHICON lphIcon']
TSPIAPI TSPI_phoneGetID ['HDRVPHONE hdPhone', 'LPVARSTRING lpDeviceID', 'LPCWSTR lpszDeviceClass']
TSPIAPI TSPI_phoneGetLamp ['HDRVPHONE hdPhone', 'DWORD dwButtonLampID', 'LPDWORD lpdwLampMode']
TSPIAPI TSPI_phoneGetRing ['HDRVPHONE hdPhone', 'LPDWORD lpdwRingMode', 'LPDWORD lpdwVolume']
TSPIAPI TSPI_phoneGetStatus ['HDRVPHONE hdPhone', 'LPPHONESTATUS lpPhoneStatus']
TSPIAPI TSPI_phoneGetVolume ['HDRVPHONE hdPhone', 'DWORD dwHookSwitchDev', 'LPDWORD lpdwVolume']
TSPIAPI TSPI_phoneNegotiateExtVersion ['DWORD dwDeviceID', 'DWORD dwTSPIVersion', 'DWORD dwLowVersion', 'DWORD dwHighVersion', 'LPDWORD lpdwExtVersion']
TSPIAPI TSPI_phoneNegotiateTSPIVersion ['DWORD dwDeviceID', 'DWORD dwLowVersion', 'DWORD dwHighVersion', 'LPDWORD lpdwTSPIVersion']
TSPIAPI TSPI_phoneOpen ['DWORD dwDeviceID', 'HTAPIPHONE htPhone', 'LPHDRVPHONE lphdPhone', 'DWORD dwTSPIVersion', 'PHONEEVENT lpfnEventProc']
TSPIAPI TSPI_phoneSelectExtVersion ['HDRVPHONE hdPhone', 'DWORD dwExtVersion']
TSPIAPI TSPI_phoneSetButtonInfo ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'DWORD dwButtonLampID', 'LPPHONEBUTTONINFO const lpButtonInfo']
TSPIAPI TSPI_phoneSetData ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'DWORD dwDataID', 'LPVOID const lpData', 'DWORD dwSize']
TSPIAPI TSPI_phoneSetDisplay ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'DWORD dwRow', 'DWORD dwColumn', 'LPCWSTR lpsDisplay', 'DWORD dwSize']
TSPIAPI TSPI_phoneSetGain ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'DWORD dwHookSwitchDev', 'DWORD dwGain']
TSPIAPI TSPI_phoneSetHookSwitch ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'DWORD dwHookSwitchDevs', 'DWORD dwHookSwitchMode']
TSPIAPI TSPI_phoneSetLamp ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'DWORD dwButtonLampID', 'DWORD dwLampMode']
TSPIAPI TSPI_phoneSetRing ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'DWORD dwRingMode', 'DWORD dwVolume']
TSPIAPI TSPI_phoneSetStatusMessages ['HDRVPHONE hdPhone', 'DWORD dwPhoneStates', 'DWORD dwButtonModes', 'DWORD dwButtonStates']
TSPIAPI TSPI_phoneSetVolume ['DRV_REQUESTID dwRequestID', 'HDRVPHONE hdPhone', 'DWORD dwHookSwitchDev', 'DWORD dwVolume']
BOOL GetExtensionVersion ['HSE_VERSION_INFO *pVer']
DWORD HttpExtensionProc ['EXTENSION_CONTROL_BLOCK *pECB']
BOOL TerminateExtension ['DWORD dwFlags']
void HttpdStopAndRestart ['']
BOOL IsFirewallEnabled ['USHORT Family']
DWORD FirewallEnable ['USHORT Family', 'BOOL bEnable', 'BOOL bPersist']
DWORD FirewallCreateRule ['FW_RULE* pRule', 'BOOL bPersist']
DWORD FirewallDeleteRule ['HRULE hRule', 'BOOL bPersist']
DWORD FirewallEnableRule ['HRULE hRule', 'BOOL bEnable', 'BOOL bPersist']
VOID FirewallRefresh ['']
DWORD FirewallSetInterface ['LPCWSTR pszInterfaceName', 'BOOL bFirewalled', 'BOOL bPersist']
BOOL IsInterfaceFirewalled ['LPCWSTR pszInterfaceName']
void FirewallLogInit ['']
void FirewallLogPacket ['const FW_LOG_ENTRY* pLogEntry']
void FirewallLogUninit ['']
LONG MwMapWindowRect ['HWND', 'HWND', 'RECT *']
void WSDFreeLinkedMemory ['void *pVoid']
void WSDAttachLinkedMemory ['void* pParent', 'void* pChild']
void WSDDetachLinkedMemory ['void* pVoid']
RPC_ENTRY RPC_FORWARD_FUNCTION ['IN UUID __RPC_FAR * InterfaceId', 'IN RPC_VERSION __RPC_FAR * InterfaceVersion', 'IN UUID __RPC_FAR * ObjectId', 'IN unsigned char __RPC_FAR * Rpcpro', 'IN void __RPC_FAR * __RPC_FAR * ppDestEndpoint']
RPC_ENTRY I_RpcGetBuffer ['IN OUT RPC_MESSAGE __RPC_FAR * Message']
RPC_ENTRY I_RpcSendReceive ['IN OUT RPC_MESSAGE __RPC_FAR * Message']
RPC_ENTRY I_RpcFreeBuffer ['IN OUT RPC_MESSAGE __RPC_FAR * Message']
RPC_ENTRY I_RpcRequestMutex ['IN OUT I_RPC_MUTEX * Mutex']
RPC_ENTRY I_RpcClearMutex ['IN I_RPC_MUTEX Mutex']
RPC_ENTRY I_RpcDeleteMutex ['IN I_RPC_MUTEX Mutex']
RPC_ENTRY I_RpcAllocate ['IN unsigned int Size']
RPC_ENTRY I_RpcFree ['IN void __RPC_FAR * Object']
RPC_ENTRY I_RpcPauseExecution ['IN unsigned long Milliseconds']
RPC_ENTRY I_RpcMonitorAssociation ['IN RPC_BINDING_HANDLE Handle', 'IN PRPC_RUNDOWN RundownRoutine', 'IN void * Context']
RPC_ENTRY I_RpcStopMonitorAssociation ['IN RPC_BINDING_HANDLE Handle']
RPC_ENTRY I_RpcGetCurrentCallHandle ['void']
RPC_ENTRY I_RpcGetAssociationContext ['IN RPC_BINDING_HANDLE BindingHandle', 'OUT void __RPC_FAR * __RPC_FAR * AssociationContext']
RPC_ENTRY I_RpcGetServerContextList ['IN RPC_BINDING_HANDLE BindingHandle']
RPC_ENTRY I_RpcSetServerContextList ['IN RPC_BINDING_HANDLE BindingHandle', 'OUT void * ServerContextList']
RPC_ENTRY I_RpcNsBindingSetEntryNameW ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long EntryNameSyntax', 'IN unsigned short __RPC_FAR * EntryName']
RPC_ENTRY I_RpcNsBindingSetEntryNameA ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long EntryNameSyntax', 'IN unsigned char __RPC_FAR * EntryName']
RPC_ENTRY I_RpcNsBindingSetEntryName ['IN RPC_BINDING_HANDLE Binding', 'IN unsigned long EntryNameSyntax', 'IN unsigned char __RPC_FAR * EntryName']
RPC_ENTRY I_RpcBindingInqDynamicEndpointW ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned short __RPC_FAR * __RPC_FAR * DynamicEndpoint']
RPC_ENTRY I_RpcBindingInqDynamicEndpointA ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * DynamicEndpoint']
RPC_ENTRY I_RpcBindingInqDynamicEndpoint ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned char __RPC_FAR * __RPC_FAR * DynamicEndpoint']
RPC_ENTRY I_RpcBindingInqTransportType ['IN RPC_BINDING_HANDLE Binding', 'OUT unsigned int __RPC_FAR * Type']
RPC_ENTRY I_RpcIfInqTransferSyntaxes ['IN RPC_IF_HANDLE RpcIfHandle', 'OUT RPC_TRANSFER_SYNTAX __RPC_FAR * TransferSyntaxes', 'IN unsigned int TransferSyntaxSize', 'OUT unsigned int __RPC_FAR * TransferSyntaxCount']
RPC_ENTRY I_UuidCreate ['OUT UUID __RPC_FAR * Uuid']
RPC_ENTRY I_RpcBindingCopy ['IN RPC_BINDING_HANDLE SourceBinding', 'OUT RPC_BINDING_HANDLE __RPC_FAR * DestinationBinding']
RPC_ENTRY I_RpcBindingIsClientLocal ['IN RPC_BINDING_HANDLE BindingHandle OPTIONAL', 'OUT unsigned int __RPC_FAR * ClientLocalFlag']
RPC_ENTRY I_RpcSsDontSerializeContext ['void']
RPC_ENTRY I_RpcLaunchDatagramReceiveThread ['void __RPC_FAR * pAddress']
RPC_ENTRY I_RpcServerRegisterForwardFunction ['IN RPC_FORWARD_FUNCTION __RPC_FAR * pForwardFunction']
RPC_ENTRY I_RpcConnectionInqSockBuffSize ['OUT unsigned long __RPC_FAR * RecvBuffSize', 'OUT unsigned long __RPC_FAR * SendBuffSize']
RPC_ENTRY I_RpcConnectionSetSockBuffSize ['IN unsigned long RecvBuffSize', 'IN unsigned long SendBuffSize']
RPC_ENTRY I_RpcSetThreadParams ['IN int fClientFree', 'IN OPTIONAL void *Context', 'IN OPTIONAL void * hWndClient']
RPC_ENTRY I_RpcServerUnregisterEndpointA ['IN unsigned char * Protseq', 'IN unsigned char * Endpoint']
RPC_ENTRY I_RpcServerUnregisterEndpointW ['IN unsigned short * Protseq', 'IN unsigned short * Endpoint']
DWORD DDKReg_GetWindowInfo ['HKEY hk', 'PDDKWINDOWINFO pwi']
DWORD DDKReg_GetIsrInfo ['HKEY hk', 'PDDKISRINFO pii']
DWORD DDKReg_GetPciInfo ['HKEY hk', 'PDDKPCIINFO ppi']
BOOL IsValidCodePage ['IN UINT CodePage']
UINT GetACP ['void']
UINT GetOEMCP ['void']
BOOL GetCPInfo ['IN UINT CodePage', 'OUT LPCPINFO lpCPInfo']
BOOL IsDBCSLeadByte ['IN BYTE TestChar']
BOOL IsDBCSLeadByteEx ['IN UINT CodePage', 'IN BYTE TestChar']
int MultiByteToWideChar ['IN UINT CodePage', 'IN DWORD dwFlags', 'IN LPCSTR lpMultiByteStr', 'IN int cbMultiByte', 'OUT LPWSTR lpWideCharStr', 'IN int cchWideChar']
int WideCharToMultiByte ['IN UINT CodePage', 'IN DWORD dwFlags', 'IN LPCWSTR lpWideCharStr', 'IN int cchWideChar', 'OUT LPSTR lpMultiByteStr', 'IN int cbMultiByte', 'IN LPCSTR lpDefaultChar', 'OUT LPBOOL lpUsedDefaultChar']
int CompareStringA ['IN LCID Locale', 'IN DWORD dwCmpFlags', 'IN LPCSTR lpString1', 'IN int cchCount1', 'IN LPCSTR lpString2', 'IN int cchCount2']
int CompareStringW ['IN LCID Locale', 'IN DWORD dwCmpFlags', 'IN LPCWSTR lpString1', 'IN int cchCount1', 'IN LPCWSTR lpString2', 'IN int cchCount2']
int LCMapStringA ['IN LCID Locale', 'IN DWORD dwMapFlags', 'IN LPCSTR lpSrcStr', 'IN int cchSrc', 'OUT LPSTR lpDestStr', 'IN int cchDest']
int LCMapStringW ['IN LCID Locale', 'IN DWORD dwMapFlags', 'IN LPCWSTR lpSrcStr', 'IN int cchSrc', 'OUT LPWSTR lpDestStr', 'IN int cchDest']
BOOL SetLocaleInfoA ['IN LCID Locale', 'IN LCTYPE LCType', 'IN LPCSTR lpLCData']
BOOL SetLocaleInfoW ['IN LCID Locale', 'IN LCTYPE LCType', 'IN LPCWSTR lpLCData']
int GetTimeFormatA ['IN LCID Locale', 'IN DWORD dwFlags', 'IN CONST SYSTEMTIME *lpTime', 'IN LPCSTR lpFormat', 'OUT LPSTR lpTimeStr', 'IN int cchTime']
int GetDateFormatA ['IN LCID Locale', 'IN DWORD dwFlags', 'IN CONST SYSTEMTIME *lpDate', 'IN LPCSTR lpFormat', 'OUT LPSTR lpDateStr', 'IN int cchDate']
int GetNumberFormatA ['IN LCID Locale', 'IN DWORD dwFlags', 'IN LPCSTR lpValue', 'IN CONST NUMBERFMTA *lpFormat', 'OUT LPSTR lpNumberStr', 'IN int cchNumber']
int GetCurrencyFormatA ['IN LCID Locale', 'IN DWORD dwFlags', 'IN LPCSTR lpValue', 'IN CONST CURRENCYFMTA *lpFormat', 'OUT LPSTR lpCurrencyStr', 'IN int cchCurrency']
int GetCurrencyFormatW ['IN LCID Locale', 'IN DWORD dwFlags', 'IN LPCWSTR lpValue', 'IN CONST CURRENCYFMTW *lpFormat', 'OUT LPWSTR lpCurrencyStr', 'IN int cchCurrency']
BOOL EnumCalendarInfoA ['IN CALINFO_ENUMPROCA lpCalInfoEnumProc', 'IN LCID Locale', 'IN CALID Calendar', 'IN CALTYPE CalType']
BOOL EnumCalendarInfoW ['IN CALINFO_ENUMPROCW lpCalInfoEnumProc', 'IN LCID Locale', 'IN CALID Calendar', 'IN CALTYPE CalType']
BOOL EnumTimeFormatsA ['IN TIMEFMT_ENUMPROCA lpTimeFmtEnumProc', 'IN LCID Locale', 'IN DWORD dwFlags']
BOOL EnumTimeFormatsW ['IN TIMEFMT_ENUMPROCW lpTimeFmtEnumProc', 'IN LCID Locale', 'IN DWORD dwFlags']
BOOL EnumDateFormatsA ['IN DATEFMT_ENUMPROCA lpDateFmtEnumProc', 'IN LCID Locale', 'IN DWORD dwFlags']
BOOL EnumDateFormatsW ['IN DATEFMT_ENUMPROCW lpDateFmtEnumProc', 'IN LCID Locale', 'IN DWORD dwFlags']
BOOL IsValidLocale ['IN LCID Locale', 'IN DWORD dwFlags']
LCID ConvertDefaultLocale ['IN OUT LCID Locale']
LANGID GetSystemDefaultLangID ['void']
LANGID GetUserDefaultLangID ['void']
BOOL SetUserDefaultUILanguage ['LANGID langid']
LCID GetSystemDefaultLCID ['void']
LCID GetUserDefaultLCID ['void']
BOOL GetStringTypeExA ['IN LCID Locale', 'IN DWORD dwInfoType', 'IN LPCSTR lpSrcStr', 'IN int cchSrc', 'OUT LPWORD lpCharType']
BOOL GetStringTypeExW ['IN LCID Locale', 'IN DWORD dwInfoType', 'IN LPCWSTR lpSrcStr', 'IN int cchSrc', 'OUT LPWORD lpCharType']
BOOL GetStringTypeA ['IN LCID Locale', 'IN DWORD dwInfoType', 'IN LPCSTR lpSrcStr', 'IN int cchSrc', 'OUT LPWORD lpCharType']
BOOL GetStringTypeW ['IN DWORD dwInfoType', 'IN LPCWSTR lpSrcStr', 'IN int cchSrc', 'OUT LPWORD lpCharType']
int FoldStringA ['IN DWORD dwMapFlags', 'IN LPCSTR lpSrcStr', 'IN int cchSrc', 'OUT LPSTR lpDestStr', 'IN int cchDest']
int FoldStringW ['IN DWORD dwMapFlags', 'IN LPCWSTR lpSrcStr', 'IN int cchSrc', 'OUT LPWSTR lpDestStr', 'IN int cchDest']
BOOL EnumSystemLocalesA ['IN LOCALE_ENUMPROCA lpLocaleEnumProc', 'IN DWORD dwFlags']
BOOL EnumSystemLocalesW ['IN LOCALE_ENUMPROCW lpLocaleEnumProc', 'IN DWORD dwFlags']
BOOL EnumSystemCodePagesA ['IN CODEPAGE_ENUMPROCA lpCodePageEnumProc', 'IN DWORD dwFlags']
BOOL EnumSystemCodePagesW ['IN CODEPAGE_ENUMPROCW lpCodePageEnumProc', 'IN DWORD dwFlags']
BOOL SetSystemDefaultLCID ['LCID Locale']
BOOL SetOEMCP ['UINT oemcp']
BOOL SetACP ['UINT acp']
BOOL SetUserDefaultLCID ['LCID Locale']
BOOL GetNlsTables ['LPVOID *lplpTable', 'DWORD dwFlags', 'LPDWORD lpOffset', 'LPDWORD lpSize']
LANGID GetSystemDefaultUILanguage ['VOID']
LANGID GetUserDefaultUILanguage ['VOID']
BOOL EnumUILanguagesA ['IN UILANGUAGE_ENUMPROCA lpUILanguageEnumProc', 'IN DWORD dwFlags']
BOOL EnumUILanguagesW ['IN UILANGUAGE_ENUMPROCW lpUILanguageEnumProc', 'IN DWORD dwFlags']
DNS_STATUS DnsQueryConfig ['IN DNS_CONFIG_TYPE Config', 'IN DWORD Flag', 'IN PWSTR pwsAdapterName', 'IN PVOID pReserved', 'OUT PVOID pBuffer', 'IN OUT PDWORD pBufferLength']
PDNS_RECORD DnsRecordCopyEx ['IN PDNS_RECORD pRecord', 'IN DNS_CHARSET CharSetIn', 'IN DNS_CHARSET CharSetOut']
PDNS_RECORD DnsRecordSetCopyEx ['IN PDNS_RECORD pRecordSet', 'IN DNS_CHARSET CharSetIn', 'IN DNS_CHARSET CharSetOut']
BOOL DnsRecordCompare ['IN PDNS_RECORD pRecord1', 'IN PDNS_RECORD pRecord2']
BOOL DnsRecordSetCompare ['IN OUT PDNS_RECORD pRR1', 'IN OUT PDNS_RECORD pRR2', 'OUT PDNS_RECORD * ppDiff1', 'OUT PDNS_RECORD * ppDiff2']
PDNS_RECORD DnsRecordSetDetach ['IN OUT PDNS_RECORD pRecordList']
VOID DnsRecordListFree ['IN OUT PDNS_RECORD pRecordList', 'IN DNS_FREE_TYPE FreeType']
VOID DnsFree ['IN OUT PVOID pData', 'IN DNS_FREE_TYPE FreeType']
DNS_STATUS DnsQuery_A ['IN PCSTR pszName', 'IN WORD wType', 'IN DWORD Options', 'IN PIP4_ARRAY aipServers OPTIONAL', 'IN OUT PDNS_RECORD * ppQueryResults OPTIONAL', 'IN OUT PVOID * pReserved OPTIONAL']
DNS_STATUS DnsQuery_UTF8 ['IN PCSTR pszName', 'IN WORD wType', 'IN DWORD Options', 'IN PIP4_ARRAY aipServers OPTIONAL', 'IN OUT PDNS_RECORD * ppQueryResults OPTIONAL', 'IN OUT PVOID * pReserved OPTIONAL']
DNS_STATUS DnsQuery_W ['IN PCWSTR pszName', 'IN WORD wType', 'IN DWORD Options', 'IN PIP4_ARRAY aipServers OPTIONAL', 'IN OUT PDNS_RECORD * ppQueryResults OPTIONAL', 'IN OUT PVOID * pReserved OPTIONAL']
DNS_STATUS DnsAcquireContextHandle_W ['IN DWORD CredentialFlags', 'IN PVOID pCredentials', 'OPTIONAL //IN PSEC_WINNT_AUTH_IDENTITY_W pCredentials', 'OUT PHANDLE pContextHandle']
DNS_STATUS DnsAcquireContextHandle_A ['IN DWORD CredentialFlags', 'IN PVOID pCredentials', 'OPTIONAL //IN PSEC_WINNT_AUTH_IDENTITY_A pCredentials', 'OUT PHANDLE pContextHandle']
VOID DnsReleaseContextHandle ['IN HANDLE hContext']
DNS_STATUS DnsModifyRecordsInSet_W ['IN PDNS_RECORD pAddRecords', 'IN PDNS_RECORD pDeleteRecords', 'IN DWORD Options', 'IN HANDLE hContext', 'OPTIONAL IN PIP4_ARRAY pServerList', 'OPTIONAL IN PVOID pReserved']
DNS_STATUS DnsModifyRecordsInSet_A ['IN PDNS_RECORD pAddRecords', 'IN PDNS_RECORD pDeleteRecords', 'IN DWORD Options', 'IN HANDLE hContext', 'OPTIONAL IN PIP4_ARRAY pServerList', 'OPTIONAL IN PVOID pReserved']
DNS_STATUS DnsModifyRecordsInSet_UTF8 ['IN PDNS_RECORD pAddRecords', 'IN PDNS_RECORD pDeleteRecords', 'IN DWORD Options', 'IN HANDLE hContext', 'OPTIONAL IN PIP4_ARRAY pServerList', 'OPTIONAL IN PVOID pReserved']
DNS_STATUS DnsReplaceRecordSetW ['IN PDNS_RECORD pNewSet', 'IN DWORD Options', 'IN HANDLE hContext', 'OPTIONAL IN PIP4_ARRAY pServerList', 'OPTIONAL IN PVOID pReserved']
DNS_STATUS DnsReplaceRecordSetA ['IN PDNS_RECORD pNewSet', 'IN DWORD Options', 'IN HANDLE hContext', 'OPTIONAL IN PIP4_ARRAY pServerList', 'OPTIONAL IN PVOID pReserved']
DNS_STATUS DnsReplaceRecordSetUTF8 ['IN PDNS_RECORD pNewSet', 'IN DWORD Options', 'IN HANDLE hContext', 'OPTIONAL IN PIP4_ARRAY pServerList', 'OPTIONAL IN PVOID pReserved']
DNS_STATUS DnsValidateName_UTF8 ['IN LPCSTR pszName', 'IN DNS_NAME_FORMAT Format']
DNS_STATUS DnsValidateName_W ['IN LPCWSTR pwszName', 'IN DNS_NAME_FORMAT Format']
DNS_STATUS DnsValidateName_A ['IN LPCSTR pszName', 'IN DNS_NAME_FORMAT Format']
BOOL DnsNameCompare_A ['IN LPSTR pName1', 'IN LPSTR pName2']
BOOL DnsNameCompare_W ['IN LPWSTR pName1', 'IN LPWSTR pName2']
BOOL DnsWriteQuestionToBuffer_W ['IN OUT PDNS_MESSAGE_BUFFER pDnsBuffer', 'IN OUT LPDWORD pdwBufferSize', 'IN LPWSTR pszName', 'IN WORD wType', 'IN WORD Xid', 'IN BOOL fRecursionDesired']
BOOL DnsWriteQuestionToBuffer_UTF8 ['IN OUT PDNS_MESSAGE_BUFFER pDnsBuffer', 'IN OUT LPDWORD pdwBufferSize', 'IN LPSTR pszName', 'IN WORD wType', 'IN WORD Xid', 'IN BOOL fRecursionDesired']
DNS_STATUS DnsExtractRecordsFromMessage_W ['IN PDNS_MESSAGE_BUFFER pDnsBuffer', 'IN WORD wMessageLength', 'OUT PDNS_RECORD * ppRecord']
DNS_STATUS DnsExtractRecordsFromMessage_UTF8 ['IN PDNS_MESSAGE_BUFFER pDnsBuffer', 'IN WORD wMessageLength', 'OUT PDNS_RECORD * ppRecord']
WINOLEAUTAPI SafeArrayAllocDescriptor ['UINT cDims', 'SAFEARRAY ** ppsaOut']
WINOLEAUTAPI SafeArrayAllocData ['SAFEARRAY * psa']
WINOLEAUTAPI SafeArrayCopyData ['SAFEARRAY *psaSource', 'SAFEARRAY *psaTarget']
WINOLEAUTAPI SafeArrayDestroyDescriptor ['SAFEARRAY * psa']
WINOLEAUTAPI SafeArrayDestroyData ['SAFEARRAY * psa']
WINOLEAUTAPI SafeArrayDestroy ['SAFEARRAY * psa']
WINOLEAUTAPI SafeArrayRedim ['SAFEARRAY * psa', 'SAFEARRAYBOUND * psaboundNew']
WINOLEAUTAPI SafeArrayGetUBound ['SAFEARRAY * psa', 'UINT nDim', 'LONG * plUbound']
WINOLEAUTAPI SafeArrayGetLBound ['SAFEARRAY * psa', 'UINT nDim', 'LONG * plLbound']
WINOLEAUTAPI SafeArrayLock ['SAFEARRAY * psa']
WINOLEAUTAPI SafeArrayUnlock ['SAFEARRAY * psa']
WINOLEAUTAPI SafeArrayAccessData ['SAFEARRAY * psa', 'void HUGEP** ppvData']
WINOLEAUTAPI SafeArrayUnaccessData ['SAFEARRAY * psa']
WINOLEAUTAPI SafeArrayGetElement ['SAFEARRAY * psa', 'LONG * rgIndices', 'void * pv']
WINOLEAUTAPI SafeArrayPutElement ['SAFEARRAY * psa', 'LONG * rgIndices', 'void * pv']
WINOLEAUTAPI SafeArrayCopy ['SAFEARRAY * psa', 'SAFEARRAY ** ppsaOut']
WINOLEAUTAPI SafeArrayPtrOfIndex ['SAFEARRAY * psa', 'LONG * rgIndices', 'void ** ppvData']
WINOLEAUTAPI VariantClear ['VARIANTARG * pvarg']
WINOLEAUTAPI VariantCopy ['VARIANTARG * pvargDest', 'VARIANTARG * pvargSrc']
WINOLEAUTAPI VariantCopyInd ['VARIANT * pvarDest', 'VARIANTARG * pvargSrc']
WINOLEAUTAPI VariantChangeType ['VARIANTARG * pvargDest', 'VARIANTARG * pvarSrc', 'USHORT wFlags', 'VARTYPE vt']
WINOLEAUTAPI VariantChangeTypeEx ['VARIANTARG * pvargDest', 'VARIANTARG * pvarSrc', 'LCID lcid', 'USHORT wFlags', 'VARTYPE vt']
WINOLEAUTAPI VectorFromBstr ['BSTR bstr', 'SAFEARRAY ** ppsa']
WINOLEAUTAPI BstrFromVector ['SAFEARRAY *psa', 'BSTR *pbstr']
WINOLEAUTAPI VarUI1FromI2 ['SHORT sIn', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromI4 ['LONG lIn', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromR4 ['FLOAT fltIn', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromR8 ['DOUBLE dblIn', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromCy ['CY cyIn', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromDate ['DATE dateIn', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromStr ['OLECHAR * strIn', 'LCID lcid', 'ULONG dwFlags', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromDisp ['IDispatch * pdispIn', 'LCID lcid', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromBool ['VARIANT_BOOL boolIn', 'BYTE * pbOut']
WINOLEAUTAPI VarUI1FromI1 ['CHAR cIn', 'BYTE *pbOut']
WINOLEAUTAPI VarUI1FromUI2 ['USHORT uiIn', 'BYTE *pbOut']
WINOLEAUTAPI VarUI1FromUI4 ['ULONG ulIn', 'BYTE *pbOut']
WINOLEAUTAPI VarUI1FromDec ['DECIMAL *pdecIn', 'BYTE *pbOut']
WINOLEAUTAPI VarI2FromUI1 ['BYTE bIn', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromI4 ['LONG lIn', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromR4 ['FLOAT fltIn', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromR8 ['DOUBLE dblIn', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromCy ['CY cyIn', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromDate ['DATE dateIn', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromStr ['OLECHAR * strIn', 'LCID lcid', 'ULONG dwFlags', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromDisp ['IDispatch * pdispIn', 'LCID lcid', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromBool ['VARIANT_BOOL boolIn', 'SHORT * psOut']
WINOLEAUTAPI VarI2FromI1 ['CHAR cIn', 'SHORT *psOut']
WINOLEAUTAPI VarI2FromUI2 ['USHORT uiIn', 'SHORT *psOut']
WINOLEAUTAPI VarI2FromUI4 ['ULONG ulIn', 'SHORT *psOut']
WINOLEAUTAPI VarI2FromDec ['DECIMAL *pdecIn', 'SHORT *psOut']
WINOLEAUTAPI VarI4FromUI1 ['BYTE bIn', 'LONG * plOut']
WINOLEAUTAPI VarI4FromI2 ['SHORT sIn', 'LONG * plOut']
WINOLEAUTAPI VarI4FromR4 ['FLOAT fltIn', 'LONG * plOut']
WINOLEAUTAPI VarI4FromR8 ['DOUBLE dblIn', 'LONG * plOut']
WINOLEAUTAPI VarI4FromCy ['CY cyIn', 'LONG * plOut']
WINOLEAUTAPI VarI4FromDate ['DATE dateIn', 'LONG * plOut']
WINOLEAUTAPI VarI4FromStr ['OLECHAR * strIn', 'LCID lcid', 'ULONG dwFlags', 'LONG * plOut']
WINOLEAUTAPI VarI4FromDisp ['IDispatch * pdispIn', 'LCID lcid', 'LONG * plOut']
WINOLEAUTAPI VarI4FromBool ['VARIANT_BOOL boolIn', 'LONG * plOut']
WINOLEAUTAPI VarI4FromI1 ['CHAR cIn', 'LONG *plOut']
WINOLEAUTAPI VarI4FromUI2 ['USHORT uiIn', 'LONG *plOut']
WINOLEAUTAPI VarI4FromUI4 ['ULONG ulIn', 'LONG *plOut']
WINOLEAUTAPI VarI4FromDec ['DECIMAL *pdecIn', 'LONG *plOut']
WINOLEAUTAPI VarI4FromInt ['INT intIn', 'LONG *plOut']
WINOLEAUTAPI VarR4FromUI1 ['BYTE bIn', 'FLOAT * pfltOut']
WINOLEAUTAPI VarR4FromI2 ['SHORT sIn', 'FLOAT * pfltOut']
WINOLEAUTAPI VarR4FromI4 ['LONG lIn', 'FLOAT * pfltOut']
WINOLEAUTAPI VarR4FromR8 ['DOUBLE dblIn', 'FLOAT * pfltOut']
WINOLEAUTAPI VarR4FromCy ['CY cyIn', 'FLOAT * pfltOut']
WINOLEAUTAPI VarR4FromDate ['DATE dateIn', 'FLOAT * pfltOut']
WINOLEAUTAPI VarR4FromStr ['OLECHAR * strIn', 'LCID lcid', 'ULONG dwFlags', 'FLOAT *pfltOut']
WINOLEAUTAPI VarR4FromDisp ['IDispatch * pdispIn', 'LCID lcid', 'FLOAT * pfltOut']
WINOLEAUTAPI VarR4FromBool ['VARIANT_BOOL boolIn', 'FLOAT * pfltOut']
WINOLEAUTAPI VarR4FromI1 ['CHAR cIn', 'FLOAT *pfltOut']
WINOLEAUTAPI VarR4FromUI2 ['USHORT uiIn', 'FLOAT *pfltOut']
WINOLEAUTAPI VarR4FromUI4 ['ULONG ulIn', 'FLOAT *pfltOut']
WINOLEAUTAPI VarR4FromDec ['DECIMAL *pdecIn', 'FLOAT *pfltOut']
WINOLEAUTAPI VarR8FromUI1 ['BYTE bIn', 'DOUBLE * pdblOut']
WINOLEAUTAPI VarR8FromI2 ['SHORT sIn', 'DOUBLE * pdblOut']
WINOLEAUTAPI VarR8FromI4 ['LONG lIn', 'DOUBLE * pdblOut']
WINOLEAUTAPI VarR8FromR4 ['FLOAT fltIn', 'DOUBLE * pdblOut']
WINOLEAUTAPI VarR8FromCy ['CY cyIn', 'DOUBLE * pdblOut']
WINOLEAUTAPI VarR8FromDate ['DATE dateIn', 'DOUBLE * pdblOut']
WINOLEAUTAPI VarR8FromStr ['OLECHAR *strIn', 'LCID lcid', 'ULONG dwFlags', 'DOUBLE *pdblOut']
WINOLEAUTAPI VarR8FromDisp ['IDispatch * pdispIn', 'LCID lcid', 'DOUBLE * pdblOut']
WINOLEAUTAPI VarR8FromBool ['VARIANT_BOOL boolIn', 'DOUBLE * pdblOut']
WINOLEAUTAPI VarR8FromI1 ['CHAR cIn', 'DOUBLE *pdblOut']
WINOLEAUTAPI VarR8FromUI2 ['USHORT uiIn', 'DOUBLE *pdblOut']
WINOLEAUTAPI VarR8FromUI4 ['ULONG ulIn', 'DOUBLE *pdblOut']
WINOLEAUTAPI VarR8FromDec ['DECIMAL *pdecIn', 'DOUBLE *pdblOut']
WINOLEAUTAPI VarDateFromUI1 ['BYTE bIn', 'DATE * pdateOut']
WINOLEAUTAPI VarDateFromI2 ['SHORT sIn', 'DATE * pdateOut']
WINOLEAUTAPI VarDateFromI4 ['LONG lIn', 'DATE * pdateOut']
WINOLEAUTAPI VarDateFromR4 ['FLOAT fltIn', 'DATE * pdateOut']
WINOLEAUTAPI VarDateFromR8 ['DOUBLE dblIn', 'DATE * pdateOut']
WINOLEAUTAPI VarDateFromCy ['CY cyIn', 'DATE * pdateOut']
WINOLEAUTAPI VarDateFromStr ['OLECHAR *strIn', 'LCID lcid', 'ULONG dwFlags', 'DATE *pdateOut']
WINOLEAUTAPI VarDateFromDisp ['IDispatch * pdispIn', 'LCID lcid', 'DATE * pdateOut']
WINOLEAUTAPI VarDateFromBool ['VARIANT_BOOL boolIn', 'DATE * pdateOut']
WINOLEAUTAPI VarDateFromI1 ['CHAR cIn', 'DATE *pdateOut']
WINOLEAUTAPI VarDateFromUI2 ['USHORT uiIn', 'DATE *pdateOut']
WINOLEAUTAPI VarDateFromUI4 ['ULONG ulIn', 'DATE *pdateOut']
WINOLEAUTAPI VarDateFromDec ['DECIMAL *pdecIn', 'DATE *pdateOut']
WINOLEAUTAPI VarCyFromUI1 ['BYTE bIn', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromI2 ['SHORT sIn', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromI4 ['LONG lIn', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromR4 ['FLOAT fltIn', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromR8 ['DOUBLE dblIn', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromDate ['DATE dateIn', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromStr ['OLECHAR * strIn', 'LCID lcid', 'ULONG dwFlags', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromDisp ['IDispatch * pdispIn', 'LCID lcid', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromBool ['VARIANT_BOOL boolIn', 'CY * pcyOut']
WINOLEAUTAPI VarCyFromI1 ['CHAR cIn', 'CY *pcyOut']
WINOLEAUTAPI VarCyFromUI2 ['USHORT uiIn', 'CY *pcyOut']
WINOLEAUTAPI VarCyFromUI4 ['ULONG ulIn', 'CY *pcyOut']
WINOLEAUTAPI VarCyFromDec ['DECIMAL *pdecIn', 'CY *pcyOut']
WINOLEAUTAPI VarBstrFromUI1 ['BYTE bVal', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromI2 ['SHORT iVal', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromI4 ['LONG lIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromR4 ['FLOAT fltIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromR8 ['DOUBLE dblIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromCy ['CY cyIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromDate ['DATE dateIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromDisp ['IDispatch * pdispIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromBool ['VARIANT_BOOL boolIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR * pbstrOut']
WINOLEAUTAPI VarBstrFromI1 ['CHAR cIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR *pbstrOut']
WINOLEAUTAPI VarBstrFromUI2 ['USHORT uiIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR *pbstrOut']
WINOLEAUTAPI VarBstrFromUI4 ['ULONG ulIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR *pbstrOut']
WINOLEAUTAPI VarBstrFromDec ['DECIMAL *pdecIn', 'LCID lcid', 'ULONG dwFlags', 'BSTR *pbstrOut']
WINOLEAUTAPI VarBoolFromUI1 ['BYTE bIn', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromI2 ['SHORT sIn', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromI4 ['LONG lIn', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromR4 ['FLOAT fltIn', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromR8 ['DOUBLE dblIn', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromDate ['DATE dateIn', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromCy ['CY cyIn', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromStr ['OLECHAR * strIn', 'LCID lcid', 'ULONG dwFlags', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromDisp ['IDispatch * pdispIn', 'LCID lcid', 'VARIANT_BOOL * pboolOut']
WINOLEAUTAPI VarBoolFromI1 ['CHAR cIn', 'VARIANT_BOOL *pboolOut']
WINOLEAUTAPI VarBoolFromUI2 ['USHORT uiIn', 'VARIANT_BOOL *pboolOut']
WINOLEAUTAPI VarBoolFromUI4 ['ULONG ulIn', 'VARIANT_BOOL *pboolOut']
WINOLEAUTAPI VarBoolFromDec ['DECIMAL *pdecIn', 'VARIANT_BOOL *pboolOut']
WINOLEAUTAPI VarI1FromUI1 ['BYTE bIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromI2 ['SHORT uiIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromI4 ['LONG lIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromR4 ['FLOAT fltIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromR8 ['DOUBLE dblIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromDate ['DATE dateIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromCy ['CY cyIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromStr ['OLECHAR *strIn', 'LCID lcid', 'ULONG dwFlags', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromDisp ['IDispatch *pdispIn', 'LCID lcid', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromBool ['VARIANT_BOOL boolIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromUI2 ['USHORT uiIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromUI4 ['ULONG ulIn', 'CHAR *pcOut']
WINOLEAUTAPI VarI1FromDec ['DECIMAL *pdecIn', 'CHAR *pcOut']
WINOLEAUTAPI VarUI2FromUI1 ['BYTE bIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromI2 ['SHORT uiIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromI4 ['LONG lIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromR4 ['FLOAT fltIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromR8 ['DOUBLE dblIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromDate ['DATE dateIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromCy ['CY cyIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromStr ['OLECHAR *strIn', 'LCID lcid', 'ULONG dwFlags', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromDisp ['IDispatch *pdispIn', 'LCID lcid', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromBool ['VARIANT_BOOL boolIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromI1 ['CHAR cIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromUI4 ['ULONG ulIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI2FromDec ['DECIMAL *pdecIn', 'USHORT *puiOut']
WINOLEAUTAPI VarUI4FromUI1 ['BYTE bIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromI2 ['SHORT uiIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromI4 ['LONG lIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromR4 ['FLOAT fltIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromR8 ['DOUBLE dblIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromDate ['DATE dateIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromCy ['CY cyIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromStr ['OLECHAR *strIn', 'LCID lcid', 'ULONG dwFlags', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromDisp ['IDispatch *pdispIn', 'LCID lcid', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromBool ['VARIANT_BOOL boolIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromI1 ['CHAR cIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromUI2 ['USHORT uiIn', 'ULONG *pulOut']
WINOLEAUTAPI VarUI4FromDec ['DECIMAL *pdecIn', 'ULONG *pulOut']
WINOLEAUTAPI VarDecFromUI1 ['BYTE bIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromI2 ['SHORT uiIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromI4 ['LONG lIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromR4 ['FLOAT fltIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromR8 ['DOUBLE dblIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromDate ['DATE dateIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromCy ['CY cyIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromStr ['OLECHAR *strIn', 'LCID lcid', 'ULONG dwFlags', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromDisp ['IDispatch *pdispIn', 'LCID lcid', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromBool ['VARIANT_BOOL boolIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromI1 ['CHAR cIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromUI2 ['USHORT uiIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarDecFromUI4 ['ULONG ulIn', 'DECIMAL *pdecOut']
WINOLEAUTAPI VarParseNumFromStr ['OLECHAR * strIn', 'LCID lcid', 'ULONG dwFlags', 'NUMPARSE * pnumprs', 'BYTE * rgbDig']
WINOLEAUTAPI VarNumFromParseNum ['NUMPARSE * pnumprs', 'BYTE * rgbDig', 'ULONG dwVtBits', 'VARIANT * pvar']
WINOLEAUTAPI VarDateFromUdate ['UDATE *pudateIn', 'ULONG dwFlags', 'DATE *pdateOut']
WINOLEAUTAPI VarUdateFromDate ['DATE dateIn', 'ULONG dwFlags', 'UDATE *pudateOut']
WINOLEAUTAPI GetAltMonthNames ['LCID lcid', 'LPOLESTR * * prgp']
WINOLEAUTAPI LoadTypeLib ['const OLECHAR *szFile', 'ITypeLib ** pptlib']
WINOLEAUTAPI LoadTypeLibEx ['LPCOLESTR szFile', 'REGKIND regkind', 'ITypeLib ** pptlib']
WINOLEAUTAPI LoadRegTypeLib ['REFGUID rguid', 'WORD wVerMajor', 'WORD wVerMinor', 'LCID lcid', 'ITypeLib ** pptlib']
WINOLEAUTAPI QueryPathOfRegTypeLib ['REFGUID guid', 'USHORT wMaj', 'USHORT wMin', 'LCID lcid', 'LPBSTR lpbstrPathName']
WINOLEAUTAPI RegisterTypeLib ['ITypeLib * ptlib', 'OLECHAR *szFullPath', 'OLECHAR *szHelpDir']
WINOLEAUTAPI UnRegisterTypeLib ['REFGUID libID', 'WORD wVerMajor', 'WORD wVerMinor', 'LCID lcid', 'SYSKIND syskind']
WINOLEAUTAPI CreateTypeLib ['SYSKIND syskind', 'const OLECHAR *szFile', 'ICreateTypeLib ** ppctlib']
WINOLEAUTAPI CreateTypeLib2 ['SYSKIND syskind', 'LPCOLESTR szFile', 'ICreateTypeLib2 **ppctlib']
WINOLEAUTAPI DispGetParam ['DISPPARAMS * pdispparams', 'UINT position', 'VARTYPE vtTarg', 'VARIANT * pvarResult', 'UINT * puArgErr']
WINOLEAUTAPI DispGetIDsOfNames ['ITypeInfo * ptinfo', 'OLECHAR ** rgszNames', 'UINT cNames', 'DISPID * rgdispid']
WINOLEAUTAPI DispInvoke ['void * _this', 'ITypeInfo * ptinfo', 'DISPID dispidMember', 'WORD wFlags', 'DISPPARAMS * pparams', 'VARIANT * pvarResult', 'EXCEPINFO * pexcepinfo', 'UINT * puArgErr']
WINOLEAUTAPI CreateDispTypeInfo ['INTERFACEDATA * pidata', 'LCID lcid', 'ITypeInfo ** pptinfo']
WINOLEAUTAPI CreateStdDispatch ['IUnknown * punkOuter', 'void * pvThis', 'ITypeInfo * ptinfo', 'IUnknown ** ppunkStdDisp']
WINOLEAUTAPI DispCallFunc ['void * pvInstance', 'ULONG oVft', 'CALLCONV cc', 'VARTYPE vtReturn', 'UINT cActuals', 'VARTYPE * prgvt', 'VARIANTARG ** prgpvarg', 'VARIANT * pvargResult']
WINOLEAUTAPI RegisterActiveObject ['IUnknown * punk', 'REFCLSID rclsid', 'DWORD dwFlags', 'DWORD * pdwRegister']
WINOLEAUTAPI RevokeActiveObject ['DWORD dwRegister', 'void * pvReserved']
WINOLEAUTAPI GetActiveObject ['REFCLSID rclsid', 'void * pvReserved', 'IUnknown ** ppunk']
WINOLEAUTAPI SetErrorInfo ['ULONG dwReserved', 'IErrorInfo * perrinfo']
WINOLEAUTAPI GetErrorInfo ['ULONG dwReserved', 'IErrorInfo ** pperrinfo']
WINOLEAUTAPI CreateErrorInfo ['ICreateErrorInfo ** pperrinfo']
BOOL PowerPolicyNotify ['DWORD dwMessage', 'DWORD dwData']
LW StrRetToStrA ['STRRET *pstr', 'LPCITEMIDLIST pidl', 'LPSTR *ppsz']
LW StrRetToStrW ['STRRET *pstr', 'LPCITEMIDLIST pidl', 'LPWSTR *ppsz']
LW SHStrDupA ['LPCSTR psz', 'WCHAR **ppwsz']
LW SHStrDupW ['LPCWSTR psz', 'WCHAR **ppwsz']
LW UrlEscapeA ['LPCSTR pszUrl', 'LPSTR pszEscaped', 'LPDWORD pcchEscaped', 'DWORD dwFlags']
LW UrlCreateFromPathA ['LPCSTR pszPath', 'LPSTR pszUrl', 'LPDWORD pcchUrl', 'DWORD dwFlags']
LW UrlHashA ['LPCSTR pszUrl', 'LPBYTE pbHash', 'DWORD cbHash']
LW UrlHashW ['LPCWSTR pszUrl', 'LPBYTE pbHash', 'DWORD cbHash']
LW UrlGetPartA ['LPCSTR pszIn', 'LPSTR pszOut', 'LPDWORD pcchOut', 'DWORD dwPart', 'DWORD dwFlags']
LW UrlApplySchemeA ['LPCSTR pszIn', 'LPSTR pszOut', 'LPDWORD pcchOut', 'DWORD dwFlags']
LW UrlApplySchemeW ['LPCWSTR pszIn', 'LPWSTR pszOut', 'LPDWORD pcchOut', 'DWORD dwFlags']
LW HashData ['LPBYTE pbData', 'DWORD cbData', 'LPBYTE pbHash', 'DWORD cbHash']
LW AssocCreate ['CLSID clsid', 'REFIID riid', 'LPVOID *ppv']
LW AssocQueryStringA ['ASSOCF flags', 'ASSOCSTR str', 'LPCSTR pszAssoc', 'LPCSTR pszExtra', 'LPSTR pszOut', 'DWORD *pcchOut']
LW AssocQueryStringW ['ASSOCF flags', 'ASSOCSTR str', 'LPCWSTR pszAssoc', 'LPCWSTR pszExtra', 'LPWSTR pszOut', 'DWORD *pcchOut']
LW AssocQueryStringByKeyA ['ASSOCF flags', 'ASSOCSTR str', 'HKEY hkAssoc', 'LPCSTR pszExtra', 'LPSTR pszOut', 'DWORD *pcchOut']
LW AssocQueryStringByKeyW ['ASSOCF flags', 'ASSOCSTR str', 'HKEY hkAssoc', 'LPCWSTR pszExtra', 'LPWSTR pszOut', 'DWORD *pcchOut']
LW AssocQueryKeyA ['ASSOCF flags', 'ASSOCKEY key', 'LPCSTR pszAssoc', 'LPCSTR pszExtra', 'HKEY *phkeyOut']
LW AssocQueryKeyW ['ASSOCF flags', 'ASSOCKEY key', 'LPCWSTR pszAssoc', 'LPCWSTR pszExtra', 'HKEY *phkeyOut']
LW SHCreateStreamOnFileA ['LPCSTR pszFile', 'DWORD grfMode', 'IStream **ppstm']
LW SHCreateStreamOnFileW ['LPCWSTR pszFile', 'DWORD grfMode', 'IStream **ppstm']
LW SHAutoComplete ['HWND hwndEdit', 'DWORD dwFlags']
void Msr_Init ['void']
void Msr_Terminate ['void']
int Msr_Register ['LPTSTR Incident']
void Msr_Reset ['int Id']
void Msr_Control ['int iAction']
void Msr_Start ['int Id']
void Msr_Stop ['int Id']
void Msr_Note ['int Id']
void Msr_Integer ['int Id', 'int n']
void Msr_Float ['int Id', 'float n']
void Msr_Dump ['HANDLE hFile']
void Msr_DumpStats ['HANDLE hFile']
t32 _CopyInt32FromFloat ['float']
float _CopyFloatFromInt32 ['t32']
t64 _CopyInt64FromDouble ['double']
double _CopyDoubleFromInt64 ['t64']
void CeLogSetZones ['DWORD dwZoneUser', ' DWORD dwZoneCE', ' DWORD dwZoneProcess']
BOOL CeLogGetZones ['LPDWORD lpdwZoneUser', ' LPDWORD lpdwZoneCE', ' LPDWORD lpdwZoneProcess', ' LPDWORD lpdwAvailableZones']
BOOL CeLogReSync ['']
DWORD CredWrite ['IN\tPCRED pCred', 'IN\tDWORD dwFlags']
DWORD CredRead ['IN PWCHAR wszTarget', 'IN DWORD dwTargetLen', 'IN DWORD dwType', 'IN DWORD dwFlags', 'OUT PPCRED ppCred']
DWORD CredDelete ['IN\tPWCHAR wszTarget', 'IN DWORD dwTargetLen', 'IN\tDWORD dwType', 'IN DWORD dwFlags']
DWORD CredUpdate ['IN PWCHAR wszTarget', 'IN DWORD dwTargetLen', 'IN DWORD dwType', 'IN\tPCRED pCred', 'IN\tDWORD dwFlags']
DWORD CredFree ['IN\tPBYTE pbBuffer']
DWORD NeedRebootInit ['VOID']
BOOL NeedReboot ['DWORD dwRebootCheck']
BOOL IsNTAdmin ['DWORD dwReserved', 'DWORD *lpdwReserved']
INT LaunchINFSection ['HWND', 'HINSTANCE', 'PSTR', 'INT']
BOOL HwxConfig ['']
HRC HwxCreate ['HRC']
BOOL HwxDestroy ['HRC']
BOOL HwxSetGuide ['HRC', 'HWXGUIDE *']
BOOL HwxALCValid ['HRC', 'ALC']
BOOL HwxALCPriority ['HRC', 'ALC']
BOOL HwxSetPartial ['HRC', 'UINT']
BOOL HwxSetAbort ['HRC', 'UINT *']
BOOL HwxInput ['HRC', 'POINT *', 'UINT', 'DWORD']
BOOL HwxEndInput ['HRC']
BOOL HwxProcess ['HRC']
INT HwxGetResults ['HRC hrc', '\tUINT cAlt', '\tUINT iFirst', '\tUINT cBoxRes', '\tHWXRESULTS\t*rgBoxResults\t// array of cBoxRes ranked lists']
BOOL HwxSetContext ['HRC', 'WCHAR']
INT HwxResultsAvailable ['HRC']
PPCI_RSRC PCIRsrc_New ['DWORD Bus', 'DWORD Device', 'DWORD Function', 'DWORD Offset', 'DWORD Base', 'DWORD Size', 'BOOL Bridge', 'DWORD SecBus', 'BOOL Placed', 'PPCI_CFG_INFO ConfigInfo']
void PCIRsrc_Add ['PPCI_RSRC Head', 'PPCI_RSRC Rsrc']
PPCI_RSRC PCIRsrc_GetNext ['PPCI_RSRC Head', 'DWORD Bus']
BOOL PCIRsrc_Place ['PPCI_RSRC Head', 'PPCI_RSRC Rsrc']
void PCIRsrc_DelList ['PPCI_RSRC Head']
void PCIRsrc_PrintList ['PPCI_RSRC Head']
VXDINLINE SmartcardAssert ['PVOID FailedAssertion', 'PVOID FileName', 'ULONG LineNumber', 'PCHAR Message']
VOID SmartcardInvertData ['PUCHAR Buffer', 'ULONG Length']
SMCLIBAPI SmartcardLogError ['PVOID Object', 'LONG ErrorCode', 'PUNICODE_STRING Insertion', 'ULONG DumpWord']
SMCLIBAPI SmartcardDeviceControl ['PSMARTCARD_EXTENSION SmartcardExtension', 'DWORD dwIoControlCode', 'PBYTE pInBuf', 'DWORD nInBufSize', 'PBYTE pOutBuf', 'DWORD nOutBufSize', 'PDWORD pBytesReturned']
SMCLIBAPI SmartcardDeviceControl ['PSMARTCARD_EXTENSION SmartcardExtension', 'PIRP Irp']
SMCLIBAPI SmartcardInitializeCardCapabilities ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardInitialize ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardCompleteCardTracking ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardExit ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardUpdateCardCapabilities ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardRawRequest ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardT0Request ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardT1Request ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardRawReply ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardT0Reply ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardT1Reply ['PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardInvertData ['PUCHAR Buffer', 'ULONG Length']
SMCLIBAPI SmartcardCreateLink ['IN OUT PUNICODE_STRING LinkName', 'IN PUNICODE_STRING DeviceName']
SMCLIBAPI SmartcardGetDebugLevel ['void']
SMCLIBAPI SmartcardSetDebugLevel ['ULONG Level']
NTSTATUS SmartcardAcquireRemoveLock ['IN PSMARTCARD_EXTENSION SmartcardExtension']
VOID SmartcardReleaseRemoveLock ['IN PSMARTCARD_EXTENSION SmartcardExtension']
VOID SmartcardReleaseRemoveLockAndWait ['IN PSMARTCARD_EXTENSION SmartcardExtension']
SMCLIBAPI SmartcardCreateLink ['IN LPCWSTR LinkName', 'IN LPCWSTR DeviceName']
SMCLIBAPI SmartcardDeleteLink ['IN LPCWSTR LinkName']
ULONG MapNtStatusToWinError ['NTSTATUS status']
BOOL PDDInit ['OUT RNDIS_PDD_CHARACTERISTICS\t*pRndisPddCharacteristics', 'IN\tPBYTE pBaseAddress']
void PDDDeinit ['void']
void DumpMemory ['PBYTE\tpSource', 'DWORD\tdwLength']
void MddIndicateRndisMessage ['PDATA_WRAPPER\tpDataWrapper']
void MddIndicateRndisPacket ['PDATA_WRAPPER\tpDataWrapper']
void MddSendRndisMessageComplete ['PDATA_WRAPPER\tpDataWrapper']
void MddSendRndisPacketComplete ['PDATA_WRAPPER\tpDataWrapper']
PDATA_WRAPPER MDDAllocDataWrapper ['void']
void MDDFreeDataWrapper ['PDATA_WRAPPER pDataWrapper']
PBYTE MDDAllocMem ['void']
void MDDFreeMem ['PBYTE pBuffer']
void MddDisconnect ['']
BOOL MddConnect ['']
void MddEnterPdd ['void']
void MddLeavePdd ['void']
void MDDInit ['']
void MDDDeinit ['']
DWORD MDDGetBulkTransferSize ['']
BOOL MDDHaltReceived ['']
APIENTRY MQMgmtGetInfo ['IN LPCWSTR pMachineName', 'IN LPCWSTR pObjectName', 'IN OUT MQMGMTPROPS* pMgmtProps']
APIENTRY MQMgmtAction ['IN LPCWSTR pMachineName', 'IN LPCWSTR pObjectName', 'IN LPCWSTR pAction']
APIENTRY MQPurgeQueue ['IN HANDLE hQueue']
MIMEOLEAPI MimeOleSetCompatMode [' DWORD dwMode']
MIMEOLEAPI MimeOleContentTypeFromUrl [' LPCSTR pszBase', ' LPCSTR pszUrl', ' LPSTR *ppszCntType']
MIMEOLEAPI MimeOleParseMhtmlUrl [' LPSTR pszUrl', ' LPSTR *ppszRootUrl', ' LPSTR *ppszBodyUrl']
MIMEOLEAPI MimeOleObjectFromUrl [' LPCSTR pszUrl', ' BOOL fCreate', ' REFIID riid', ' LPVOID *ppvObject']
MIMEOLEAPI MimeOleObjectFromMoniker [' BINDF bindf', ' IMoniker *pmkOriginal', ' IBindCtx *pBindCtx', ' REFIID riid', ' LPVOID *ppvObject', ' IMoniker **ppmkNew']
MIMEOLEAPI MimeOleCombineURL [' LPCSTR pszBase', ' ULONG cchBase', ' LPCSTR pszURL', ' ULONG cchURL', ' BOOL fUnEscape', ' LPSTR *ppszAbsolute']
MIMEOLEAPI MimeOleGetSubjectFileName [' IMimePropertySet *pPropertySet', ' ULONG *pulPart', ' ULONG *pulTotal', '/* in', 'out */ LPSTR pszFileName', ' ULONG cchMax']
MIMEOLEAPI MimeOleCreateWebDocument [' LPCSTR pszBase', ' LPCSTR pszURL', ' IMimeWebDocument **ppDocument']
MIMEOLEAPI MimeOleGetRelatedSection [' IMimeMessageTree *pTree', ' boolean fCreate', ' LPHBODY phRelated', ' boolean *pfMultiple']
MIMEOLEAPI MimeOleGetMixedSection [' IMimeMessageTree *pTree', ' boolean fCreate', ' LPHBODY phMixed', ' boolean *pfMultiple']
MIMEOLEAPI MimeOleGetAlternativeSection [' IMimeMessageTree *pTree', ' LPHBODY phAlternative', ' boolean *pfMultiple']
MIMEOLEAPI MimeOleGenerateCID ['/* in', 'out */ LPSTR pszCID', ' ULONG cchMax', ' boolean fAbsolute']
MIMEOLEAPI MimeOleGenerateMID ['/* in', 'out */ LPSTR pszMID', ' ULONG cchMax', ' boolean fAbsolute']
MIMEOLEAPI MimeOleCreateByteStream [' IStream **ppStream']
MIMEOLEAPI MimeOleGetPropertySchema [' IMimePropertySchema **ppSchema']
MIMEOLEAPI MimeOleQueryString [' LPCSTR pszSearchMe', ' LPCSTR pszCriteria', ' boolean fSubString', ' boolean fCaseSensitive']
MIMEOLEAPI MimeOleGetPropA [' IMimePropertySet *pPropertyset', ' LPCSTR pszName', ' DWORD dwFlags', ' LPSTR *ppszData']
MIMEOLEAPI MimeOleSetPropA [' IMimePropertySet *pPropertyset', ' LPCSTR pszName', ' DWORD dwFlags', ' LPCSTR pszData']
MIMEOLEAPI MimeOleGetPropW [' IMimePropertySet *pPropertyset', ' LPCSTR pszName', ' DWORD dwFlags', ' LPWSTR *ppszData']
MIMEOLEAPI MimeOleSetPropW [' IMimePropertySet *pPropertyset', ' LPCSTR pszName', ' DWORD dwFlags', ' LPWSTR pszData']
MIMEOLEAPI MimeOleGetBodyPropA [' IMimeMessageTree *pTree', ' HBODY hBody', ' LPCSTR pszName', ' DWORD dwFlags', ' LPSTR *ppszData']
MIMEOLEAPI MimeOleSetBodyPropA [' IMimeMessageTree *pTree', ' HBODY hBody', ' LPCSTR pszName', ' DWORD dwFlags', ' LPCSTR pszData']
MIMEOLEAPI MimeOleGetBodyPropW [' IMimeMessageTree *pTree', ' HBODY hBody', ' LPCSTR pszName', ' DWORD dwFlags', ' LPWSTR *ppszData']
MIMEOLEAPI MimeOleSetBodyPropW [' IMimeMessageTree *pTree', ' HBODY hBody', ' LPCSTR pszName', ' DWORD dwFlags', ' LPCWSTR pszData']
MIMEOLEAPI MimeOleCreateHeaderTable [' IMimeHeaderTable **ppTable']
MIMEOLEAPI MimeOleVariantFree ['/* in', 'out */ LPPROPVARIANT pProp']
MIMEOLEAPI MimeOleVariantCopy [' LPPROPVARIANT pDest', ' LPPROPVARIANT pSource']
MIMEOLEAPI MimeOleGetExtClassId [' LPCSTR pszExtension', ' LPCLSID pclsid']
MIMEOLEAPI MimeOleEncodeHeader [' HCHARSET hCharset', ' LPPROPVARIANT pData', ' LPSTR *ppszEncoded', '/* in', 'out */ LPRFC1522INFO pRfc1522Info']
MIMEOLEAPI MimeOleDecodeHeader [' HCHARSET hCharset', ' LPCSTR pszData', ' LPPROPVARIANT pDecoded', '/* in', 'out */ LPRFC1522INFO pRfc1522Info']
MIMEOLEAPI MimeOleRfc1522Decode [' LPCSTR pszValue', ' LPSTR pszCharset', ' ULONG cchmax', ' LPSTR *ppszDecoded']
MIMEOLEAPI MimeOleRfc1522Encode [' LPCSTR pszValue', ' HCHARSET hCharset', ' LPSTR *ppszEncoded']
MIMEOLEAPI MimeOleGetInternat [' IMimeInternational **ppInternat']
MIMEOLEAPI MimeOleFindCharset [' LPCSTR pszCharset', ' LPHCHARSET phCharset']
MIMEOLEAPI MimeOleGetCharsetInfo [' HCHARSET hCharset', ' LPINETCSETINFO pCsetInfo']
MIMEOLEAPI MimeOleGetCodePageInfo [' CODEPAGEID cpiCodePage', ' LPCODEPAGEINFO pCodePageInfo']
MIMEOLEAPI MimeOleGetDefaultCharset [' LPHCHARSET phCharset']
MIMEOLEAPI MimeOleSetDefaultCharset [' HCHARSET hCharset']
MIMEOLEAPI MimeOleGetCodePageCharset [' CODEPAGEID cpiCodePage', ' CHARSETTYPE ctCsetType', ' LPHCHARSET phCharset']
MIMEOLEAPI MimeOleCreateVirtualStream [' IStream **ppStream']
MIMEOLEAPI MimeOleOpenFileStream [' LPCSTR pszFilePath', ' DWORD dwCreationDistribution', ' DWORD dwAccess', ' IStream **ppstmFile']
MIMEOLEAPI MimeOleIsTnefStream [' IStream *pStream']
MIMEOLEAPI MimeOleGenerateFileName [' LPCSTR pszContentType', ' LPCSTR pszSuggest', ' LPCSTR pszDefaultExt', '/* in', 'out */ LPSTR *ppszFileName']
MIMEOLEAPI MimeOleGetFileExtension [' LPCSTR pszFilePath', '/* in', 'out */ LPSTR pszExt', ' ULONG cchMax']
MIMEOLEAPI MimeOleCreateSecurity [' IMimeSecurity **ppSecurity']
MIMEOLEAPI MimeOleInetDateToFileTime [' LPCSTR pszDate', ' LPFILETIME pft']
MIMEOLEAPI MimeOleFileTimeToInetDate [' LPFILETIME pft', '/* in', 'out */ LPSTR pszDate', ' ULONG cchMax']
MIMEOLEAPI MimeOleCreateMessageParts [' IMimeMessageParts **ppParts']
MIMEOLEAPI MimeOleGetAllocator [' IMimeAllocator **ppAllocator']
MIMEOLEAPI MimeOleParseRfc822Address [' DWORD dwAdrType', ' ENCODINGTYPE ietEncoding', ' LPCSTR pszRfc822Adr', ' LPADDRESSLIST pList']
MIMEOLEAPI MimeOleCreateMessage [' IUnknown *pUnkOuter', ' IMimeMessage **ppMessage']
MIMEOLEAPI MimeOleMergePartialHeaders [' IStream *pstmIn', ' IStream *pstmOut']
MIMEOLEAPI MimeOleEscapeString [' CODEPAGEID cpiCodePage', ' LPCSTR pszIn', ' LPSTR *ppszOut']
MIMEOLEAPI MimeOleGetExtContentType [' LPCSTR pszExtension', ' LPSTR *ppszContentType']
MIMEOLEAPI MimeOleGetContentTypeExt [' LPCSTR pszContentType', ' LPSTR *ppszExtension']
MIMEOLEAPI MimeOleGetFileInfo [' LPSTR pszFilePath', ' LPSTR *ppszCntType', ' LPSTR *ppszSubType', ' LPSTR *ppszCntDesc', ' LPSTR *ppszFileName', ' LPSTR *ppszExtension']
MIMEOLEAPI MimeOleCreateBody [' IMimeBody **ppBody']
MIMEOLEAPI MimeOleCreatePropertySet [' IUnknown *pUnkOuter', ' IMimePropertySet **ppPropertySet']
MIMEOLEAPI MimeOleCreateMessageTree [' IUnknown *pUnkOuter', ' IMimeMessageTree **ppMessageTree']
MIMEOLEAPI MimeOleGetCertsFromThumbprints [' THUMBBLOB *const rgThumbprint', '/* in', 'out */ X509CERTRESULT *const pResults', ' const HCERTSTORE *const rghCertStore', ' const DWORD cCertStore']
MIMEOLEAPI MimeOleSplitMessage [' IMimeMessage *pMessage', ' ULONG cbMaxPart', ' IMimeMessageParts **ppParts']
MIMEOLEAPI MimeOleClearDirtyTree [' IMimeMessageTree *pTree']
MIMEOLEAPI MimeOleConvertEnrichedToHTML [' CODEPAGEID codepage', ' IStream *pIn', ' IStream *pOut']
MIMEOLEAPI MimeOleIsEnrichedStream [' IStream *pStream']
MIMEOLEAPI MimeOleSMimeCapsToDlg [' LPBYTE pbSMimeCaps', ' DWORD cbSMimeCaps', ' DWORD cCerts', ' PCX509CERT * rgCerts', ' HWND hwndDlg', ' DWORD idEncAlgs', ' DWORD idSignAlgs', ' DWORD idBlob']
MIMEOLEAPI MimeOleSMimeCapsFromDlg [' HWND hwnd', ' DWORD idEncAlgs', ' DWORD idSignAlgs', ' DWORD idBlob', ' LPBYTE pbSMimeCaps', ' DWORD * pcbSmimeCaps']
MIMEOLEAPI MimeOleSMimeCapInit [' LPBYTE pbSMimeCap', ' DWORD cbSMimeCap', ' LPVOID * ppv']
MIMEOLEAPI MimeOleSMimeCapAddSMimeCap [' LPBYTE pbSMimeCap', ' DWORD cbSMimeCap', ' LPVOID pv']
MIMEOLEAPI MimeOleSMimeCapAddCert [' LPBYTE pbCert', ' DWORD cbCert', ' BOOL fParanoid', ' LPVOID pv']
MIMEOLEAPI MimeOleSMimeCapGetEncAlg [' LPVOID pv', ' LPBYTE pbEncode', ' DWORD * pcbEncode', ' DWORD * pdwBits']
MIMEOLEAPI MimeOleSMimeCapGetHashAlg [' LPVOID pv', ' LPBYTE pbEncode', ' DWORD * pcbEncode', ' DWORD * pfBlobSign']
MIMEOLEAPI MimeOleSMimeCapRelease [' LPVOID pv']
MIMEOLEAPI MimeOleAlgNameFromSMimeCap [' LPBYTE pb', ' DWORD cb', ' LPCSTR * ppzProtocol']
MIMEOLEAPI MimeOleAlgStrengthFromSMimeCap [' LPBYTE pb', ' DWORD cb', ' BOOL fEncryption', ' DWORD * pdwStrength']
MIMEOLEAPI MimeOleSMimeCapsFull ['\tLPVOID pv', '\tBOOL fFullEncryption', '\tBOOL fFullSigning', '\tLPBYTE pbSymCaps', '\tDWORD * pcbSymCaps']
MIMEOLEAPI MimeOleCreateHashTable [' DWORD dwSize', ' BOOL fDupeKeys', ' IHashTable **ppHashTable']
MIMEOLEAPI MimeOleStripHeaders [' IMimeMessage *pMessage', ' HBODY hBody', ' LPCSTR pszNameDelete', ' LPCSTR pszHeaderAdd', ' IStream **ppStream']
MIMEOLEAPI MimeEditViewSource [' HWND hwndParent', ' IMimeMessage *pMsg']
MIMEOLEAPI MimeEditIsSafeToRun [' HWND hwndParent', ' LPCSTR lpszFileName']
MIMEOLEAPI MimeEditVerifyTrust [' HWND hwndParent', ' LPCSTR lpszFileName', ' LPCSTR lpszPathName']
MIMEOLEAPI MimeEditCreateMimeDocument [' IUnknown *pDoc', ' IMimeMessage *pMsgSrc', ' DWORD dwFlags', ' IMimeMessage **ppMsg']
MIMEOLEAPI MimeEditGetBackgroundImageUrl [' IUnknown *pDoc', ' BSTR *pbstr']
MIMEOLEAPI MimeEditDocumentFromStream [' IStream *pstm', ' REFIID riid', ' void **ppDoc']
HANDLE CeStartDevMgmtService ['int nAction', '#ifdef __cplusplus HWND hCallbackWnd = NULL\n#else HWND hCallbackWnd\n#endif']
DWORD DsGetDcNameW ['IN LPCWSTR ComputerName OPTIONAL', 'IN LPCWSTR DomainName OPTIONAL', 'IN GUID *DomainGuid OPTIONAL', 'IN LPCWSTR SiteName OPTIONAL', 'IN ULONG Flags', 'OUT PDOMAIN_CONTROLLER_INFOW *DomainControllerInfo']
NET_API_STATUS NetApiBufferFree ['LPVOID Buffer']
PVOID MmMapIoSpace ['PHYSICAL_ADDRESS PhysicalAddress', 'ULONG NumberOfBytes', 'BOOLEAN CacheEnable']
VOID MmUnmapIoSpace ['PVOID BaseAddress', 'ULONG NumberOfBytes']
BOOL TransBusAddrToVirtual ['INTERFACE_TYPE InterfaceType', 'ULONG BusNumber', 'PHYSICAL_ADDRESS BusAddress', 'ULONG Length', 'out PULONG AddressSpace', 'PPVOID MappedAddress']
BOOL TransBusAddrToStatic ['INTERFACE_TYPE InterfaceType', 'ULONG BusNumber', 'PHYSICAL_ADDRESS BusAddress', 'ULONG Length', 'out PULONG AddressSpace', 'PPVOID MappedAddress']
ULONG HalGetBusDataByOffset ['BUS_DATA_TYPE BusDataType', 'ULONG BusNumber', 'ULONG SlotNumber', 'PVOID Buffer', 'ULONG Offset', 'ULONG Length']
ULONG HalSetBusDataByOffset ['BUS_DATA_TYPE BusDataType', 'ULONG BusNumber', 'ULONG SlotNumber', 'PVOID Buffer', 'ULONG Offset', 'ULONG Length']
BOOLEAN HalTranslateBusAddress ['INTERFACE_TYPE InterfaceType', 'ULONG BusNumber', 'PHYSICAL_ADDRESS BusAddress', 'out PULONG AddressSpace', 'PPHYSICAL_ADDRESS TranslatedAddress']
BOOLEAN HalTranslateSystemAddress ['INTERFACE_TYPE InterfaceType', 'ULONG BusNumber', 'PHYSICAL_ADDRESS SystemAddress', 'PPHYSICAL_ADDRESS TranslatedAddress']
PVOID HalAllocateCommonBuffer ['PDMA_ADAPTER_OBJECT Adapter', 'ULONG Length', 'PPHYSICAL_ADDRESS LogicalAddress', 'BOOLEAN CacheEnabled']
VOID HalFreeCommonBuffer ['PDMA_ADAPTER_OBJECT Adapter', 'ULONG Length', 'PHYSICAL_ADDRESS LogicalAddress', 'PVOID VirtualAddress', 'BOOLEAN CacheEnabled']
UCHAR READ_REGISTER_UCHAR ['PUCHAR Register']
USHORT READ_REGISTER_USHORT ['PUSHORT Register']
ULONG READ_REGISTER_ULONG ['PULONG Register']
VOID WRITE_REGISTER_UCHAR ['PUCHAR Register', 'UCHAR Value']
VOID WRITE_REGISTER_USHORT ['PUSHORT Register', 'USHORT Value']
VOID WRITE_REGISTER_ULONG ['PULONG Register', 'ULONG Value']
UCHAR READ_PORT_UCHAR ['PUCHAR Port']
USHORT READ_PORT_USHORT ['PUSHORT Port']
ULONG READ_PORT_ULONG ['PULONG Port']
VOID WRITE_PORT_UCHAR ['PUCHAR Port', 'UCHAR Value']
VOID WRITE_PORT_USHORT ['PUSHORT Port', 'USHORT Value']
VOID WRITE_PORT_ULONG ['PULONG Port', 'ULONG Value']
void StallOneMicrosecond ['void']
BOOL BeginCalibration ['HKEY hKey']
void CalibrateStallCounter ['void']
void StallExecution ['DWORD dwMicroSec']
HANDLE CreateBusAccessHandle ['LPCTSTR lpActiveRegPath']
VOID CloseBusAccessHandle ['_opt HANDLE hBusAccess']
BOOL SetDevicePowerState ['_opt HANDLE hBusAccess', 'CEDEVICE_POWER_STATE PowerState', '__reserved PVOID pReserved']
BOOL GetDevicePowerState ['_opt HANDLE hBusAccess', 'PCEDEVICE_POWER_STATE pPowerState', '__reserved PVOID pReserved']
BOOL TranslateBusAddr ['_opt HANDLE hBusAccess', 'INTERFACE_TYPE InterfaceType', 'ULONG BusNumber', 'PHYSICAL_ADDRESS BusAddress', 'out PULONG AddressSpace', 'PPHYSICAL_ADDRESS TranslatedAddress']
BOOL TranslateSystemAddr ['_opt HANDLE hBusAccess', 'INTERFACE_TYPE InterfaceType', 'ULONG BusNumber', 'PHYSICAL_ADDRESS SystemAddress', 'PPHYSICAL_ADDRESS TranslatedAddress']
BOOL GetParentDeviceInfo ['_opt HANDLE hBusAccess', 'PDEVMGR_DEVICE_INFORMATION pDeviceInfo']
BOOL GetChildDeviceRemoveState ['_opt HANDLE hBusAccess', 'PDWORD lpdChildDeviceState']
BOOL BusTransBusAddrToVirtual ['_opt HANDLE hBusAccess', 'INTERFACE_TYPE InterfaceType', 'ULONG BusNumber', 'PHYSICAL_ADDRESS BusAddress', 'ULONG Length', 'out PULONG AddressSpace', 'PPVOID MappedAddress']
BOOL BusTransBusAddrToStatic ['_opt HANDLE hBusAccess', 'INTERFACE_TYPE InterfaceType', 'ULONG BusNumber', 'PHYSICAL_ADDRESS BusAddress', 'ULONG Length', 'out PULONG AddressSpace', 'PPVOID MappedAddress']
DWORD CeDriverGetDirectCaller ['']
HANDLE CeDriverDuplicateCallerHandle ['IN HANDLE DirectCallerHandle', 'IN DWORD dwDesiredAccess', 'IN BOOL bInheritHandle', 'IN DWORD dwOptions']
HANDLE DDKPwr_Initialize ['PFN_SETPOWERLEVEL pSetPowerLevelFn', 'DWORD dwContext', 'BOOL fAbortOnPMRequests', 'DWORD dwTimeout']
void DDKPwr_Deinitialize ['HANDLE hPowerLock']
HANDLE DDKPwr_RequestLevel ['HANDLE hPowerLock', 'CEDEVICE_POWER_STATE dx']
void DDKPwr_ReleaseLevel ['HANDLE hPowerLock', 'HANDLE hLevelLock']
CEDEVICE_POWER_STATE DDKPwr_GetDeviceLevel ['HANDLE hPowerLock']
BOOL DDKPwr_SetDeviceLevel ['HANDLE hPowerLock', 'CEDEVICE_POWER_STATE dx', 'PFN_SETPOWERLEVELCALLBACK pCallbackFn']
LONG lineGetCallBarringCaps ['HLINE hLine', 'LPDWORD lpdwModes', 'LPDWORD lpdwClasses']
LONG lineGetCallBarringState ['HLINE hLine', 'DWORD dwMode', 'LPDWORD lpdwClasses', 'LPCTSTR lpszPassword']
LONG lineGetCallWaitingCaps ['HLINE hLine', 'LPDWORD lpdwClasses']
LONG lineGetCallWaitingState ['HLINE hLine', 'LPDWORD lpdwClasses']
LONG lineGetCurrentAddressID ['HLINE hLine', 'LPDWORD lpdwAddressID']
LONG lineGetCurrentHSCSDStatus ['HLINE hLine', 'LPDWORD lpdwChannelsIn', 'LPDWORD lpdwChannelsOut', 'LPDWORD lpdwChannelCoding', 'LPDWORD lpdwAirInterfaceRate']
LONG lineGetCurrentOperator ['HLINE hLine', 'LPLINEOPERATOR lpCurrentOperator']
LONG lineGetCurrentSystemType ['HLINE hLine', 'LPDWORD lpdwCurrentSystemType']
LONG lineGetEquipmentState ['HLINE hLine', 'LPDWORD lpdwState', 'LPDWORD lpdwRadioSupport']
LONG lineGetGeneralInfo ['HLINE hLine', 'LPLINEGENERALINFO lpLineGeneralInfo']
LONG lineGetGPRSClass ['HLINE hLine', 'LPDWORD lpdwClass']
LONG lineGetHSCSDCaps ['HLINE hLine', 'LPDWORD lpdwClass', 'LPDWORD lpdwChannelsIn', 'LPDWORD lpdwChannelsOut', 'LPDWORD lpdwChannelsSum', 'LPDWORD lpdwChannelCodings']
LONG lineGetHSCSDState ['HLINE hLine', 'LPDWORD lpdwChannelsIn', 'LPDWORD lpdwMaxChannelsIn', 'LPDWORD lpdwChannelCodings', 'LPDWORD lpdwAirInterfaceRate']
LONG lineGetMuteState ['HLINE hLine', 'LPDWORD lpdwState']
LONG lineGetNumberCalls ['HLINE hLine', 'LPDWORD lpdwNumActiveCalls', 'LPDWORD lpdwNumOnHoldCalls', 'LPDWORD lpdwNumOnHoldPendCalls']
LONG lineGetOperatorStatus ['HLINE hLine', 'LPLINEOPERATORSTATUS lpOperatorStatus']
LONG lineGetRadioPresence ['HLINE hLine', 'LPDWORD lpdwRadioPresence']
LONG lineGetRegisterStatus ['HLINE hLine', 'LPDWORD lpdwRegisterStatus']
LONG lineGetSendCallerIDState ['HLINE hLine', 'LPDWORD lpdwState']
LONG lineGetUSSD ['HLINE hLine', 'DWORD dwID', 'LPBYTE lpbUSSD', 'DWORD dwUSSDSize', 'LPDWORD lpdwFlags']
LONG lineRegister ['HLINE hLine', 'DWORD dwRegisterMode', 'LPCTSTR lpszOperator', 'DWORD dwOperatorFormat']
LONG lineSendUSSD ['HLINE hLine', 'const BYTE* const lpbUSSD', 'DWORD dwUSSDSize', 'DWORD dwFlags']
LONG lineSetCallBarringPassword ['HLINE hLine', 'DWORD dwMode', 'LPCTSTR lpszOldPassword', 'LPCTSTR lpszNewPassword']
LONG lineSetCallBarringState ['HLINE hLine', 'DWORD dwMode', 'DWORD dwClasses', 'LPCTSTR lpszPassword']
LONG lineSetCallWaitingState ['HLINE hLine', 'DWORD dwClasses', 'DWORD dwState']
LONG lineSetCurrentAddressID ['HLINE hLine', 'DWORD dwAddressID']
LONG lineSetEquipmentState ['HLINE hLine', 'DWORD dwState']
LONG lineSetGPRSClass ['HLINE hLine', 'DWORD dwClass']
LONG lineSetHSCSDState ['HLINE hLine', 'DWORD dwChannelsIn', 'DWORD dwMaxChannelsIn', 'DWORD dwChannelCodings', 'DWORD dwAirInterfaceRate']
LONG lineSetMuteState ['HLINE hLine', 'DWORD dwState']
LONG lineSetSendCallerIDState ['HLINE hLine', 'DWORD dwState']
LONG lineSetPreferredOperator ['HLINE hLine', 'LPLINEOPERATOR lpOperator']
LONG lineUnregister ['HLINE hLine']
LONG lineAccept ['HCALL hCall', 'LPCSTR lpsUserUserInfo', 'DWORD dwSize']
LONG lineAddProvider ['LPCWSTR lpszProviderFilename', 'HWND hwndOwner', 'LPDWORD lpdwPermanentProviderID']
LONG lineAddToConference ['HCALL hConfCall', 'HCALL hConsultCall']
LONG lineAnswer ['HCALL hCall', 'LPCSTR lpsUserUserInfo', 'DWORD dwSize']
LONG lineBlindTransfer ['HCALL hCall', 'LPCWSTR lpszDestAddressW', 'DWORD dwCountryCode']
LONG lineClose ['HLINE hLine']
LONG lineCompleteTransfer ['HCALL hCall', 'HCALL hConsultCall', 'LPHCALL lphConfCall', 'DWORD dwTransferMode']
LONG lineConfigDialogEdit ['DWORD dwDeviceID', 'HWND hwndOwner', 'LPCWSTR lpszDeviceClass', 'LPVOID const lpDeviceConfigIn', 'DWORD dwSize', 'LPVARSTRING lpDeviceConfigOut']
LONG lineDeallocateCall ['HCALL hCall']
LONG lineDevSpecific ['HLINE hLine', 'DWORD dwAddressID', 'HCALL hCall', 'LPVOID lpParams', 'DWORD dwSize']
LONG lineDial ['HCALL hCall', 'LPCWSTR lpszDestAddress', 'DWORD dwCountryCode']
LONG lineDrop ['HCALL hCall', 'LPCSTR lpsUserUserInfo', 'DWORD dwSize']
LONG lineForward ['HLINE hLine', 'DWORD bAllAddresses', 'DWORD dwAddressID', 'LPLINEFORWARDLIST const lpForwardList', 'DWORD dwNumRingsNoAnswer', 'LPHCALL lphConsultCall', 'LPLINECALLPARAMS const lpCallParams']
LONG lineGenerateDigits ['HCALL hCall', 'DWORD dwDigitMode', 'LPCWSTR lpszDigits', 'DWORD dwDuration']
LONG lineGenerateTone ['HCALL hCall', 'DWORD dwToneMode', 'DWORD dwDuration', 'DWORD dwNumTones', 'LPLINEGENERATETONE const lpTones']
LONG lineStartDTMF ['HCALL hCall', 'CHAR cDTMFDigit']
LONG lineStopDTMF ['HCALL hCall']
LONG lineGetAddressCaps ['HLINEAPP hLineApp', 'DWORD dwDeviceID', 'DWORD dwAddressID', 'DWORD dwAPIVersion', 'DWORD dwExtVersion', 'LPLINEADDRESSCAPS lpAddressCaps']
LONG lineGetAddressID ['HLINE hLine', 'LPDWORD lpdwAddressID', 'DWORD dwAddressMode', 'LPCWSTR lpsAddress', 'DWORD dwSize']
LONG lineGetAddressStatus ['HLINE hLine', 'DWORD dwAddressID', 'LPLINEADDRESSSTATUS lpAddressStatus']
LONG lineGetAppPriority [' LPCWSTR lpszAppFilename', 'DWORD dwMediaMode', 'LPLINEEXTENSIONID lpExtensionID', 'DWORD dwRequestMode', 'LPVARSTRING lpExtensionName', 'LPDWORD lpdwPriority']
LONG lineGetCallInfo ['HCALL hCall', 'LPLINECALLINFO lpCallInfo']
LONG lineGetCallStatus ['HCALL hCall', 'LPLINECALLSTATUS lpCallStatus']
LONG lineGetConfRelatedCalls ['HCALL hCall', 'LPLINECALLLIST lpCallList']
LONG lineGetDevCaps ['HLINEAPP hLineApp', 'DWORD dwDeviceID', 'DWORD dwAPIVersion', 'DWORD dwExtVersion', 'LPLINEDEVCAPS lpLineDevCaps']
LONG lineGetDevConfig ['DWORD dwDeviceID', 'LPVARSTRING lpDeviceConfig', 'LPCWSTR lpszDeviceClass']
LONG lineGetNewCalls ['HLINE hLine', 'DWORD dwAddressID', 'DWORD dwSelect', 'LPLINECALLLIST lpCallList']
LONG lineGetIcon ['DWORD dwDeviceID', 'LPCWSTR lpszDeviceClass', 'LPHICON lphIcon']
LONG lineGetID ['HLINE hLine', 'DWORD dwAddressID', 'HCALL hCall', 'DWORD dwSelect', 'LPVARSTRING lpDeviceID', 'LPCWSTR lpszDeviceClass']
LONG lineGetLineDevStatus ['HLINE hLine', 'LPLINEDEVSTATUS lpLineDevStatus']
LONG lineGetMessage ['HLINEAPP hLineApp', 'LPLINEMESSAGE lpMessage', 'DWORD dwTimeout']
LONG lineGetNumRings ['HLINE hLine', 'DWORD dwAddressID', 'LPDWORD lpdwNumRings']
LONG lineGetProviderList [' DWORD dwAPIVersion', 'LPLINEPROVIDERLIST lpProviderList']
LONG lineGetStatusMessages ['HLINE hLine', 'LPDWORD lpdwLineStates', 'LPDWORD lpdwAddressStates']
LONG lineGetTranslateCaps ['HLINEAPP hLineApp', 'DWORD dwAPIVersion', 'LPLINETRANSLATECAPS lpTranslateCaps']
LONG lineHandoff ['HCALL hCall', 'LPCWSTR lpszFileName', 'DWORD dwMediaMode']
LONG lineHold ['HCALL hCall']
LONG lineInitialize ['LPHLINEAPP lphLineApp', 'HINSTANCE hInstance', 'LINECALLBACK lpfnCallback', 'LPCWSTR lpszAppName', 'LPDWORD lpdwNumDevs']
LONG lineInitializeEx ['LPHLINEAPP lphLineApp', 'HINSTANCE hInstance', 'LINECALLBACK lpfnCallback', 'LPCWSTR lpszFriendlyAppName', 'LPDWORD lpdwNumDevs', 'LPDWORD lpdwAPIVersion', 'LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams']
LONG lineMakeCall ['HLINE hLine', 'LPHCALL lphCall', 'LPCWSTR lpszDestAddress', 'DWORD dwCountryCode', 'LPLINECALLPARAMS const lpCallParams']
LONG lineMonitorDigits ['HCALL hCall', 'DWORD dwDigitModes']
LONG lineMonitorMedia ['HCALL hCall', 'DWORD dwMediaModes']
LONG lineNegotiateAPIVersion ['HLINEAPP hLineApp', 'DWORD dwDeviceID', 'DWORD dwAPILowVersion', 'DWORD dwAPIHighVersion', 'LPDWORD lpdwAPIVersion', 'LPLINEEXTENSIONID lpExtensionID']
LONG lineNegotiateExtVersion ['HLINEAPP hLineApp', 'DWORD dwDeviceID', 'DWORD dwAPIVersion', 'DWORD dwExtLowVersion', 'DWORD dwExtHighVersion', 'LPDWORD lpdwExtVersion']
LONG lineOpen ['HLINEAPP hLineApp', 'DWORD dwDeviceID', 'LPHLINE lphLine', 'DWORD dwAPIVersion', 'DWORD dwExtVersion', 'DWORD dwCallbackInstance', 'DWORD dwPrivileges', 'DWORD dwMediaModes', 'LPLINECALLPARAMS const lpCallParams']
LONG linePickup ['HLINE hLine', 'DWORD dwAddressID', 'LPHCALL lphCall', 'LPCWSTR lpszDestAddress', 'LPCWSTR lpszGroupID']
LONG linePrepareAddToConference ['HCALL hConfCall', 'LPHCALL lphConsultCall', 'LPLINECALLPARAMS const lpCallParams']
LONG lineRedirect ['HCALL hCall', 'LPCWSTR lpszDestAddress', 'DWORD dwCountryCode']
LONG lineReleaseUserUserInfo [' HCALL hCall']
LONG lineRemoveFromConference ['HCALL hCall']
LONG lineSendUserUserInfo ['HCALL hCall', 'LPCSTR lpsUserUserInfo', 'DWORD dwSize']
LONG lineSetAppPriority [' LPCWSTR lpszAppFilename', 'DWORD dwMediaMode', 'LPLINEEXTENSIONID lpExtensionID', 'DWORD dwRequestMode', 'LPCWSTR lpszExtensionName', 'DWORD dwPriority']
LONG lineSetCallParams ['HCALL hCall', 'DWORD dwBearerMode', 'DWORD dwMinRate', 'DWORD dwMaxRate', 'LPLINEDIALPARAMS const lpDialParams']
LONG lineSetCallPrivilege ['HCALL hCall', 'DWORD dwCallPrivilege']
LONG lineSetCurrentLocation ['HLINEAPP hLineApp', 'DWORD dwLocation']
LONG lineSetDevConfig ['DWORD dwDeviceID', 'LPVOID const lpDeviceConfig', 'DWORD dwSize', 'LPCWSTR lpszDeviceClass']
LONG lineSetMediaMode ['HCALL hCall', 'DWORD dwMediaModes']
LONG lineSetNumRings ['HLINE hLine', 'DWORD dwAddressID', 'DWORD dwNumRings']
LONG lineSetStatusMessages ['HLINE hLine', 'DWORD dwLineStates', 'DWORD dwAddressStates']
LONG lineSetTerminal ['HLINE hLine', 'DWORD dwAddressID', 'HCALL hCall', 'DWORD dwSelect', 'DWORD dwTerminalModes', 'DWORD dwTerminalID', 'DWORD bEnable']
LONG lineSetTollList ['HLINEAPP hLineApp', 'DWORD dwDeviceID', 'LPCWSTR lpszAddressIn', 'DWORD dwTollListOption']
LONG lineSetupConference ['HCALL hCall', 'HLINE hLine', 'LPHCALL lphConfCall', 'LPHCALL lphConsultCall', 'DWORD dwNumParties', 'LPLINECALLPARAMS const lpCallParams']
LONG lineSetupTransfer ['HCALL hCall', 'LPHCALL lphConsultCall', 'LPLINECALLPARAMS const lpCallParams']
LONG lineShutdown ['HLINEAPP hLineApp']
LONG lineSwapHold ['HCALL hActiveCall', 'HCALL hHeldCall']
LONG lineTranslateAddress ['HLINEAPP hLineApp', 'DWORD dwDeviceID', 'DWORD dwAPIVersion', 'LPCWSTR lpszAddressIn', 'DWORD dwCard', 'DWORD dwTranslateOptions', 'LPLINETRANSLATEOUTPUT lpTranslateOutput']
LONG lineTranslateDialog [' HLINEAPP hLineApp', 'DWORD dwDeviceID', 'DWORD dwAPIVersion', 'HWND hwndOwner', 'LPCWSTR lpszAddressIn']
LONG lineUnhold ['HCALL hCall']
LONG phoneClose ['HPHONE hPhone']
LONG phoneConfigDialog ['DWORD dwDeviceID', 'HWND hwndOwner', 'LPCWSTR lpszDeviceClass']
LONG phoneDevSpecific ['HPHONE hPhone', 'LPVOID lpParams', 'DWORD dwSize']
LONG phoneGetDevCaps ['HPHONEAPP hPhoneApp', 'DWORD dwDeviceID', 'DWORD dwAPIVersion', 'DWORD dwExtVersion', 'LPPHONECAPS lpPhoneCaps']
LONG phoneGetGain ['HPHONE hPhone', 'DWORD dwHookSwitchDev', 'LPDWORD lpdwGain']
LONG phoneGetHookSwitch ['HPHONE hPhone', 'LPDWORD lpdwHookSwitchDevs']
LONG phoneGetIcon ['DWORD dwDeviceID', 'LPCWSTR lpszDeviceClass', 'LPHICON lphIcon']
LONG phoneGetID ['HPHONE hPhone', 'LPVARSTRING lpDeviceID', 'LPCWSTR lpszDeviceClass']
LONG phoneGetMessage ['HPHONEAPP hPhoneApp', 'LPPHONEMESSAGE lpMessage', 'DWORD dwTimeout']
LONG phoneGetRing ['HPHONE hPhone', 'LPDWORD lpdwRingMode', 'LPDWORD lpdwVolume']
LONG phoneGetStatus ['HPHONE hPhone', 'LPPHONESTATUS lpPhoneStatus']
LONG phoneGetStatusMessages ['HPHONE hPhone', 'LPDWORD lpdwPhoneStates', 'LPDWORD lpdwButtonModes', 'LPDWORD lpdwButtonStates']
LONG phoneGetVolume ['HPHONE hPhone', 'DWORD dwHookSwitchDev', 'LPDWORD lpdwVolume']
LONG phoneInitializeEx ['LPHPHONEAPP lphPhoneApp', 'HINSTANCE hInstance', 'PHONECALLBACK lpfnCallback', 'LPCWSTR lpszFriendlyAppName', 'LPDWORD lpdwNumDevs', 'LPDWORD lpdwAPIVersion', 'LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams']
LONG phoneNegotiateAPIVersion ['HPHONEAPP hPhoneApp', 'DWORD dwDeviceID', 'DWORD dwAPILowVersion', 'DWORD dwAPIHighVersion', 'LPDWORD lpdwAPIVersion', 'LPPHONEEXTENSIONID lpExtensionID']
LONG phoneNegotiateExtVersion ['HPHONEAPP hPhoneApp', 'DWORD dwDeviceID', 'DWORD dwAPIVersion', 'DWORD dwExtLowVersion', 'DWORD dwExtHighVersion', 'LPDWORD lpdwExtVersion']
LONG phoneOpen ['HPHONEAPP hPhoneApp', 'DWORD dwDeviceID', 'LPHPHONE lphPhone', 'DWORD dwAPIVersion', 'DWORD dwExtVersion', 'DWORD dwCallbackInstance', 'DWORD dwPrivilege']
LONG phoneSetGain ['HPHONE hPhone', 'DWORD dwHookSwitchDev', 'DWORD dwGain']
LONG phoneSetHookSwitch ['HPHONE hPhone', 'DWORD dwHookSwitchDevs', 'DWORD dwHookSwitchMode']
LONG phoneSetRing ['HPHONE hPhone', 'DWORD dwRingMode', 'DWORD dwVolume']
LONG phoneSetStatusMessages ['HPHONE hPhone', 'DWORD dwPhoneStates', 'DWORD dwButtonModes', 'DWORD dwButtonStates']
LONG phoneSetVolume ['HPHONE hPhone', 'DWORD dwHookSwitchDev', 'DWORD dwVolume']
LONG phoneShutdown ['HPHONEAPP hPhoneApp']
extern xAccessibleChildren ['IAccessible* paccContainer', 'LONG iChildStart', 'LONG cChildren', 'VARIANT* rgvarChildren', 'LONG* pcObtained']
extern xAccessibleObjectFromEvent ['HWND hWnd', 'DWORD dwID', 'DWORD dwChild', 'IAccessible** ppacc', 'VARIANT*pvarChild']
extern xAccessibleObjectFromPoint ['POINT ptScreen', 'IAccessible** ppacc', 'VARIANT* pvarChild']
extern xAccessibleObjectFromWindow ['HWND hWnd', 'DWORD dwID', 'REFIID riidInterface', 'void ** ppvObject']
extern xCreateStdAccessibleObject ['HWND hWnd', 'LONG dwID', 'REFIID riidInterface', 'void ** ppvObject']
extern xObjectFromLresult ['LRESULT lResult', 'REFIID riidInterface', 'WPARAM wParam', 'void** ppvObject']
extern xWindowFromAccessibleObject ['IAccessible* pAcc', 'HWND* phWnd']
HKL ImmInstallIMEW ['LPCWSTR lpszIMEFileName', 'LPCWSTR lpszLayoutText']
HWND ImmGetDefaultIMEWnd ['HWND']
UINT ImmGetDescriptionW ['HKL', 'LPWSTR', 'UINT uBufLen']
UINT ImmGetIMEFileNameW ['HKL', 'LPWSTR', 'UINT uBufLen']
DWORD ImmGetProperty ['HKL', 'DWORD']
BOOL ImmIsIME ['HKL']
BOOL ImmSimulateHotKey ['HWND', 'DWORD']
HIMC ImmCreateContext ['void']
BOOL ImmDestroyContext ['HIMC']
HIMC ImmGetContext ['HWND']
BOOL ImmReleaseContext ['HWND', 'HIMC']
HIMC ImmAssociateContext ['HWND', 'HIMC']
BOOL ImmAssociateContextEx ['HWND', 'HIMC', 'DWORD']
LONG ImmGetCompositionStringW ['HIMC', 'DWORD', 'LPVOID', 'DWORD']
BOOL ImmSetCompositionStringW ['HIMC', 'DWORD dwIndex', 'LPCVOID lpComp', 'DWORD', 'LPCVOID lpRead', 'DWORD']
DWORD ImmGetCandidateListCountW ['HIMC', 'LPDWORD lpdwListCount']
DWORD ImmGetCandidateListW ['HIMC', 'DWORD deIndex', 'LPCANDIDATELIST', 'DWORD dwBufLen']
DWORD ImmGetGuideLineW ['HIMC', 'DWORD dwIndex', 'LPWSTR', 'DWORD dwBufLen']
BOOL ImmGetConversionStatus ['HIMC', 'LPDWORD', 'LPDWORD']
BOOL ImmSetConversionStatus ['HIMC', 'DWORD', 'DWORD']
BOOL ImmGetOpenStatus ['HIMC']
BOOL ImmSetOpenStatus ['HIMC', 'BOOL']
BOOL ImmGetCompositionFontW ['HIMC', 'LPLOGFONTW']
BOOL ImmSetCompositionFontW ['HIMC', 'LPLOGFONTW']
BOOL ImmConfigureIMEW ['HKL', 'HWND', 'DWORD', 'LPVOID']
LRESULT ImmEscapeW ['HKL', 'HIMC', 'UINT', 'LPVOID']
DWORD ImmGetConversionListW ['HKL', 'HIMC', 'LPCWSTR', 'LPCANDIDATELIST', 'DWORD dwBufLen', 'UINT uFlag']
BOOL ImmNotifyIME ['HIMC', 'DWORD dwAction', 'DWORD dwIndex', 'DWORD dwValue']
BOOL ImmActivateLayout ['HKL hSelKL']
BOOL ImmSendNotification ['void']
BOOL ImmGetStatusWindowPos ['HIMC', 'LPPOINT']
BOOL ImmSetStatusWindowPos ['HIMC', 'LPPOINT']
BOOL ImmGetCompositionWindow ['HIMC', 'LPCOMPOSITIONFORM']
BOOL ImmSetCompositionWindow ['HIMC', 'LPCOMPOSITIONFORM']
BOOL ImmGetCandidateWindow ['HIMC', 'DWORD', 'LPCANDIDATEFORM']
BOOL ImmSetCandidateWindow ['HIMC', 'LPCANDIDATEFORM']
BOOL ImmIsUIMessageW ['HWND', 'UINT', 'WPARAM', 'LPARAM']
UINT ImmGetVirtualKey ['HWND']
BOOL ImmRegisterWordW ['HKL', 'LPCWSTR lpszReading', 'DWORD', 'LPCWSTR lpszRegister']
BOOL ImmUnregisterWordW ['HKL', 'LPCWSTR lpszReading', 'DWORD', 'LPCWSTR lpszUnregister']
UINT ImmGetRegisterWordStyleW ['HKL', 'UINT nItem', 'LPSTYLEBUFW']
UINT ImmEnumRegisterWordW ['HKL', 'REGISTERWORDENUMPROCW', 'LPCWSTR lpszReading', 'DWORD', 'LPCWSTR lpszRegister', 'LPVOID']
BOOL ImmDisableIME ['DWORD']
DWORD ImmGetImeMenuItemsA ['HIMC', 'DWORD', 'DWORD', 'LPIMEMENUITEMINFOA', 'LPIMEMENUITEMINFOA', 'DWORD']
DWORD ImmGetImeMenuItemsW ['HIMC', 'DWORD', 'DWORD', 'LPIMEMENUITEMINFOW', 'LPIMEMENUITEMINFOW', 'DWORD']
BOOL ImmGetHotKey ['DWORD', 'LPUINT lpuModifiers', 'LPUINT lpuVKey', 'LPHKL']
BOOL ImmSetHotKey ['DWORD', 'UINT', 'UINT', 'HKL']
BOOL ImmGenerateMessage ['HIMC']
LRESULT ImmRequestMessageA ['HIMC', 'WPARAM', 'LPARAM']
LRESULT ImmRequestMessageW ['HIMC', 'WPARAM', 'LPARAM']
HWND ImmCreateSoftKeyboard ['UINT', 'HWND', 'int', 'int']
BOOL ImmDestroySoftKeyboard ['HWND']
BOOL ImmShowSoftKeyboard ['HWND', 'int']
LPINPUTCONTEXT ImmLockIMC ['HIMC']
BOOL ImmUnlockIMC ['HIMC']
DWORD ImmGetIMCLockCount ['HIMC']
HIMCC ImmCreateIMCC ['DWORD']
HIMCC ImmDestroyIMCC ['HIMCC']
LPVOID ImmLockIMCC ['HIMCC']
BOOL ImmUnlockIMCC ['HIMCC']
DWORD ImmGetIMCCLockCount ['HIMCC']
HIMCC ImmReSizeIMCC ['HIMCC', 'DWORD']
DWORD ImmGetIMCCSize ['HIMCC']
BOOL ImeInquire ['LPIMEINFO', 'LPWSTR lpszUIClass', 'DWORD dwSystemInfoFlags']
BOOL ImeConfigure ['HKL', 'HWND', 'DWORD', 'LPVOID']
DWORD ImeConversionListW ['HIMC', 'LPCWSTR', 'LPCANDIDATELIST', 'DWORD dwBufLen', 'UINT uFlag']
BOOL ImeDestroy ['UINT']
LRESULT ImeEscape ['HIMC', 'UINT', 'LPVOID']
BOOL ImeProcessKey ['HIMC', 'UINT', 'LPARAM', 'CONST LPBYTE']
BOOL ImeSelect ['HIMC', 'BOOL']
BOOL ImeSetActiveContext ['HIMC', 'BOOL']
UINT ImeToAsciiEx ['UINT uVirtKey', 'UINT uScaCode', 'CONST LPBYTE lpbKeyState', 'LPDWORD lpdwTransBuf', 'UINT fuState', 'HIMC']
BOOL NotifyIME ['HIMC', 'DWORD', 'DWORD', 'DWORD']
BOOL ImeRegisterWord ['LPCWSTR', 'DWORD', 'LPCWSTR']
BOOL ImeUnregisterWord ['LPCWSTR', 'DWORD', 'LPCWSTR']
UINT ImeGetRegisterWordStyle ['UINT nItem', 'LPSTYLEBUF']
UINT ImeEnumRegisterWord ['REGISTERWORDENUMPROC', 'LPCWSTR', 'DWORD', 'LPCWSTR', 'LPVOID']
BOOL ImeSetCompositionString ['HIMC', 'DWORD dwIndex', 'LPCVOID lpComp', 'DWORD', 'LPCVOID lpRead', 'DWORD']
DWORD ImeGetImeMenuItems ['HIMC hIMC', 'DWORD dwFlags', 'DWORD dwType', 'LPIMEMENUITEMINFO lpParentMenu', 'LPIMEMENUITEMINFO lpMenu', 'DWORD dwSize']
BOOL ImmIsValidIMC ['HIMC hIMC']
BOOL ImmSIPanelState ['UINT dwCmd', 'LPVOID pValue']
void _m_empty ['void']
__m64 _m_from_int ['int _I']
int _m_to_int ['__m64 _M']
__m64 _m_packsswb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_packssdw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_packuswb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_punpckhbw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_punpckhwd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_punpckhdq ['__m64 _MM1', '__m64 _MM2']
__m64 _m_punpcklbw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_punpcklwd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_punpckldq ['__m64 _MM1', '__m64 _MM2']
__m64 _m_packssqd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_packusqd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_packusdw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_punpckehsbw ['__m64 _MM1']
__m64 _m_punpckehswd ['__m64 _MM1']
__m64 _m_punpckehsdq ['__m64 _MM1']
__m64 _m_punpckehubw ['__m64 _MM1']
__m64 _m_punpckehuwd ['__m64 _MM1']
__m64 _m_punpckehudq ['__m64 _MM1']
__m64 _m_punpckelsbw ['__m64 _MM1']
__m64 _m_punpckelswd ['__m64 _MM1']
__m64 _m_punpckelsdq ['__m64 _MM1']
__m64 _m_punpckelubw ['__m64 _MM1']
__m64 _m_punpckeluwd ['__m64 _MM1']
__m64 _m_punpckeludq ['__m64 _MM1']
__m64 _m_paddb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paddw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paddd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paddsb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paddsw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paddsd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paddusb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paddusw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paddusd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubsb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubsw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubsd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubusb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubusw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psubsd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmaddwd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmadduwd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmulhw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmulhuw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmullw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmacsw ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _m_pmacuw ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _m_pmacszw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmacuzw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paccb ['__m64 _MM1']
__m64 _m_paccw ['__m64 _MM1']
__m64 _m_paccd ['__m64 _MM1']
__m64 _m_pmia ['__m64 _MM1', 'int _I1', 'int _I0']
__m64 _m_pmiaph ['__m64 _MM1', 'int _I1', 'int _I0']
__m64 _m_pmiabb ['__m64 _MM1', 'int _I1', 'int _I0']
__m64 _m_pmiabt ['__m64 _MM1', 'int _I1', 'int _I0']
__m64 _m_pmiatb ['__m64 _MM1', 'int _I1', 'int _I0']
__m64 _m_pmiatt ['__m64 _MM1', 'int _I1', 'int _I0']
__m64 _m_psllw ['__m64 _M', '__m64 _Count']
__m64 _m_psllwi ['__m64 _M', 'int _Count']
__m64 _m_pslld ['__m64 _M', '__m64 _Count']
__m64 _m_pslldi ['__m64 _M', 'int _Count']
__m64 _m_psllq ['__m64 _M', '__m64 _Count']
__m64 _m_psllqi ['__m64 _M', 'int _Count']
__m64 _m_psraw ['__m64 _M', '__m64 _Count']
__m64 _m_psrawi ['__m64 _M', 'int _Count']
__m64 _m_psrad ['__m64 _M', '__m64 _Count']
__m64 _m_psradi ['__m64 _M', 'int _Count']
__m64 _m_psraq ['__m64 m', '__m64 _Count']
__m64 _m_psraqi ['__m64 m', 'int _Count']
__m64 _m_psrlw ['__m64 _M', '__m64 _Count']
__m64 _m_psrlwi ['__m64 _M', 'int _Count']
__m64 _m_psrld ['__m64 _M', '__m64 _Count']
__m64 _m_psrldi ['__m64 _M', 'int _Count']
__m64 _m_psrlq ['__m64 _M', '__m64 _Count']
__m64 _m_psrlqi ['__m64 _M', 'int _Count']
__m64 _m_prorw ['__m64 m', '__m64 _Count']
__m64 _m_prorwi ['__m64 m', 'int _Count']
__m64 _m_prord ['__m64 m', '__m64 _Count']
__m64 _m_prordi ['__m64 m', 'int _Count']
__m64 _m_prorq ['__m64 m', '__m64 _Count']
__m64 _m_prorqi ['__m64 m', 'int _Count']
__m64 _m_pand ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pandn ['__m64 _MM1', '__m64 _MM2']
__m64 _m_por ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pxor ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpeqb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpeqw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpeqd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpgtb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpgtub ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpgtw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpgtuw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpgtd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pcmpgtud ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_setzero_si64 ['void']
__m64 _mm_set_pi32 ['int _I1', 'int _I0']
__m64 _mm_set_pi16 ['short _S3', 'short _S2', 'short _S1', 'short _S0']
__m64 _mm_set_pi8 ['char _B7', 'char _B6', 'char _B5', 'char _B4', 'char _B3', 'char _B2', 'char _B1', 'char _B0']
__m64 _mm_set1_pi32 ['int _I']
__m64 _mm_set1_pi16 ['short _S']
__m64 _mm_set1_pi8 ['char _B']
__m64 _mm_setr_pi32 ['int _I1', 'int _I0']
__m64 _mm_setr_pi16 ['short _S3', 'short _S2', 'short _S1', 'short _S0']
__m64 _mm_setr_pi8 ['char _B7', 'char _B6', 'char _B5', 'char _B4', 'char _B3', 'char _B2', 'char _B1', 'char _B0']
void _mm_setwcx ['int _I1', 'int _I0']
int _mm_getwcx ['int _I']
int _m_pextrb ['__m64 _MM1', 'int _C']
int _m_pextrw ['__m64 _MM1', 'int _C']
int _m_pextrd ['__m64 _MM1', 'int _C']
__m64 _m_pinsrb ['__m64 _MM1', 'int _I', 'int _C']
__m64 _m_pinsrw ['__m64 _MM1', 'int _I', 'int _C']
__m64 _m_pinsrd ['__m64 _MM1', 'int _I', 'int _C']
__m64 _m_pmaxsb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmaxsw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmaxsd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmaxub ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmaxuw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pmaxud ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pminsb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pminsw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pminsd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pminub ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pminuw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pminud ['__m64 _MM1', '__m64 _MM2']
int _m_pmovmskb ['__m64 _MM1']
int _m_pmovmskw ['__m64 _MM1']
int _m_pmovmskd ['__m64 _MM1']
__m64 _m_pshufw ['__m64 _MM1', 'int _I']
__m64 _m_pavgb ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pavgw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pavg2b ['__m64 _MM1', '__m64 _MM2']
__m64 _m_pavg2w ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psadabw ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _m_psadawd ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _m_psadzbw ['__m64 _MM1', '__m64 _MM2']
__m64 _m_psadzwd ['__m64 _MM1', '__m64 _MM2']
__m64 _m_paligniq ['__m64 _MM1', '__m64 _MM2', 'int _I']
__m64 _m_cvt_si2pi ['t64 _I']
t64 _m_cvt_pi2si ['__m64 _MM1']
__m64 _mm_abs_pi8 ['__m64 _MM1']
__m64 _mm_abs_pi16 ['__m64 _MM1']
__m64 _mm_abs_pi32 ['__m64 _MM1']
__m64 _mm_absdiff_pu8 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_absdiff_pu16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_absdiff_pu32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_addbhusm_pu8 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_addbhusl_pu8 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_addsubhx_pi16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_avg4_pu8 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_avg4r_pu8 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_merge_si64 ['__m64 _MM1', '__m64 _MM2', 'const int n']
__m64 _mm_wmiabb_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiabt_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiatb_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiatt_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiabbn_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiabtn_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiatbn_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiattn_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiawbb_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiawbt_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiawtb_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiawtt_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiawbbn_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiawbtn_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiawtbn_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_wmiawttn_si64 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_mulhi_pi32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_mulhi_pu32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_mullo_pi32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_mulhir_pi32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_mulhir_pu32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_qmiabb_pi32 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_qmiabt_pi32 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_qmiatb_pi32 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_qmiatt_pi32 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_qmiabbn_pi32 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_qmiabtn_pi32 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_qmiatbn_pi32 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_qmiattn_pi32 ['__m64 _MM1', '__m64 _MM2', '__m64 _MM3']
__m64 _mm_qmulm_pi16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_qmulmr_pi16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_qmulm_pi32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_qmulmr_pi32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_subaddhx_pi16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_addc_pu16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_addc_pu32 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_mulhir_pi16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_mulhir_pu16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_maddx_pi16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_maddx_pu16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_msub_pi16 ['__m64 _MM1', '__m64 _MM2']
__m64 _mm_msub_pu16 ['__m64 _MM1', '__m64 _MM2']
BOOL CredWriteW ['IN PCREDENTIALW Credential', 'IN DWORD Flags']
BOOL CredWriteA ['IN PCREDENTIALA Credential', 'IN DWORD Flags']
BOOL CredReadW ['IN LPCWSTR TargetName', 'IN DWORD Type', 'IN DWORD Flags', 'OUT PCREDENTIALW *Credential']
BOOL CredReadA ['IN LPCSTR TargetName', 'IN DWORD Type', 'IN DWORD Flags', 'OUT PCREDENTIALA *Credential']
BOOL CredEnumerateW ['IN LPCWSTR Filter', 'IN DWORD Flags', 'OUT DWORD *Count', 'OUT PCREDENTIALW **Credential']
BOOL CredEnumerateA ['IN LPCSTR Filter', 'IN DWORD Flags', 'OUT DWORD *Count', 'OUT PCREDENTIALA **Credential']
BOOL CredWriteDomainCredentialsW ['IN PCREDENTIAL_TARGET_INFORMATIONW TargetInfo', 'IN PCREDENTIALW Credential', 'IN DWORD Flags']
BOOL CredWriteDomainCredentialsA ['IN PCREDENTIAL_TARGET_INFORMATIONA TargetInfo', 'IN PCREDENTIALA Credential', 'IN DWORD Flags']
BOOL CredReadDomainCredentialsW ['IN PCREDENTIAL_TARGET_INFORMATIONW TargetInfo', 'IN DWORD Flags', 'OUT DWORD *Count', 'OUT PCREDENTIALW **Credential']
BOOL CredReadDomainCredentialsA ['IN PCREDENTIAL_TARGET_INFORMATIONA TargetInfo', 'IN DWORD Flags', 'OUT DWORD *Count', 'OUT PCREDENTIALA **Credential']
BOOL CredDeleteW ['IN LPCWSTR TargetName', 'IN DWORD Type', 'IN DWORD Flags']
BOOL CredDeleteA ['IN LPCSTR TargetName', 'IN DWORD Type', 'IN DWORD Flags']
BOOL CredRenameW ['IN LPCWSTR OldTargetName', 'IN LPCWSTR NewTargetName', 'IN DWORD Type', 'IN DWORD Flags']
BOOL CredRenameA ['IN LPCSTR OldTargetName', 'IN LPCSTR NewTargetName', 'IN DWORD Type', 'IN DWORD Flags']
BOOL CredGetTargetInfoW ['IN LPCWSTR TargetName', 'IN DWORD Flags', 'OUT PCREDENTIAL_TARGET_INFORMATIONW *TargetInfo']
BOOL CredGetTargetInfoA ['IN LPCSTR TargetName', 'IN DWORD Flags', 'OUT PCREDENTIAL_TARGET_INFORMATIONA *TargetInfo']
BOOL CredMarshalCredentialW ['IN CRED_MARSHAL_TYPE CredType', 'IN PVOID Credential', 'OUT LPWSTR *MarshaledCredential']
BOOL CredMarshalCredentialA ['IN CRED_MARSHAL_TYPE CredType', 'IN PVOID Credential', 'OUT LPSTR *MarshaledCredential']
BOOL CredUnmarshalCredentialW ['IN LPCWSTR MarshaledCredential', 'OUT PCRED_MARSHAL_TYPE CredType', 'OUT PVOID *Credential']
BOOL CredUnmarshalCredentialA ['IN LPCSTR MarshaledCredential', 'OUT PCRED_MARSHAL_TYPE CredType', 'OUT PVOID *Credential']
BOOL CredIsMarshaledCredentialW ['IN LPCWSTR MarshaledCredential']
BOOL CredIsMarshaledCredentialA ['IN LPCSTR MarshaledCredential']
BOOL CredGetSessionTypes ['IN DWORD MaximumPersistCount', 'OUT LPDWORD MaximumPersist']
VOID CredFree ['IN PVOID Buffer']
DWORD CredUIPromptForCredentialsW ['PCREDUI_INFOW pUiInfo', 'PCWSTR pszTargetName', 'PCtxtHandle pContext', 'DWORD dwAuthError', 'PWSTR pszUserName', 'ULONG ulUserNameBufferSize', 'PWSTR pszPassword', 'ULONG ulPasswordBufferSize', 'BOOL *save', 'DWORD dwFlags']
DWORD CredUIPromptForCredentialsA ['PCREDUI_INFOA pUiInfo', 'PCSTR pszTargetName', 'PCtxtHandle pContext', 'DWORD dwAuthError', 'PSTR pszUserName', 'ULONG ulUserNameBufferSize', 'PSTR pszPassword', 'ULONG ulPasswordBufferSize', 'BOOL *save', 'DWORD dwFlags']
DWORD CredUIParseUserNameW ['PCWSTR pszUserName', 'PWSTR pszUser', 'ULONG ulUserBufferSize', 'PWSTR pszDomain', 'ULONG ulDomainBufferSize']
DWORD CredUIParseUserNameA ['PCSTR pszUserName', 'PSTR pszUser', 'ULONG ulUserBufferSize', 'PSTR pszDomain', 'ULONG ulDomainBufferSize']
DWORD CredUICmdLinePromptForCredentialsW ['PCWSTR pszTargetName', 'PCtxtHandle pContext', 'DWORD dwAuthError', 'PWSTR UserName', 'ULONG ulUserBufferSize', 'PWSTR pszPassword', 'ULONG ulPasswordBufferSize', 'PBOOL pfSave', 'DWORD dwFlags']
DWORD CredUICmdLinePromptForCredentialsA ['PCSTR pszTargetName', 'PCtxtHandle pContext', 'DWORD dwAuthError', 'PSTR UserName', 'ULONG ulUserBufferSize', 'PSTR pszPassword', 'ULONG ulPasswordBufferSize', 'PBOOL pfSave', 'DWORD dwFlags']
DWORD CredUIConfirmCredentialsW ['PCWSTR pszTargetName', 'BOOL bConfirm']
DWORD CredUIConfirmCredentialsA ['PCSTR pszTargetName', 'BOOL bConfirm']
BOOLAPI InternetDebugGetLocalTime ['OUT SYSTEMTIME * pstLocalTime', 'OUT DWORD * pdwReserved']
BOOLAPI HttpCheckDavComplianceA ['IN LPCSTR lpszUrl', 'IN LPCSTR lpszComplianceToken', 'IN OUT LPBOOL lpfFound', 'IN HWND hWnd', 'IN LPVOID lpvReserved']
BOOLAPI HttpCheckDavComplianceW ['IN LPCWSTR lpszUrl', 'IN LPCWSTR lpszComplianceToken', 'IN OUT LPBOOL lpfFound', 'IN HWND hWnd', 'IN LPVOID lpvReserved']
BOOLAPI HttpCheckCachedDavStatusA ['IN LPCSTR lpszUrl', 'IN OUT LPDWORD lpdwStatus']
BOOLAPI HttpCheckCachedDavStatusW ['IN LPCWSTR lpszUrl', 'IN OUT LPDWORD lpdwStatus']
BOOLAPI HttpCheckDavCollectionA ['IN LPCSTR lpszUrl', 'IN OUT LPBOOL lpfFound', 'IN HWND hWnd', 'IN LPVOID lpvReserved']
BOOLAPI HttpCheckDavCollectionW ['IN LPCWSTR lpszUrl', 'IN OUT LPBOOL lpfFound', 'IN HWND hWnd', 'IN LPVOID lpvReserved']
BOOLAPI IsUrlCacheEntryExpiredA ['IN LPCSTR lpszUrlName', 'IN DWORD dwFlags', 'IN OUT FILETIME* pftLastModified']
BOOLAPI IsUrlCacheEntryExpiredW ['IN LPCWSTR lpszUrlName', 'IN DWORD dwFlags', 'IN OUT FILETIME* pftLastModified']
BOOLAPI CreateUrlCacheContainerA ['IN LPCSTR Name', 'IN LPCSTR lpCachePrefix', 'LPCSTR lpszCachePath', 'IN DWORD KBCacheLimit', 'IN DWORD dwContainerType', 'IN DWORD dwOptions', 'IN OUT LPVOID pvBuffer', 'IN OUT LPDWORD cbBuffer']
BOOLAPI CreateUrlCacheContainerW ['IN LPCWSTR Name', 'IN LPCWSTR lpCachePrefix', 'LPCWSTR lpszCachePath', 'IN DWORD KBCacheLimit', 'IN DWORD dwContainerType', 'IN DWORD dwOptions', 'IN OUT LPVOID pvBuffer', 'IN OUT LPDWORD cbBuffer']
BOOLAPI DeleteUrlCacheContainerA ['IN LPCSTR Name', 'IN DWORD dwOptions']
BOOLAPI DeleteUrlCacheContainerW ['IN LPCWSTR Name', 'IN DWORD dwOptions']
BOOLAPI FindNextUrlCacheContainerA ['IN HANDLE hEnumHandle', 'OUT LPINTERNET_CACHE_CONTAINER_INFOA lpContainerInfo', 'IN OUT LPDWORD lpdwContainerInfoBufferSize']
BOOLAPI FindNextUrlCacheContainerW ['IN HANDLE hEnumHandle', 'OUT LPINTERNET_CACHE_CONTAINER_INFOW lpContainerInfo', 'IN OUT LPDWORD lpdwContainerInfoBufferSize']
BOOLAPI FreeUrlCacheSpaceA ['IN LPCSTR lpszCachePath', 'IN DWORD dwSize', 'IN DWORD dwFilter']
BOOLAPI FreeUrlCacheSpaceW ['IN LPCWSTR lpszCachePath', 'IN DWORD dwSize', 'IN DWORD dwFilter']
BOOLAPI GetUrlCacheConfigInfoA ['OUT LPINTERNET_CACHE_CONFIG_INFOA lpCacheConfigInfo', 'IN OUT LPDWORD lpdwCacheConfigInfoBufferSize', 'IN DWORD dwFieldControl']
BOOLAPI GetUrlCacheConfigInfoW ['OUT LPINTERNET_CACHE_CONFIG_INFOW lpCacheConfigInfo', 'IN OUT LPDWORD lpdwCacheConfigInfoBufferSize', 'IN DWORD dwFieldControl']
BOOLAPI SetUrlCacheConfigInfoA ['IN LPINTERNET_CACHE_CONFIG_INFOA lpCacheConfigInfo', 'IN DWORD dwFieldControl']
BOOLAPI SetUrlCacheConfigInfoW ['IN LPINTERNET_CACHE_CONFIG_INFOW lpCacheConfigInfo', 'IN DWORD dwFieldControl']
BOOLAPI UpdateUrlCacheContentPath ['LPSTR szNewPath']
BOOLAPI RegisterUrlCacheNotification ['IN HWND hWnd', 'IN UINT uMsg', 'IN GROUPID gid', 'IN DWORD dwOpsFilter', 'IN DWORD dwReserved']
BOOL GetUrlCacheHeaderData ['IN DWORD nIdx', 'OUT LPDWORD lpdwData']
BOOL SetUrlCacheHeaderData ['IN DWORD nIdx', 'IN DWORD dwData']
BOOL IncrementUrlCacheHeaderData ['IN DWORD nIdx', 'OUT LPDWORD lpdwData']
BOOL LoadUrlCacheContent ['']
BOOL GetUrlCacheContainerInfoA ['IN LPSTR lpszUrlName', 'OUT LPINTERNET_CACHE_CONTAINER_INFOA lpContainerInfo', 'IN OUT LPDWORD lpdwContainerInfoBufferSize', 'IN DWORD dwOptions']
BOOL GetUrlCacheContainerInfoW ['IN LPWSTR lpszUrlName', 'OUT LPINTERNET_CACHE_CONTAINER_INFOW lpContainerInfo', 'IN OUT LPDWORD lpdwContainerInfoBufferSize', 'IN DWORD dwOptions']
INTERNETAPI InternetGetDialEngineW ['IN LPWSTR pwzConnectoid', 'IN IDialEventSink * pdes', 'OUT IDialEngine ** ppde']
INTERNETAPI InternetGetDialBrandingW ['IN LPWSTR pwzConnectoid', 'OUT IDialBranding ** ppdb']
BOOL DoConnectoidsExist ['void']
BOOL GetDiskInfoA ['IN PSTR pszPath', 'IN OUT PDWORD pdwClusterSize', 'IN OUT PDWORDLONG pdlAvail', 'IN OUT PDWORDLONG pdlTotal']
BOOL PerformOperationOverUrlCacheA ['IN PCSTR pszUrlSearchPattern', 'IN DWORD dwFlags', 'IN DWORD dwFilter', 'IN GROUPID GroupId', 'OUT PVOID pReserved1', 'IN OUT PDWORD pdwReserved2', 'IN PVOID pReserved3', 'IN CACHE_OPERATOR op', 'IN OUT PVOID pOperatorData']
BOOL IsProfilesCapable ['']
BOOLAPI ImportCookieFileA ['IN LPCSTR szFilename']
BOOLAPI ImportCookieFileW ['IN LPCWSTR szFilename']
BOOLAPI ExportCookieFileA ['IN LPCSTR szFilename', 'BOOL fAppend']
BOOLAPI ExportCookieFileW ['IN LPCWSTR szFilename', 'BOOL fAppend']
BOOLAPI IsDomainLegalCookieDomainA ['IN LPCSTR pchDomain', 'IN LPCSTR pchFullDomain']
BOOLAPI IsDomainLegalCookieDomainW ['IN LPCWSTR pchDomain', 'IN LPCWSTR pchFullDomain']
HBITMAP CreateColorBitmap ['int cx', 'int cy']
HBITMAP CreateMonoBitmap ['int cx', 'int cy']
void ImageList_CopyDitherImage ['HIMAGELIST himlDest', 'WORD iDst', 'int xDst', 'int yDst', 'HIMAGELIST himlSrc', 'int iSrc', 'UINT fStyle']
BOOL InitializeTSC ['HINSTANCE hInst']
BOOL UninitializeTSC ['']
void CeLogSetZones ['DWORD dwZoneUser', ' DWORD dwZoneCE', ' DWORD dwZoneProcess']
BOOL CeLogGetZones ['LPDWORD lpdwZoneUser', ' LPDWORD lpdwZoneCE', ' LPDWORD lpdwZoneProcess', ' LPDWORD lpdwAvailableZones']
BOOL CeLogReSync ['']
BOOL CeGetUserNotificationPreferences ['HWND hWndParent', 'PCE_USER_NOTIFICATION lpNotification']
HANDLE CeSetUserNotificationEx ['HANDLE hNotification', 'CE_NOTIFICATION_TRIGGER *pcnt', 'CE_USER_NOTIFICATION *pceun']
BOOL CeClearUserNotification ['HANDLE hNotification']
BOOL CeGetUserNotification ['HANDLE hNotification', 'DWORD cBufferSize', 'LPDWORD pcBytesNeeded', 'LPBYTE pBuffer']
BOOL CeGetUserNotificationHandles ['HANDLE *rghNotifications', 'DWORD cHandles', 'LPDWORD pcHandlesNeeded']
HANDLE CeSetUserNotification ['HANDLE hNotification', 'TCHAR *pwszAppName', 'SYSTEMTIME *lpTime', 'PCE_USER_NOTIFICATION lpUserNotification']
BOOL CeRunAppAtTime ['TCHAR *pwszAppName', 'SYSTEMTIME *lpTime']
BOOL CeRunAppAtEvent ['TCHAR *pwszAppName', 'LONG lWhichEvent']
BOOL CeHandleAppNotifications ['TCHAR *pwszAppName']
BOOL CeSetProcessVersion ['HANDLE hProcess', 'DWORD dwVersion']
BOOL DMAGetAdapter ['IN PDEVICE_DMA_REQUIREMENT_INFO pDeviceDmaRequirementInfo', ' IN OUT PCE_DMA_ADAPTER pDmaAdapter']
DMA_CHANNEL_HANDLE DMAAllocateChannel ['IN PCE_DMA_ADAPTER pDmaAdapter', 'IN ULONG ulRequestedChannel', 'IN ULONG ulAddressSpace', 'IN PHYSICAL_ADDRESS phDeviceIoAddress']
BOOL DMAFreeChannel ['IN DMA_CHANNEL_HANDLE Channel']
BOOL DMAIssueTransfer ['IN HANDLE hDmaChannel', 'IN PDMA_TRANSFER_HANDLE phDmaHandle', 'IN DWORD dwFlags', 'IN PHYSICAL_ADDRESS SystemMemoryPhysicalAddress', 'IN PVOID CurrentVa', 'IN ULONG Length', 'IN HANDLE hNotifyHandle', 'IN PVOID Context1', 'IN PVOID Context2', 'IN PHYSICAL_ADDRESS phOpDeviceIoAddress']
BOOL DMAIssueMultiBufferTransfer ['IN HANDLE hDmaChannel', 'IN PDMA_TRANSFER_HANDLE phDmaHandle', 'IN DWORD dwFlags', 'IN DWORD dwNumOfTransfer', 'CE_DMA_BUFFER_BLOCK pCeDmaBufferBlock[]', 'IN HANDLE hNotifyHandle', 'IN PVOID Context1', 'IN PVOID Context2', 'IN PHYSICAL_ADDRESS phOpDeviceIoAddress']
BOOL DMACancelTransfer ['IN DMA_TRANSFER_HANDLE DmaTransferHandle']
BOOL DMAGetContexts ['IN DMA_TRANSFER_HANDLE hDmaTransferHandle', 'OUT PVOID * pContext1', 'OUT PVOID * pContext2']
BOOL DMAStartTransfer ['IN DMA_TRANSFER_HANDLE hDmaTransferHandle']
BOOL DMACloseTransfer ['IN DMA_TRANSFER_HANDLE DmaTransferHandle']
BOOL DMAGetStatus ['IN DMA_TRANSFER_HANDLE hDmaTransferHandle', 'OUT PDWORD lpCompletedLength', 'OUT PDWORD lpCompletionCode']
BOOL DMAIssueRawTransfer ['IN OUT DMA_TRANSFER_HANDLE * phDmaHandle', 'IN HANDLE hDmaChannel', 'IN PVOID lpInPtr', 'IN DWORD nInLen', 'IN HANDLE hNotifyHandle', 'IN PVOID NotifyContext1', 'PVOID NotifyContext2']
BOOL DMARawTransferControl ['IN DMA_TRANSFER_HANDLE hDmaHandle', 'IN DWORD dwIoControl', 'IN PVOID lpInPtr', 'IN DWORD nInLen', 'IN OUT LPVOID lpOutBuffer', 'IN DWORD nOutBufferSize', 'IN LPDWORD lpBytesReturned']
PVOID OALDMAAllocBuffer ['IN PCE_DMA_ADAPTER Adapter', 'IN ULONG Length', 'OUT PPHYSICAL_ADDRESS LogicalAddress', 'IN BOOLEAN CacheEnabled']
VOID OALDMAFreeBuffer ['IN PCE_DMA_ADAPTER Adapter', 'IN ULONG Length', 'IN PHYSICAL_ADDRESS LogicalAddress', 'IN PVOID VirtualAddress', 'IN BOOLEAN CacheEnabled']
DMA_BUFFER_HANDLE DMAOpenBuffer ['IN PCE_DMA_ADAPTER pDmaAdapter', 'IN DWORD dwNumBuffer', 'IN const PVOID pBufferArray[]', 'IN const DWORD aLength[]']
DWORD DMAGetBufferPhysAddr ['IN DMA_BUFFER_HANDLE hBuffer', 'IN DWORD NumOfBufferBlock', 'IN OUT CE_DMA_BUFFER_BLOCK ceDmaBufferBlockArray[]']
BOOL DMATransferOnBlocks ['IN DMA_BUFFER_HANDLE hBuffer', 'IN HANDLE hDmaChannel', 'IN OUT PDMA_TRANSFER_HANDLE phDmaHandle', 'IN DWORD dwFlags', 'IN PVOID pBufferContext', 'IN HANDLE hNotifyHandle', 'IN PVOID Context1', 'IN PVOID Context2', 'IN PHYSICAL_ADDRESS phOpDeviceIoAddress']
BOOL DMAFlushBlockBuffer ['IN DMA_BUFFER_HANDLE hBuffer']
BOOL DMACloseBuffer ['IN DMA_BUFFER_HANDLE hBuffer']
BOOL AuthHelpValidateUserA ['PSTR pszRemoteUser', 'PSTR pszPassword', 'TCHAR *pszACL', 'DWORD dwFlags']
BOOL AuthHelpValidateUserW ['PWSTR wszRemoteUser', 'PWSTR wszPassword', 'TCHAR *pszACL', 'DWORD dwFlags']
BOOL AuthHelpValidateUser ['TCHAR *pszRemoteUser', 'TCHAR *pszPassword', 'TCHAR * pszACL', 'DWORD dwFlags']
BOOL IsAccessAllowed ['TCHAR *pszRemoteUser', 'TCHAR *pszRemoteUserGroups', 'TCHAR *pszACL', 'BOOL fPeek']
BOOL IsAccessAllowedExA ['const CHAR *pszRemoteUser', 'const CHAR *pszRemoteUserGroups', 'const CHAR *pszACL', 'DWORD dwFlags']
BOOL IsAccessAllowedExW ['const WCHAR *pszRemoteUser', 'const WCHAR *pszRemoteUserGroups', 'const WCHAR *pszACL', 'DWORD dwFlags']
BOOL AuthHelpUnload ['']
BOOL AuthHelpInitialize ['']
BOOL AuthIsNTLM ['']
HKEY AuthHelpOpenUserKeyA ['PSTR pszApp', 'PSTR pszRemoteUser']
HKEY AuthHelpOpenUserKeyW ['PWSTR pszApp', 'PWSTR pszRemoteUser']
DWORD FSDMGR_GetDiskInfo ['HDSK hDsk', 'PFDI pfdi']
DWORD FSDMGR_ReadDiskEx ['PFSGI pfsgi', 'PFSGR pfsgr']
DWORD FSDMGR_WriteDiskEx ['PFSGI pfsgi', 'PFSGR pfsgr']
HVOL FSDMGR_RegisterVolume ['HDSK hDsk', 'PCWSTR pwsName', 'PVOLUME pVolume']
HVOL FSDMGR_GetVolumeHandle ['HDSK hDsk']
void FSDMGR_DeregisterVolume ['HVOL hVol']
HANDLE FSDMGR_CreateFileHandle ['HVOL hVol', 'HANDLE hProc', 'PFILE pFile']
HANDLE FSDMGR_CreateSearchHandle ['HVOL hVol', 'HANDLE hProc', 'PSEARCH pSearch']
BOOL FSDMGR_GetRegistryValue ['HDSK hDsk', 'PCTSTR szValueName', 'PDWORD pdwValue']
BOOL FSDMGR_GetRegistryFlag ['HDSK pDsk', 'const TCHAR *szValueName', 'PDWORD pdwFlag', 'DWORD dwSet']
LRESULT FSDMGR_GetMountFlags ['HVOL hVol', 'DWORD* pMountFlags']
LRESULT FSDMGR_AsyncEnterVolume ['HVOL hVol', 'HANDLE* phLock', 'LPVOID* ppLockData']
LRESULT FSDMGR_AsyncExitVolume ['HANDLE hLock', 'LPVOID pLockData']
BOOL FSDMGR_GetDiskName ['HDSK pDsk', 'TCHAR *szDiskName']
BOOL FSDMGR_AdvertiseInterface ['const GUID *pGuid', 'LPCWSTR lpszName', 'BOOL fAdd']
DWORD FSDMGR_FormatVolume ['HDSK pDsk', 'LPVOID pParams']
DWORD FSDMGR_ScanVolume ['HDSK pDsk', 'LPVOID pParams']
LRESULT FSDMGR_ParseSecurityDescriptor ['PSECURITY_ATTRIBUTES pSecurityAttributes', 'PSECURITY_DESCRIPTOR* ppSecurityDescriptor', 'DWORD* pSecurityDescriptorSize']
DWORD FSDMGR_CreateCache ['HDSK pDsk', 'DWORD dwStart', 'DWORD dwEnd', 'DWORD dwCacheSize', 'DWORD dwBlockSize', 'DWORD dwCreateFlags']
DWORD FSDMGR_DeleteCache ['DWORD dwCacheId']
DWORD FSDMGR_ResizeCache ['DWORD dwCacheId', 'DWORD dwSize', 'DWORD dwResizeFlags']
DWORD FSDMGR_CachedRead ['DWORD dwCacheId', 'DWORD dwBlockNum', 'DWORD dwNumBlocks', 'PVOID pBuffer', 'DWORD dwReadFlags']
DWORD FSDMGR_CachedWrite ['DWORD dwCacheId', 'DWORD dwBlockNum', 'DWORD dwNumBlocks', 'PVOID pBuffer', 'DWORD dwWriteFlags']
DWORD FSDMGR_FlushCache ['DWORD dwCacheId', 'PSECTOR_LIST_ENTRY pSectorList', 'DWORD dwNumEntries', 'DWORD dwFlushFlags']
DWORD FSDMGR_SyncCache ['DWORD dwCacheId', 'PSECTOR_LIST_ENTRY pSectorList', 'DWORD dwNumEntries', 'DWORD dwSyncFlags']
DWORD FSDMGR_InvalidateCache ['DWORD dwCacheId', 'PSECTOR_LIST_ENTRY pSectorList', 'DWORD dwNumEntries', 'DWORD dwFlags']
BOOL FSDMGR_CacheIoControl ['DWORD dwCacheId', 'DWORD dwIoControlCode', 'LPVOID lpInBuf', 'DWORD nInBufSize', 'LPVOID lpOutBuf', 'DWORD nOutBufSize', 'LPDWORD lpBytesReturned', 'LPOVERLAPPED lpOverlapped']
HDSK FSDMGR_DeviceHandleToHDSK ['HANDLE hDisk']
CARD_CLIENT_HANDLE CardRegisterClient ['CLIENT_CALLBACK CallBackFn', 'PCARD_REGISTER_PARMS pParms']
STATUS CardDeregisterClient ['CARD_CLIENT_HANDLE hCardClient']
STATUS CardGetFirstTuple ['PCARD_TUPLE_PARMS pGetTupleParms']
STATUS CardGetNextTuple ['PCARD_TUPLE_PARMS pGetTupleParms']
STATUS CardGetTupleData ['PCARD_DATA_PARMS pGetTupleData']
STATUS CardGetParsedTuple ['CARD_SOCKET_HANDLE hSocket', 'UINT8 uDesiredTuple', 'PVOID pBuf', 'PUINT32 pnItems']
STATUS CardRequestExclusive ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSocket']
STATUS CardReleaseExclusive ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSocket']
STATUS CardRequestSocketMask ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSock', 'UINT16 fEventMask']
STATUS CardReleaseSocketMask ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSock']
STATUS CardGetEventMask ['CARD_CLIENT_HANDLE hCardClient', 'PCARD_EVENT_MASK_PARMS pMaskParms']
STATUS CardSetEventMask ['CARD_CLIENT_HANDLE hCardClient', 'PCARD_EVENT_MASK_PARMS pMaskParms']
STATUS CardResetFunction ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSock']
CARD_WINDOW_HANDLE CardRequestWindow ['CARD_CLIENT_HANDLE hCardClient', 'PCARD_WINDOW_PARMS pCardWinParms']
STATUS CardReleaseWindow ['CARD_WINDOW_HANDLE hCardWin']
STATUS CardModifyWindow ['CARD_WINDOW_HANDLE hCardWindow', 'UINT16 fAttributes', 'UINT8 fAccessSpeed']
PVOID CardMapWindow ['CARD_WINDOW_HANDLE hCardWindow', 'UINT32 uCardAddress', 'UINT32 uSize', 'PUINT32 pGranularity']
STATUS CardGetStatus ['PCARD_STATUS pStatus']
STATUS CardRequestIRQ ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSocket', 'CARD_ISR ISRFunction', 'UINT32 uISRContextData']
STATUS CardReleaseIRQ ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSocket']
STATUS CardRequestConfiguration ['CARD_CLIENT_HANDLE hCardClient', 'PCARD_CONFIG_INFO pParms']
STATUS CardModifyConfiguration ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSock', 'PUINT16 fAttributes']
STATUS CardReleaseConfiguration ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSock']
STATUS CardAccessConfigurationRegister ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSock', 'UINT8 rw_flag', 'UINT8 offset', 'UINT8 *pValue']
STATUS CardPowerOn ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSock']
STATUS CardPowerOff ['CARD_CLIENT_HANDLE hCardClient', 'CARD_SOCKET_HANDLE hSock']
RPC_ENTRY NdrProxyInitialize ['void * This', 'PRPC_MESSAGE pRpcMsg', 'PMIDL_STUB_MESSAGE pStubMsg', 'PMIDL_STUB_DESC pStubDescriptor', 'unsigned int ProcNum']
RPC_ENTRY NdrProxyGetBuffer ['void * This', 'PMIDL_STUB_MESSAGE pStubMsg']
RPC_ENTRY NdrProxySendReceive ['void *This', 'MIDL_STUB_MESSAGE *pStubMsg']
RPC_ENTRY NdrProxyFreeBuffer ['void *This', 'MIDL_STUB_MESSAGE *pStubMsg']
RPC_ENTRY NdrProxyErrorHandler ['DWORD dwExceptionCode']
RPC_ENTRY NdrStubInitialize ['PRPC_MESSAGE pRpcMsg', 'PMIDL_STUB_MESSAGE pStubMsg', 'PMIDL_STUB_DESC pStubDescriptor', 'IRpcChannelBuffer * pRpcChannelBuffer']
RPC_ENTRY NdrStubInitializePartial ['PRPC_MESSAGE pRpcMsg', 'PMIDL_STUB_MESSAGE pStubMsg', 'PMIDL_STUB_DESC pStubDescriptor', 'IRpcChannelBuffer * pRpcChannelBuffer', 'unsigned long RequestedBufferSize']
RPC_ENTRY NdrStubGetBuffer ['IRpcStubBuffer * This', 'IRpcChannelBuffer * pRpcChannelBuffer', 'PMIDL_STUB_MESSAGE pStubMsg']
RPC_ENTRY NdrStubErrorHandler ['DWORD dwExceptionCode']
RPC_ENTRY NdrDllGetClassObject ['IN REFCLSID rclsid', 'IN REFIID riid', 'OUT void ** ppv', 'IN const ProxyFileInfo ** pProxyFileList', 'IN const CLSID * pclsid', 'IN CStdPSFactoryBuffer * pPSFactoryBuffer']
RPC_ENTRY NdrDllCanUnloadNow ['IN CStdPSFactoryBuffer * pPSFactoryBuffer']
RPC_ENTRY NdrDllRegisterProxy ['IN HMODULE hDll', 'IN const ProxyFileInfo ** pProxyFileList', 'IN const CLSID * pclsid']
RPC_ENTRY NdrDllUnregisterProxy ['IN HMODULE hDll', 'IN const ProxyFileInfo ** pProxyFileList', 'IN const CLSID * pclsid']
BOOL USBDeviceAttach ['USB_HANDLE hDevice', 'LPCUSB_FUNCS lpUsbFuncs', 'LPCUSB_INTERFACE lpInterface', 'LPCWSTR szUniqueDriverId', 'LPBOOL fAcceptControl', 'LPCUSB_DRIVER_SETTINGS lpDriverSettings', 'DWORD dwUnused']
BOOL USBInstallDriver ['LPCWSTR szDriverLibFile']
BOOL USBUnInstallDriver ['']
VOID GetUSBDVersion ['LPDWORD lpdwMajorVersion', 'LPDWORD lpdwMinorVersion']
BOOL RegisterClientDriverID ['LPCWSTR szUniqueDriverId']
BOOL UnRegisterClientDriverID ['LPCWSTR szUniqueDriverId']
BOOL RegisterClientSettings ['LPCWSTR lpszDriverLibFile', 'LPCWSTR lpszUniqueDriverId', 'LPCWSTR szReserved', 'LPCUSB_DRIVER_SETTINGS lpDriverSettings']
BOOL UnRegisterClientSettings ['LPCWSTR lpszUniqueDriverId', 'LPCWSTR szReserved', 'LPCUSB_DRIVER_SETTINGS lpDriverSettings']
HKEY OpenClientRegistryKey ['LPCWSTR szUniqueDriverId']
BOOL GetClientRegistryPath ['LPWSTR szRegistryPath', 'DWORD dwRegPathUnit', 'LPCWSTR szUniqueDriverId']
BOOL CryptAcquireContextA ['HCRYPTPROV *phProv', 'LPCSTR szContainer', 'LPCSTR szProvider', 'DWORD dwProvType', 'DWORD dwFlags']
BOOL CryptAcquireContextW ['HCRYPTPROV *phProv', 'LPCWSTR szContainer', 'LPCWSTR szProvider', 'DWORD dwProvType', 'DWORD dwFlags']
BOOL CryptReleaseContext ['HCRYPTPROV hProv', 'DWORD dwFlags']
BOOL CryptGenKey ['HCRYPTPROV hProv', 'ALG_ID Algid', 'DWORD dwFlags', 'HCRYPTKEY *phKey']
BOOL CryptDeriveKey ['HCRYPTPROV hProv', 'ALG_ID Algid', 'HCRYPTHASH hBaseData', 'DWORD dwFlags', 'HCRYPTKEY *phKey']
BOOL CryptDestroyKey ['HCRYPTKEY hKey']
BOOL CryptSetKeyParam ['HCRYPTKEY hKey', 'DWORD dwParam', 'CONST BYTE *pbData', 'DWORD dwFlags']
BOOL CryptGetKeyParam ['HCRYPTKEY hKey', 'DWORD dwParam', 'BYTE *pbData', 'DWORD *pdwDataLen', 'DWORD dwFlags']
BOOL CryptSetHashParam ['HCRYPTHASH hHash', 'DWORD dwParam', 'CONST BYTE *pbData', 'DWORD dwFlags']
BOOL CryptGetHashParam ['HCRYPTHASH hHash', 'DWORD dwParam', 'BYTE *pbData', 'DWORD *pdwDataLen', 'DWORD dwFlags']
BOOL CryptSetProvParam ['HCRYPTPROV hProv', 'DWORD dwParam', 'CONST BYTE *pbData', 'DWORD dwFlags']
BOOL CryptGetProvParam ['HCRYPTPROV hProv', 'DWORD dwParam', 'BYTE *pbData', 'DWORD *pdwDataLen', 'DWORD dwFlags']
BOOL CryptGetUserKey ['HCRYPTPROV hProv', 'DWORD dwKeySpec', 'HCRYPTKEY *phUserKey']
BOOL CryptExportKey ['HCRYPTKEY hKey', 'HCRYPTKEY hExpKey', 'DWORD dwBlobType', 'DWORD dwFlags', 'BYTE *pbData', 'DWORD *pdwDataLen']
BOOL CryptEncrypt ['HCRYPTKEY hKey', 'HCRYPTHASH hHash', 'BOOL Final', 'DWORD dwFlags', 'BYTE *pbData', 'DWORD *pdwDataLen', 'DWORD dwBufLen']
BOOL CryptCreateHash ['HCRYPTPROV hProv', 'ALG_ID Algid', 'HCRYPTKEY hKey', 'DWORD dwFlags', 'HCRYPTHASH *phHash']
BOOL CryptHashSessionKey ['HCRYPTHASH hHash', 'HCRYPTKEY hKey', 'DWORD dwFlags']
BOOL CryptDestroyHash ['HCRYPTHASH hHash']
BOOL CryptSignHashA ['HCRYPTHASH hHash', 'DWORD dwKeySpec', 'LPCSTR szDescription', 'DWORD dwFlags', 'BYTE *pbSignature', 'DWORD *pdwSigLen']
BOOL CryptSignHashW ['HCRYPTHASH hHash', 'DWORD dwKeySpec', 'LPCWSTR szDescription', 'DWORD dwFlags', 'BYTE *pbSignature', 'DWORD *pdwSigLen']
BOOL CryptVerifySignatureA ['HCRYPTHASH hHash', 'CONST BYTE *pbSignature', 'DWORD dwSigLen', 'HCRYPTKEY hPubKey', 'LPCSTR szDescription', 'DWORD dwFlags']
BOOL CryptVerifySignatureW ['HCRYPTHASH hHash', 'CONST BYTE *pbSignature', 'DWORD dwSigLen', 'HCRYPTKEY hPubKey', 'LPCWSTR szDescription', 'DWORD dwFlags']
BOOL CryptSetProviderA ['LPCSTR pszProvName', 'DWORD dwProvType']
BOOL CryptSetProviderW ['LPCWSTR pszProvName', 'DWORD dwProvType']
BOOL CryptSetProviderExA ['LPCSTR pszProvName', 'DWORD dwProvType', 'DWORD *pdwReserved', 'DWORD dwFlags']
BOOL CryptSetProviderExW ['LPCWSTR pszProvName', 'DWORD dwProvType', 'DWORD *pdwReserved', 'DWORD dwFlags']
BOOL CryptGetDefaultProviderA ['DWORD dwProvType', 'DWORD *pdwReserved', 'DWORD dwFlags', 'LPSTR pszProvName', 'DWORD *pcbProvName']
BOOL CryptGetDefaultProviderW ['DWORD dwProvType', 'DWORD *pdwReserved', 'DWORD dwFlags', 'LPWSTR pszProvName', 'DWORD *pcbProvName']
BOOL CryptEnumProviderTypesA ['DWORD dwIndex', 'DWORD *pdwReserved', 'DWORD dwFlags', 'DWORD *pdwProvType', 'LPSTR szTypeName', 'DWORD *pcbTypeName']
BOOL CryptEnumProviderTypesW ['DWORD dwIndex', 'DWORD *pdwReserved', 'DWORD dwFlags', 'DWORD *pdwProvType', 'LPWSTR szTypeName', 'DWORD *pcbTypeName']
BOOL CryptEnumProvidersA ['DWORD dwIndex', 'DWORD *pdwReserved', 'DWORD dwFlags', 'DWORD *pdwProvType', 'LPSTR szProvName', 'DWORD *pcbProvName']
BOOL CryptEnumProvidersW ['DWORD dwIndex', 'DWORD *pdwReserved', 'DWORD dwFlags', 'DWORD *pdwProvType', 'LPWSTR szProvName', 'DWORD *pcbProvName']
BOOL CryptContextAddRef ['HCRYPTPROV hProv', 'DWORD *pdwReserved', 'DWORD dwFlags']
BOOL CryptDuplicateKey ['HCRYPTKEY hKey', 'DWORD *pdwReserved', 'DWORD dwFlags', 'HCRYPTKEY *phKey']
BOOL CryptDuplicateHash ['HCRYPTHASH hHash', 'DWORD *pdwReserved', 'DWORD dwFlags', 'HCRYPTHASH *phHash']
BOOL CryptFormatObject ['IN DWORD dwCertEncodingType', 'IN DWORD dwFormatType', 'IN DWORD dwFormatStrType', 'IN void *pFormatStruct', 'IN LPCSTR lpszStructType', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'OUT void *pbFormat', 'IN OUT DWORD *pcbFormat']
BOOL CryptEncodeObjectEx ['IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', 'IN const void *pvStructInfo', 'IN DWORD dwFlags', 'IN OPTIONAL PCRYPT_ENCODE_PARA pEncodePara', 'OUT void *pvEncoded', 'IN OUT DWORD *pcbEncoded']
BOOL CryptEncodeObject ['IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', 'IN const void *pvStructInfo', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded']
BOOL CryptDecodeObjectEx ['IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'IN DWORD dwFlags', 'IN OPTIONAL PCRYPT_DECODE_PARA pDecodePara', 'OUT OPTIONAL void *pvStructInfo', 'IN OUT DWORD *pcbStructInfo']
BOOL CryptDecodeObject ['IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'IN DWORD dwFlags', 'OUT void *pvStructInfo', 'IN OUT DWORD *pcbStructInfo']
BOOL CryptInstallOIDFunctionAddress ['IN HMODULE hModule', ' IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN DWORD cFuncEntry', 'IN const CRYPT_OID_FUNC_ENTRY rgFuncEntry[]', 'IN DWORD dwFlags']
HCRYPTOIDFUNCSET CryptInitOIDFunctionSet ['IN LPCSTR pszFuncName', 'IN DWORD dwFlags']
BOOL CryptGetOIDFunctionAddress ['IN HCRYPTOIDFUNCSET hFuncSet', 'IN DWORD dwEncodingType', 'IN LPCSTR pszOID', 'IN DWORD dwFlags', 'OUT void **ppvFuncAddr', 'OUT HCRYPTOIDFUNCADDR *phFuncAddr']
BOOL CryptGetDefaultOIDDllList ['IN HCRYPTOIDFUNCSET hFuncSet', 'IN DWORD dwEncodingType', 'OUT LPWSTR pwszDllList', 'IN OUT DWORD *pcchDllList']
BOOL CryptGetDefaultOIDFunctionAddress ['IN HCRYPTOIDFUNCSET hFuncSet', 'IN DWORD dwEncodingType', 'IN OPTIONAL LPCWSTR pwszDll', 'IN DWORD dwFlags', 'OUT void **ppvFuncAddr', 'IN OUT HCRYPTOIDFUNCADDR *phFuncAddr']
BOOL CryptFreeOIDFunctionAddress ['IN HCRYPTOIDFUNCADDR hFuncAddr', 'IN DWORD dwFlags']
BOOL CryptRegisterOIDFunction ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCSTR pszOID', 'IN OPTIONAL LPCWSTR pwszDll', 'IN OPTIONAL LPCSTR pszOverrideFuncName']
BOOL CryptUnregisterOIDFunction ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCSTR pszOID']
BOOL CryptRegisterDefaultOIDFunction ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN DWORD dwIndex', 'IN LPCWSTR pwszDll']
BOOL CryptUnregisterDefaultOIDFunction ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCWSTR pwszDll']
BOOL CryptSetOIDFunctionValue ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCSTR pszOID', 'IN LPCWSTR pwszValueName', 'IN DWORD dwValueType', 'IN const BYTE *pbValueData', 'IN DWORD cbValueData']
BOOL CryptGetOIDFunctionValue ['IN DWORD dwEncodingType', 'IN LPCSTR pszFuncName', 'IN LPCSTR pszOID', 'IN LPCWSTR pwszValueName', 'OUT DWORD *pdwValueType', 'OUT BYTE *pbValueData', 'IN OUT DWORD *pcbValueData']
BOOL CryptEnumOIDFunction ['IN DWORD dwEncodingType', 'IN OPTIONAL LPCSTR pszFuncName', 'IN OPTIONAL LPCSTR pszOID', 'IN DWORD dwFlags', 'IN void *pvArg', 'IN PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc']
PCCRYPT_OID_INFO CryptFindOIDInfo ['IN DWORD dwKeyType', 'IN void *pvKey', 'IN DWORD dwGroupId']
BOOL CryptRegisterOIDInfo ['IN PCCRYPT_OID_INFO pInfo', 'IN DWORD dwFlags']
BOOL CryptUnregisterOIDInfo ['IN PCCRYPT_OID_INFO pInfo']
BOOL CryptEnumOIDInfo ['IN DWORD dwGroupId', 'IN DWORD dwFlags', 'IN void *pvArg', 'IN PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo']
LPCWSTR CryptFindLocalizedName ['IN LPCWSTR pwszCryptName']
HCRYPTMSG CryptMsgOpenToEncode ['IN DWORD dwMsgEncodingType', 'IN DWORD dwFlags', 'IN DWORD dwMsgType', 'IN void const *pvMsgEncodeInfo', 'IN OPTIONAL LPSTR pszInnerContentObjID', 'IN OPTIONAL PCMSG_STREAM_INFO pStreamInfo']
DWORD CryptMsgCalculateEncodedLength ['IN DWORD dwMsgEncodingType', 'IN DWORD dwFlags', 'IN DWORD dwMsgType', 'IN void const *pvMsgEncodeInfo', 'IN OPTIONAL LPSTR pszInnerContentObjID', 'IN DWORD cbData']
HCRYPTMSG CryptMsgOpenToDecode ['IN DWORD dwMsgEncodingType', 'IN DWORD dwFlags', 'IN DWORD dwMsgType', 'IN HCRYPTPROV hCryptProv', 'IN OPTIONAL PCERT_INFO pRecipientInfo', 'IN OPTIONAL PCMSG_STREAM_INFO pStreamInfo']
HCRYPTMSG CryptMsgDuplicate ['IN HCRYPTMSG hCryptMsg']
BOOL CryptMsgClose ['IN HCRYPTMSG hCryptMsg']
BOOL CryptMsgUpdate ['IN HCRYPTMSG hCryptMsg', 'IN const BYTE *pbData', 'IN DWORD cbData', 'IN BOOL fFinal']
BOOL CryptMsgGetParam ['IN HCRYPTMSG hCryptMsg', 'IN DWORD dwParamType', 'IN DWORD dwIndex', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
BOOL CryptMsgControl ['IN HCRYPTMSG hCryptMsg', 'IN DWORD dwFlags', 'IN DWORD dwCtrlType', 'IN void const *pvCtrlPara']
BOOL CryptMsgVerifyCountersignatureEncoded ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwEncodingType', 'IN PBYTE pbSignerInfo', 'IN DWORD cbSignerInfo', 'IN PBYTE pbSignerInfoCountersignature', 'IN DWORD cbSignerInfoCountersignature', 'IN PCERT_INFO pciCountersigner']
BOOL CryptMsgVerifyCountersignatureEncodedEx ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwEncodingType', 'IN PBYTE pbSignerInfo', 'IN DWORD cbSignerInfo', 'IN PBYTE pbSignerInfoCountersignature', 'IN DWORD cbSignerInfoCountersignature', 'IN DWORD dwSignerType', 'IN void *pvSigner', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved']
BOOL CryptMsgCountersign ['IN OUT HCRYPTMSG hCryptMsg', 'IN DWORD dwIndex', 'IN DWORD cCountersigners', 'IN PCMSG_SIGNER_ENCODE_INFO rgCountersigners']
BOOL CryptMsgCountersignEncoded ['IN DWORD dwEncodingType', 'IN PBYTE pbSignerInfo', 'IN DWORD cbSignerInfo', 'IN DWORD cCountersigners', 'IN PCMSG_SIGNER_ENCODE_INFO rgCountersigners', 'OUT PBYTE pbCountersignature', 'IN OUT PDWORD pcbCountersignature']
HCERTSTORE CertOpenStore ['IN LPCSTR lpszStoreProvider', 'IN DWORD dwEncodingType', 'IN HCRYPTPROV hCryptProv', 'IN DWORD dwFlags', 'IN const void *pvPara']
HCERTSTORE CertDuplicateStore ['IN HCERTSTORE hCertStore']
BOOL CertSaveStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwEncodingType', 'IN DWORD dwSaveAs', 'IN DWORD dwSaveTo', 'IN OUT void *pvSaveToPara', 'IN DWORD dwFlags']
BOOL CertCloseStore ['IN HCERTSTORE hCertStore', 'DWORD dwFlags']
PCCERT_CONTEXT CertGetSubjectCertificateFromStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN PCERT_INFO pCertId // fields are used']
PCCERT_CONTEXT CertEnumCertificatesInStore ['IN HCERTSTORE hCertStore', 'IN PCCERT_CONTEXT pPrevCertContext']
PCCERT_CONTEXT CertFindCertificateInStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN DWORD dwFindFlags', 'IN DWORD dwFindType', 'IN const void *pvFindPara', 'IN PCCERT_CONTEXT pPrevCertContext']
PCCERT_CONTEXT CertGetIssuerCertificateFromStore ['IN HCERTSTORE hCertStore', 'IN PCCERT_CONTEXT pSubjectContext', 'IN OPTIONAL PCCERT_CONTEXT pPrevIssuerContext', 'IN OUT DWORD *pdwFlags']
BOOL CertVerifySubjectCertificateContext ['IN PCCERT_CONTEXT pSubject', 'IN OPTIONAL PCCERT_CONTEXT pIssuer', 'IN OUT DWORD *pdwFlags']
PCCERT_CONTEXT CertDuplicateCertificateContext ['IN PCCERT_CONTEXT pCertContext']
PCCERT_CONTEXT CertCreateCertificateContext ['IN DWORD dwCertEncodingType', 'IN const BYTE *pbCertEncoded', 'IN DWORD cbCertEncoded']
BOOL CertFreeCertificateContext ['IN PCCERT_CONTEXT pCertContext']
BOOL CertSetCertificateContextProperty ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN const void *pvData']
BOOL CertGetCertificateContextProperty ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwPropId', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
DWORD CertEnumCertificateContextProperties ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwPropId']
BOOL CertCreateCTLEntryFromCertificateContextProperties ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD cOptAttr', 'IN OPTIONAL PCRYPT_ATTRIBUTE rgOptAttr', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved', 'OUT OPTIONAL PCTL_ENTRY pCtlEntry', 'IN OUT DWORD *pcbCtlEntry']
BOOL CertSetCertificateContextPropertiesFromCTLEntry ['IN PCCERT_CONTEXT pCertContext', 'IN PCTL_ENTRY pCtlEntry', 'IN DWORD dwFlags']
PCCRL_CONTEXT CertGetCRLFromStore ['IN HCERTSTORE hCertStore', 'IN OPTIONAL PCCERT_CONTEXT pIssuerContext', 'IN PCCRL_CONTEXT pPrevCrlContext', 'IN OUT DWORD *pdwFlags']
PCCRL_CONTEXT CertEnumCRLsInStore ['IN HCERTSTORE hCertStore', 'IN PCCRL_CONTEXT pPrevCrlContext']
PCCRL_CONTEXT CertFindCRLInStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN DWORD dwFindFlags', 'IN DWORD dwFindType', 'IN const void *pvFindPara', 'IN PCCRL_CONTEXT pPrevCrlContext']
PCCRL_CONTEXT CertDuplicateCRLContext ['IN PCCRL_CONTEXT pCrlContext']
PCCRL_CONTEXT CertCreateCRLContext ['IN DWORD dwCertEncodingType', 'IN const BYTE *pbCrlEncoded', 'IN DWORD cbCrlEncoded']
BOOL CertFreeCRLContext ['IN PCCRL_CONTEXT pCrlContext']
BOOL CertSetCRLContextProperty ['IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN const void *pvData']
BOOL CertGetCRLContextProperty ['IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwPropId', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
DWORD CertEnumCRLContextProperties ['IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwPropId']
BOOL CertFindCertificateInCRL ['IN PCCERT_CONTEXT pCert', 'IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved', 'OUT PCRL_ENTRY *ppCrlEntry']
BOOL CertIsValidCRLForCertificate ['IN PCCERT_CONTEXT pCert', 'IN PCCRL_CONTEXT pCrl', 'IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CertAddEncodedCertificateToStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN const BYTE *pbCertEncoded', 'IN DWORD cbCertEncoded', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCERT_CONTEXT *ppCertContext']
BOOL CertAddCertificateContextToStore ['IN HCERTSTORE hCertStore', 'IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCERT_CONTEXT *ppStoreContext']
BOOL CertAddSerializedElementToStore ['IN HCERTSTORE hCertStore', 'IN const BYTE *pbElement', 'IN DWORD cbElement', 'IN DWORD dwAddDisposition', 'IN DWORD dwFlags', 'IN DWORD dwContextTypeFlags', 'OUT OPTIONAL DWORD *pdwContextType', 'OUT OPTIONAL const void **ppvContext']
BOOL CertDeleteCertificateFromStore ['IN PCCERT_CONTEXT pCertContext']
BOOL CertAddEncodedCRLToStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN const BYTE *pbCrlEncoded', 'IN DWORD cbCrlEncoded', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCRL_CONTEXT *ppCrlContext']
BOOL CertAddCRLContextToStore ['IN HCERTSTORE hCertStore', 'IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCRL_CONTEXT *ppStoreContext']
BOOL CertDeleteCRLFromStore ['IN PCCRL_CONTEXT pCrlContext']
BOOL CertSerializeCertificateStoreElement ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwFlags', 'OUT BYTE *pbElement', 'IN OUT DWORD *pcbElement']
BOOL CertSerializeCRLStoreElement ['IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwFlags', 'OUT BYTE *pbElement', 'IN OUT DWORD *pcbElement']
PCCTL_CONTEXT CertDuplicateCTLContext ['IN PCCTL_CONTEXT pCtlContext']
PCCTL_CONTEXT CertCreateCTLContext ['IN DWORD dwMsgAndCertEncodingType', 'IN const BYTE *pbCtlEncoded', 'IN DWORD cbCtlEncoded']
BOOL CertFreeCTLContext ['IN PCCTL_CONTEXT pCtlContext']
BOOL CertSetCTLContextProperty ['IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN const void *pvData']
BOOL CertGetCTLContextProperty ['IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwPropId', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
DWORD CertEnumCTLContextProperties ['IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwPropId']
PCCTL_CONTEXT CertEnumCTLsInStore ['IN HCERTSTORE hCertStore', 'IN PCCTL_CONTEXT pPrevCtlContext']
PCTL_ENTRY CertFindSubjectInCTL ['IN DWORD dwEncodingType', 'IN DWORD dwSubjectType', 'IN void *pvSubject', 'IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwFlags']
PCCTL_CONTEXT CertFindCTLInStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwMsgAndCertEncodingType', 'IN DWORD dwFindFlags', 'IN DWORD dwFindType', 'IN const void *pvFindPara', 'IN PCCTL_CONTEXT pPrevCtlContext']
BOOL CertAddEncodedCTLToStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwMsgAndCertEncodingType', 'IN const BYTE *pbCtlEncoded', 'IN DWORD cbCtlEncoded', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCTL_CONTEXT *ppCtlContext']
BOOL CertAddCTLContextToStore ['IN HCERTSTORE hCertStore', 'IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCTL_CONTEXT *ppStoreContext']
BOOL CertSerializeCTLStoreElement ['IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwFlags', 'OUT BYTE *pbElement', 'IN OUT DWORD *pcbElement']
BOOL CertDeleteCTLFromStore ['IN PCCTL_CONTEXT pCtlContext']
BOOL CertAddCertificateLinkToStore ['IN HCERTSTORE hCertStore', 'IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCERT_CONTEXT *ppStoreContext']
BOOL CertAddCRLLinkToStore ['IN HCERTSTORE hCertStore', 'IN PCCRL_CONTEXT pCrlContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCRL_CONTEXT *ppStoreContext']
BOOL CertAddCTLLinkToStore ['IN HCERTSTORE hCertStore', 'IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwAddDisposition', 'OUT OPTIONAL PCCTL_CONTEXT *ppStoreContext']
BOOL CertAddStoreToCollection ['IN HCERTSTORE hCollectionStore', 'IN OPTIONAL HCERTSTORE hSiblingStore', 'IN DWORD dwUpdateFlags', 'IN DWORD dwPriority']
void CertRemoveStoreFromCollection ['IN HCERTSTORE hCollectionStore', 'IN HCERTSTORE hSiblingStore']
BOOL CertControlStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwFlags', 'IN DWORD dwCtrlType', 'IN void const *pvCtrlPara']
BOOL CertSetStoreProperty ['IN HCERTSTORE hCertStore', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN const void *pvData']
BOOL CertGetStoreProperty ['IN HCERTSTORE hCertStore', 'IN DWORD dwPropId', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
BOOL CertRegisterSystemStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags', 'IN PCERT_SYSTEM_STORE_INFO pStoreInfo', 'IN OPTIONAL void *pvReserved']
BOOL CertRegisterPhysicalStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags', 'IN LPCWSTR pwszStoreName', 'IN PCERT_PHYSICAL_STORE_INFO pStoreInfo', 'IN OPTIONAL void *pvReserved']
BOOL CertUnregisterSystemStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags']
BOOL CertUnregisterPhysicalStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags', 'IN LPCWSTR pwszStoreName']
BOOL CertEnumSystemStoreLocation ['IN DWORD dwFlags', 'IN void *pvArg', 'IN PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum']
BOOL CertEnumSystemStore ['IN DWORD dwFlags', 'IN OPTIONAL void *pvSystemStoreLocationPara', 'IN void *pvArg', 'IN PFN_CERT_ENUM_SYSTEM_STORE pfnEnum']
BOOL CertEnumPhysicalStore ['IN const void *pvSystemStore', 'IN DWORD dwFlags', 'IN void *pvArg', 'IN PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum']
BOOL CertGetEnhancedKeyUsage ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwFlags', 'OUT PCERT_ENHKEY_USAGE pUsage', 'IN OUT DWORD *pcbUsage']
BOOL CertSetEnhancedKeyUsage ['IN PCCERT_CONTEXT pCertContext', 'IN PCERT_ENHKEY_USAGE pUsage']
BOOL CertAddEnhancedKeyUsageIdentifier ['IN PCCERT_CONTEXT pCertContext', 'IN LPCSTR pszUsageIdentifier']
BOOL CertRemoveEnhancedKeyUsageIdentifier ['IN PCCERT_CONTEXT pCertContext', 'IN LPCSTR pszUsageIdentifier']
BOOL CertGetValidUsages ['IN DWORD cCerts', 'IN PCCERT_CONTEXT *rghCerts', 'OUT int *cNumOIDs', 'OUT LPSTR *rghOIDs', 'IN OUT DWORD *pcbOIDs']
BOOL CryptMsgGetAndVerifySigner ['IN HCRYPTMSG hCryptMsg', 'IN DWORD cSignerStore', 'IN OPTIONAL HCERTSTORE *rghSignerStore', 'IN DWORD dwFlags', 'OUT OPTIONAL PCCERT_CONTEXT *ppSigner', 'IN OUT OPTIONAL DWORD *pdwSignerIndex']
BOOL CryptMsgSignCTL ['IN DWORD dwMsgEncodingType', 'IN BYTE *pbCtlContent', 'IN DWORD cbCtlContent', 'IN PCMSG_SIGNED_ENCODE_INFO pSignInfo', 'IN DWORD dwFlags', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded']
BOOL CryptMsgEncodeAndSignCTL ['IN DWORD dwMsgEncodingType', 'IN PCTL_INFO pCtlInfo', 'IN PCMSG_SIGNED_ENCODE_INFO pSignInfo', 'IN DWORD dwFlags', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded']
BOOL CertFindSubjectInSortedCTL ['IN PCRYPT_DATA_BLOB pSubjectIdentifier', 'IN PCCTL_CONTEXT pCtlContext', 'IN DWORD dwFlags', 'IN void *pvReserved', 'OUT OPTIONAL PCRYPT_DER_BLOB pEncodedAttributes']
BOOL CertEnumSubjectInSortedCTL ['IN PCCTL_CONTEXT pCtlContext', 'IN OUT void **ppvNextSubject', 'OUT OPTIONAL PCRYPT_DER_BLOB pSubjectIdentifier', 'OUT OPTIONAL PCRYPT_DER_BLOB pEncodedAttributes']
BOOL CertVerifyCTLUsage ['IN DWORD dwEncodingType', 'IN DWORD dwSubjectType', 'IN void *pvSubject', 'IN PCTL_USAGE pSubjectUsage', 'IN DWORD dwFlags', 'IN OPTIONAL PCTL_VERIFY_USAGE_PARA pVerifyUsagePara', 'IN OUT PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus']
BOOL CertVerifyRevocation ['IN DWORD dwEncodingType', 'IN DWORD dwRevType', 'IN DWORD cContext', 'IN PVOID rgpvContext[]', 'IN DWORD dwFlags', 'IN OPTIONAL PCERT_REVOCATION_PARA pRevPara', 'IN OUT PCERT_REVOCATION_STATUS pRevStatus']
BOOL CertCompareIntegerBlob ['IN PCRYPT_INTEGER_BLOB pInt1', 'IN PCRYPT_INTEGER_BLOB pInt2']
BOOL CertCompareCertificate ['IN DWORD dwCertEncodingType', 'IN PCERT_INFO pCertId1', 'IN PCERT_INFO pCertId2']
BOOL CertCompareCertificateName ['IN DWORD dwCertEncodingType', 'IN PCERT_NAME_BLOB pCertName1', 'IN PCERT_NAME_BLOB pCertName2']
BOOL CertIsRDNAttrsInCertificateName ['IN DWORD dwCertEncodingType', 'IN DWORD dwFlags', 'IN PCERT_NAME_BLOB pCertName', 'IN PCERT_RDN pRDN']
BOOL CertComparePublicKeyInfo ['IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pPublicKey1', 'IN PCERT_PUBLIC_KEY_INFO pPublicKey2']
DWORD CertGetPublicKeyLength ['IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pPublicKey']
BOOL CryptVerifyCertificateSignature ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN const BYTE * pbEncoded', 'IN DWORD cbEncoded', 'IN PCERT_PUBLIC_KEY_INFO pPublicKey']
BOOL CryptVerifyCertificateSignatureEx ['IN OPTIONAL HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN DWORD dwSubjectType', 'IN void *pvSubject', 'IN DWORD dwIssuerType', 'IN void *pvIssuer', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved']
BOOL CryptHashToBeSigned ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'OUT BYTE *pbComputedHash', 'IN OUT DWORD *pcbComputedHash']
BOOL CryptHashCertificate ['IN HCRYPTPROV hCryptProv', 'IN ALG_ID Algid', 'IN DWORD dwFlags', 'IN const BYTE *pbEncoded', 'IN DWORD cbEncoded', 'OUT BYTE *pbComputedHash', 'IN OUT DWORD *pcbComputedHash']
BOOL CryptSignCertificate ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwKeySpec', 'IN DWORD dwCertEncodingType', 'IN const BYTE *pbEncodedToBeSigned', 'IN DWORD cbEncodedToBeSigned', 'IN PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm', 'IN OPTIONAL const void *pvHashAuxInfo', 'OUT BYTE *pbSignature', 'IN OUT DWORD *pcbSignature']
BOOL CryptSignAndEncodeCertificate ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwKeySpec', 'IN DWORD dwCertEncodingType', 'IN LPCSTR lpszStructType', ' IN const void *pvStructInfo', 'IN PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm', 'IN OPTIONAL const void *pvHashAuxInfo', 'OUT PBYTE pbEncoded', 'IN OUT DWORD *pcbEncoded']
LONG CertVerifyTimeValidity ['IN LPFILETIME pTimeToVerify', 'IN PCERT_INFO pCertInfo']
LONG CertVerifyCRLTimeValidity ['IN LPFILETIME pTimeToVerify', 'IN PCRL_INFO pCrlInfo']
BOOL CertVerifyValidityNesting ['IN PCERT_INFO pSubjectInfo', 'IN PCERT_INFO pIssuerInfo']
BOOL CertVerifyCRLRevocation ['IN DWORD dwCertEncodingType', 'IN PCERT_INFO pCertId', ' IN DWORD cCrlInfo', 'IN PCRL_INFO rgpCrlInfo[]']
LPCSTR CertAlgIdToOID ['IN DWORD dwAlgId']
DWORD CertOIDToAlgId ['IN LPCSTR pszObjId']
PCERT_EXTENSION CertFindExtension ['IN LPCSTR pszObjId', 'IN DWORD cExtensions', 'IN CERT_EXTENSION rgExtensions[]']
PCRYPT_ATTRIBUTE CertFindAttribute ['IN LPCSTR pszObjId', 'IN DWORD cAttr', 'IN CRYPT_ATTRIBUTE rgAttr[]']
PCERT_RDN_ATTR CertFindRDNAttr ['IN LPCSTR pszObjId', 'IN PCERT_NAME_INFO pName']
BOOL CertGetIntendedKeyUsage ['IN DWORD dwCertEncodingType', 'IN PCERT_INFO pCertInfo', 'OUT BYTE *pbKeyUsage', 'IN DWORD cbKeyUsage']
BOOL CryptInstallDefaultContext ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwDefaultType', 'IN const void *pvDefaultPara', 'IN DWORD dwFlags', 'IN void *pvReserved', 'OUT HCRYPTDEFAULTCONTEXT *phDefaultContext']
BOOL CryptUninstallDefaultContext ['HCRYPTDEFAULTCONTEXT hDefaultContext', 'IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CryptExportPublicKeyInfo ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwKeySpec', 'IN DWORD dwCertEncodingType', 'OUT PCERT_PUBLIC_KEY_INFO pInfo', 'IN OUT DWORD *pcbInfo']
BOOL CryptExportPublicKeyInfoEx ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwKeySpec', 'IN DWORD dwCertEncodingType', 'IN LPSTR pszPublicKeyObjId', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvAuxInfo', 'OUT PCERT_PUBLIC_KEY_INFO pInfo', 'IN OUT DWORD *pcbInfo']
BOOL CryptImportPublicKeyInfo ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pInfo', 'OUT HCRYPTKEY *phKey']
BOOL CryptImportPublicKeyInfoEx ['IN HCRYPTPROV hCryptProv', 'IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pInfo', 'IN ALG_ID aiKeyAlg', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvAuxInfo', 'OUT HCRYPTKEY *phKey']
BOOL CryptAcquireCertificatePrivateKey ['IN PCCERT_CONTEXT pCert', 'IN DWORD dwFlags', 'IN void *pvReserved', 'OUT HCRYPTPROV *phCryptProv', 'OUT OPTIONAL DWORD *pdwKeySpec', 'OUT OPTIONAL BOOL *pfCallerFreeProv']
BOOL CryptFindCertificateKeyProvInfo ['IN PCCERT_CONTEXT pCert', 'IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CryptImportPKCS8 ['CRYPT_PKCS8_IMPORT_PARAMS sImportParams', ' DWORD dwFlags', '// in', 'optional HCRYPTPROV *phCryptProv', '// out', 'optional void *pvAuxInfo // in', 'optional']
BOOL CryptExportPKCS8 ['HCRYPTPROV hCryptProv', ' DWORD dwKeySpec', ' LPSTR pszPrivateKeyObjId', ' DWORD dwFlags', ' void *pvAuxInfo', ' BYTE *pbPrivateKeyBlob', ' DWORD *pcbPrivateKeyBlob // in', 'out']
BOOL CryptExportPKCS8Ex ['CRYPT_PKCS8_EXPORT_PARAMS* psExportParams', ' DWORD dwFlags', ' void *pvAuxInfo', ' BYTE *pbPrivateKeyBlob', ' DWORD *pcbPrivateKeyBlob // in', 'out']
BOOL CryptHashPublicKeyInfo ['IN HCRYPTPROV hCryptProv', 'IN ALG_ID Algid', 'IN DWORD dwFlags', 'IN DWORD dwCertEncodingType', 'IN PCERT_PUBLIC_KEY_INFO pInfo', 'OUT BYTE *pbComputedHash', 'IN OUT DWORD *pcbComputedHash']
DWORD CertRDNValueToStrA ['IN DWORD dwValueType', 'IN PCERT_RDN_VALUE_BLOB pValue', 'OUT OPTIONAL LPSTR psz', 'IN DWORD csz']
DWORD CertRDNValueToStrW ['IN DWORD dwValueType', 'IN PCERT_RDN_VALUE_BLOB pValue', 'OUT OPTIONAL LPWSTR psz', 'IN DWORD csz']
DWORD CertNameToStrA ['IN DWORD dwCertEncodingType', 'IN PCERT_NAME_BLOB pName', 'IN DWORD dwStrType', 'OUT OPTIONAL LPSTR psz', 'IN DWORD csz']
DWORD CertNameToStrW ['IN DWORD dwCertEncodingType', 'IN PCERT_NAME_BLOB pName', 'IN DWORD dwStrType', 'OUT OPTIONAL LPWSTR psz', 'IN DWORD csz']
BOOL CertStrToNameA ['IN DWORD dwCertEncodingType', 'IN LPCSTR pszX500', 'IN DWORD dwStrType', 'IN OPTIONAL void *pvReserved', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded', 'OUT OPTIONAL LPCSTR *ppszError']
BOOL CertStrToNameW ['IN DWORD dwCertEncodingType', 'IN LPCWSTR pszX500', 'IN DWORD dwStrType', 'IN OPTIONAL void *pvReserved', 'OUT BYTE *pbEncoded', 'IN OUT DWORD *pcbEncoded', 'OUT OPTIONAL LPCWSTR *ppszError']
DWORD CertGetNameStringA ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwType', 'IN DWORD dwFlags', 'IN void *pvTypePara', 'OUT OPTIONAL LPSTR pszNameString', 'IN DWORD cchNameString']
DWORD CertGetNameStringW ['IN PCCERT_CONTEXT pCertContext', 'IN DWORD dwType', 'IN DWORD dwFlags', 'IN void *pvTypePara', 'OUT OPTIONAL LPWSTR pszNameString', 'IN DWORD cchNameString']
BOOL CryptSignMessage ['IN PCRYPT_SIGN_MESSAGE_PARA pSignPara', 'IN BOOL fDetachedSignature', 'IN DWORD cToBeSigned', 'IN const BYTE *rgpbToBeSigned[]', 'IN DWORD rgcbToBeSigned[]', 'OUT BYTE *pbSignedBlob', 'IN OUT DWORD *pcbSignedBlob']
BOOL CryptVerifyMessageSignature ['IN PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara', 'IN DWORD dwSignerIndex', 'IN const BYTE *pbSignedBlob', 'IN DWORD cbSignedBlob', 'OUT BYTE OPTIONAL *pbDecoded', 'IN OUT OPTIONAL DWORD *pcbDecoded', 'OUT OPTIONAL PCCERT_CONTEXT *ppSignerCert']
LONG CryptGetMessageSignerCount ['IN DWORD dwMsgEncodingType', 'IN const BYTE *pbSignedBlob', 'IN DWORD cbSignedBlob']
HCERTSTORE CryptGetMessageCertificates ['IN DWORD dwMsgAndCertEncodingType', 'IN HCRYPTPROV hCryptProv', ' IN DWORD dwFlags', ' IN const BYTE *pbSignedBlob', 'IN DWORD cbSignedBlob']
BOOL CryptVerifyDetachedMessageSignature ['IN PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara', 'IN DWORD dwSignerIndex', 'IN const BYTE *pbDetachedSignBlob', 'IN DWORD cbDetachedSignBlob', 'IN DWORD cToBeSigned', 'IN const BYTE *rgpbToBeSigned[]', 'IN DWORD rgcbToBeSigned[]', 'OUT OPTIONAL PCCERT_CONTEXT *ppSignerCert']
BOOL CryptEncryptMessage ['IN PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara', 'IN DWORD cRecipientCert', 'IN PCCERT_CONTEXT rgpRecipientCert[]', 'IN const BYTE *pbToBeEncrypted', 'IN DWORD cbToBeEncrypted', 'OUT BYTE *pbEncryptedBlob', 'IN OUT DWORD *pcbEncryptedBlob']
BOOL CryptDecryptMessage ['IN PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara', 'IN const BYTE *pbEncryptedBlob', 'IN DWORD cbEncryptedBlob', 'OUT OPTIONAL BYTE *pbDecrypted', 'IN OUT OPTIONAL DWORD *pcbDecrypted', 'OUT OPTIONAL PCCERT_CONTEXT *ppXchgCert']
BOOL CryptSignAndEncryptMessage ['IN PCRYPT_SIGN_MESSAGE_PARA pSignPara', 'IN PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara', 'IN DWORD cRecipientCert', 'IN PCCERT_CONTEXT rgpRecipientCert[]', 'IN const BYTE *pbToBeSignedAndEncrypted', 'IN DWORD cbToBeSignedAndEncrypted', 'OUT BYTE *pbSignedAndEncryptedBlob', 'IN OUT DWORD *pcbSignedAndEncryptedBlob']
BOOL CryptDecryptAndVerifyMessageSignature ['IN PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara', 'IN PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara', 'IN DWORD dwSignerIndex', 'IN const BYTE *pbEncryptedBlob', 'IN DWORD cbEncryptedBlob', 'OUT OPTIONAL BYTE *pbDecrypted', 'IN OUT OPTIONAL DWORD *pcbDecrypted', 'OUT OPTIONAL PCCERT_CONTEXT *ppXchgCert', 'OUT OPTIONAL PCCERT_CONTEXT *ppSignerCert']
BOOL CryptDecodeMessage ['IN DWORD dwMsgTypeFlags', 'IN PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara', 'IN PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara', 'IN DWORD dwSignerIndex', 'IN const BYTE *pbEncodedBlob', 'IN DWORD cbEncodedBlob', 'IN DWORD dwPrevInnerContentType', 'OUT OPTIONAL DWORD *pdwMsgType', 'OUT OPTIONAL DWORD *pdwInnerContentType', 'OUT OPTIONAL BYTE *pbDecoded', 'IN OUT OPTIONAL DWORD *pcbDecoded', 'OUT OPTIONAL PCCERT_CONTEXT *ppXchgCert', 'OUT OPTIONAL PCCERT_CONTEXT *ppSignerCert']
BOOL CryptHashMessage ['IN PCRYPT_HASH_MESSAGE_PARA pHashPara', 'IN BOOL fDetachedHash', 'IN DWORD cToBeHashed', 'IN const BYTE *rgpbToBeHashed[]', 'IN DWORD rgcbToBeHashed[]', 'OUT OPTIONAL BYTE *pbHashedBlob', 'IN OUT OPTIONAL DWORD *pcbHashedBlob', 'OUT OPTIONAL BYTE *pbComputedHash', 'IN OUT OPTIONAL DWORD *pcbComputedHash']
BOOL CryptVerifyMessageHash ['IN PCRYPT_HASH_MESSAGE_PARA pHashPara', 'IN BYTE *pbHashedBlob', 'IN DWORD cbHashedBlob', 'OUT OPTIONAL BYTE *pbToBeHashed', 'IN OUT OPTIONAL DWORD *pcbToBeHashed', 'OUT OPTIONAL BYTE *pbComputedHash', 'IN OUT OPTIONAL DWORD *pcbComputedHash']
BOOL CryptVerifyDetachedMessageHash ['IN PCRYPT_HASH_MESSAGE_PARA pHashPara', 'IN BYTE *pbDetachedHashBlob', 'IN DWORD cbDetachedHashBlob', 'IN DWORD cToBeHashed', 'IN const BYTE *rgpbToBeHashed[]', 'IN DWORD rgcbToBeHashed[]', 'OUT OPTIONAL BYTE *pbComputedHash', 'IN OUT OPTIONAL DWORD *pcbComputedHash']
BOOL CryptSignMessageWithKey ['IN PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara', 'IN const BYTE *pbToBeSigned', 'IN DWORD cbToBeSigned', 'OUT BYTE *pbSignedBlob', 'IN OUT DWORD *pcbSignedBlob']
BOOL CryptVerifyMessageSignatureWithKey ['IN PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara', 'IN OPTIONAL PCERT_PUBLIC_KEY_INFO pPublicKeyInfo', 'IN const BYTE *pbSignedBlob', 'IN DWORD cbSignedBlob', 'OUT OPTIONAL BYTE *pbDecoded', 'IN OUT OPTIONAL DWORD *pcbDecoded']
HCERTSTORE CertOpenSystemStoreA ['HCRYPTPROV hProv', 'LPCSTR szSubsystemProtocol']
HCERTSTORE CertOpenSystemStoreW ['HCRYPTPROV hProv', 'LPCWSTR szSubsystemProtocol']
BOOL CertAddEncodedCertificateToSystemStoreA ['LPCSTR szCertStoreName', 'const BYTE * pbCertEncoded', 'DWORD cbCertEncoded']
BOOL CertAddEncodedCertificateToSystemStoreW ['LPCWSTR szCertStoreName', 'const BYTE * pbCertEncoded', 'DWORD cbCertEncoded']
BOOL CryptQueryObject ['DWORD dwObjectType', 'const void *pvObject', 'DWORD dwExpectedContentTypeFlags', 'DWORD dwExpectedFormatTypeFlags', 'DWORD dwFlags', 'DWORD *pdwMsgAndCertEncodingType', 'DWORD *pdwContentType', 'DWORD *pdwFormatType', 'HCERTSTORE *phCertStore', 'HCRYPTMSG *phMsg', 'const void **ppvContext']
LPVOID CryptMemAlloc ['IN ULONG cbSize']
LPVOID CryptMemRealloc ['IN LPVOID pv', 'IN ULONG cbSize']
VOID CryptMemFree ['IN LPVOID pv']
BOOL CryptCreateAsyncHandle ['IN DWORD dwFlags', 'OUT PHCRYPTASYNC phAsync']
BOOL CryptSetAsyncParam ['IN HCRYPTASYNC hAsync', 'IN LPSTR pszParamOid', 'IN LPVOID pvParam', 'IN OPTIONAL PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree']
BOOL CryptGetAsyncParam ['IN HCRYPTASYNC hAsync', 'IN LPSTR pszParamOid', 'OUT LPVOID* ppvParam', 'OUT OPTIONAL PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree']
BOOL CryptCloseAsyncHandle ['IN HCRYPTASYNC hAsync']
BOOL CryptRetrieveObjectByUrlA ['IN LPCSTR pszUrl', 'IN LPCSTR pszObjectOid', 'IN DWORD dwRetrievalFlags', 'IN DWORD dwTimeout', ' OUT LPVOID* ppvObject', 'IN HCRYPTASYNC hAsyncRetrieve', 'IN OPTIONAL PCRYPT_CREDENTIALS pCredentials', 'IN OPTIONAL LPVOID pvVerify', 'IN OPTIONAL PCRYPT_RETRIEVE_AUX_INFO pAuxInfo']
BOOL CryptRetrieveObjectByUrlW ['IN LPCWSTR pszUrl', 'IN LPCSTR pszObjectOid', 'IN DWORD dwRetrievalFlags', 'IN DWORD dwTimeout', ' OUT LPVOID* ppvObject', 'IN HCRYPTASYNC hAsyncRetrieve', 'IN OPTIONAL PCRYPT_CREDENTIALS pCredentials', 'IN OPTIONAL LPVOID pvVerify', 'IN OPTIONAL PCRYPT_RETRIEVE_AUX_INFO pAuxInfo']
BOOL CryptInstallCancelRetrieval ['IN PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel', 'IN const void *pvArg', 'IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CryptUninstallCancelRetrieval ['IN DWORD dwFlags', 'IN void *pvReserved']
BOOL CryptCancelAsyncRetrieval ['HCRYPTASYNC hAsyncRetrieval']
BOOL CryptGetObjectUrl ['IN LPCSTR pszUrlOid', 'IN LPVOID pvPara', 'IN DWORD dwFlags', 'OUT OPTIONAL PCRYPT_URL_ARRAY pUrlArray', 'IN OUT DWORD* pcbUrlArray', 'OUT OPTIONAL PCRYPT_URL_INFO pUrlInfo', 'IN OUT OPTIONAL DWORD* pcbUrlInfo', 'IN OPTIONAL LPVOID pvReserved']
BOOL CryptGetTimeValidObject ['IN LPCSTR pszTimeValidOid', 'IN LPVOID pvPara', 'IN PCCERT_CONTEXT pIssuer', 'IN OPTIONAL LPFILETIME pftValidFor', 'IN DWORD dwFlags', 'IN DWORD dwTimeout', ' OUT OPTIONAL LPVOID* ppvObject', 'IN OPTIONAL PCRYPT_CREDENTIALS pCredentials', 'IN OPTIONAL LPVOID pvReserved']
BOOL CryptFlushTimeValidObject ['IN LPCSTR pszFlushTimeValidOid', 'IN LPVOID pvPara', 'IN PCCERT_CONTEXT pIssuer', 'IN DWORD dwFlags', 'IN LPVOID pvReserved']
BOOL CryptProtectData ['IN DATA_BLOB* pDataIn', 'IN LPCWSTR szDataDescr', 'IN OPTIONAL DATA_BLOB* pOptionalEntropy', 'IN PVOID pvReserved', 'IN OPTIONAL CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct', 'IN DWORD dwFlags', 'OUT DATA_BLOB* pDataOut // out encr blob']
BOOL CryptUnprotectData ['IN DATA_BLOB* pDataIn', ' OUT OPTIONAL LPWSTR* ppszDataDescr', ' IN OPTIONAL DATA_BLOB* pOptionalEntropy', 'IN PVOID pvReserved', 'IN OPTIONAL CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct', 'IN DWORD dwFlags', 'OUT DATA_BLOB* pDataOut']
BOOL CryptProtectMemory ['IN OUT LPVOID pDataIn', ' IN DWORD cbDataIn', ' IN DWORD dwFlags']
BOOL CryptUnprotectMemory ['IN OUT LPVOID pDataIn', ' IN DWORD cbDataIn', ' IN DWORD dwFlags']
PCCERT_CONTEXT CertCreateSelfSignCertificate ['IN HCRYPTPROV hProv', 'IN PCERT_NAME_BLOB pSubjectIssuerBlob', 'IN DWORD dwFlags', 'OPTIONAL PCRYPT_KEY_PROV_INFO pKeyProvInfo', 'OPTIONAL PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm', 'OPTIONAL LPSYSTEMTIME pStartTime', 'OPTIONAL LPSYSTEMTIME pEndTime', 'OPTIONAL PCERT_EXTENSIONS pExtensions']
BOOL CryptGetKeyIdentifierProperty ['IN const CRYPT_HASH_BLOB *pKeyIdentifier', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN OPTIONAL LPCWSTR pwszComputerName', 'IN OPTIONAL void *pvReserved', 'OUT void *pvData', 'IN OUT DWORD *pcbData']
BOOL CryptSetKeyIdentifierProperty ['IN const CRYPT_HASH_BLOB *pKeyIdentifier', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN OPTIONAL LPCWSTR pwszComputerName', 'IN OPTIONAL void *pvReserved', 'IN const void *pvData']
BOOL CryptEnumKeyIdentifierProperties ['IN OPTIONAL const CRYPT_HASH_BLOB *pKeyIdentifier', 'IN DWORD dwPropId', 'IN DWORD dwFlags', 'IN OPTIONAL LPCWSTR pwszComputerName', 'IN OPTIONAL void *pvReserved', 'IN OPTIONAL void *pvArg', 'IN PFN_CRYPT_ENUM_KEYID_PROP pfnEnum']
BOOL CryptCreateKeyIdentifierFromCSP ['IN DWORD dwCertEncodingType', 'IN OPTIONAL LPCSTR pszPubKeyOID', 'IN const PUBLICKEYSTRUC *pPubKeyStruc', 'IN DWORD cbPubKeyStruc', 'IN DWORD dwFlags', 'IN OPTIONAL void *pvReserved', 'OUT BYTE *pbHash', 'IN OUT DWORD *pcbHash']
BOOL CertCreateCertificateChainEngine ['IN PCERT_CHAIN_ENGINE_CONFIG pConfig', 'OUT HCERTCHAINENGINE* phChainEngine']
VOID CertFreeCertificateChainEngine ['IN HCERTCHAINENGINE hChainEngine']
BOOL CertResyncCertificateChainEngine ['IN HCERTCHAINENGINE hChainEngine']
BOOL CertGetCertificateChain ['IN OPTIONAL HCERTCHAINENGINE hChainEngine', 'IN PCCERT_CONTEXT pCertContext', 'IN OPTIONAL LPFILETIME pTime', 'IN OPTIONAL HCERTSTORE hAdditionalStore', 'IN PCERT_CHAIN_PARA pChainPara', 'IN DWORD dwFlags', 'IN LPVOID pvReserved', 'OUT PCCERT_CHAIN_CONTEXT* ppChainContext']
VOID CertFreeCertificateChain ['IN PCCERT_CHAIN_CONTEXT pChainContext']
PCCERT_CHAIN_CONTEXT CertDuplicateCertificateChain ['IN PCCERT_CHAIN_CONTEXT pChainContext']
PCCERT_CHAIN_CONTEXT CertFindChainInStore ['IN HCERTSTORE hCertStore', 'IN DWORD dwCertEncodingType', 'IN DWORD dwFindFlags', 'IN DWORD dwFindType', 'IN const void *pvFindPara', 'IN PCCERT_CHAIN_CONTEXT pPrevChainContext']
BOOL CertVerifyCertificateChainPolicy ['IN LPCSTR pszPolicyOID', 'IN PCCERT_CHAIN_CONTEXT pChainContext', 'IN PCERT_CHAIN_POLICY_PARA pPolicyPara', 'IN OUT PCERT_CHAIN_POLICY_STATUS pPolicyStatus']
BOOL CryptStringToBinaryA ['IN LPCSTR pszString', 'IN DWORD cchString', 'IN DWORD dwFlags', 'IN BYTE *pbBinary', 'IN OUT DWORD *pcbBinary', 'OUT DWORD *pdwSkip', ' OUT DWORD *pdwFlags //OPTIONAL']
BOOL CryptStringToBinaryW ['IN LPCWSTR pszString', 'IN DWORD cchString', 'IN DWORD dwFlags', 'IN BYTE *pbBinary', 'IN OUT DWORD *pcbBinary', 'OUT DWORD *pdwSkip', ' OUT DWORD *pdwFlags //OPTIONAL']
BOOL CryptBinaryToStringA ['IN CONST BYTE *pbBinary', 'IN DWORD cbBinary', 'IN DWORD dwFlags', 'IN LPSTR pszString', 'IN OUT DWORD *pcchString']
BOOL CryptBinaryToStringW ['IN CONST BYTE *pbBinary', 'IN DWORD cbBinary', 'IN DWORD dwFlags', 'IN LPWSTR pszString', 'IN OUT DWORD *pcchString']
HCERTSTORE PFXImportCertStore ['IN CRYPT_DATA_BLOB* pPFX', 'IN LPCWSTR szPassword', 'IN DWORD dwFlags']
BOOL PFXIsPFXBlob ['IN CRYPT_DATA_BLOB* pPFX']
BOOL PFXVerifyPassword ['IN CRYPT_DATA_BLOB* pPFX', 'IN LPCWSTR szPassword', 'IN DWORD dwFlags']
BOOL PFXExportCertStoreEx ['IN HCERTSTORE hStore', 'IN OUT CRYPT_DATA_BLOB* pPFX', 'IN LPCWSTR szPassword', 'IN void* pvReserved', 'IN DWORD dwFlags']
BOOL PFXExportCertStore ['IN HCERTSTORE hStore', 'IN OUT CRYPT_DATA_BLOB* pPFX', 'IN LPCWSTR szPassword', 'IN DWORD dwFlags']
STRSAFEAPI StringLengthWorkerA ['STRSAFE_LPCSTR psz', 'size_t cchMax', '_opt size_t* pcchLength']
STRSAFEAPI StringLengthWorkerW ['STRSAFE_LPCWSTR psz', 'size_t cchMax', '_opt size_t* pcchLength']
STRSAFEAPI StringCchLengthA ['STRSAFE_LPCSTR psz', 'size_t cchMax', '_opt size_t* pcchLength']
STRSAFEAPI StringCchLengthW ['STRSAFE_LPCWSTR psz', 'size_t cchMax', '_opt size_t* pcchLength']
STRSAFEAPI StringCbLengthA ['STRSAFE_LPCSTR psz', 'size_t cbMax', '_opt size_t* pcbLength']
STRSAFEAPI StringCbLengthW ['STRSAFE_LPCWSTR psz', 'size_t cbMax', '_opt size_t* pcbLength']
APIENTRY RegCloseKey ['_opt HKEY hKey']
APIENTRY RegCreateKeyExA ['_opt HKEY hKey', 'LPCSTR lpSubKey', '__reserved DWORD Reserved', '_opt LPSTR lpClass', 'DWORD dwOptions', 'REGSAM samDesired', '_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes', 'PHKEY phkResult', '_opt LPDWORD lpdwDisposition']
APIENTRY RegCreateKeyExW ['_opt HKEY hKey', 'LPCWSTR lpSubKey', '__reserved DWORD Reserved', '_opt LPWSTR lpClass', 'DWORD dwOptions', 'REGSAM samDesired', '_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes', 'PHKEY phkResult', '_opt LPDWORD lpdwDisposition']
APIENTRY RegDeleteKeyA ['_opt HKEY hKey', 'LPCSTR lpSubKey']
APIENTRY RegDeleteKeyW ['_opt HKEY hKey', 'LPCWSTR lpSubKey']
APIENTRY RegDeleteValueA ['_opt HKEY hKey', '_opt LPCSTR lpValueName']
APIENTRY RegDeleteValueW ['_opt HKEY hKey', '_opt LPCWSTR lpValueName']
APIENTRY RegFlushKey ['HKEY hKey']
APIENTRY RegOpenKeyExA ['_opt HKEY hKey', '_opt LPCSTR lpSubKey', '__reserved DWORD ulOptions', '__reserved REGSAM samDesired', 'PHKEY phkResult']
APIENTRY RegOpenKeyExW ['_opt HKEY hKey', '_opt LPCWSTR lpSubKey', '__reserved DWORD ulOptions', '__reserved REGSAM samDesired', 'PHKEY phkResult']
APIENTRY CeFindFirstRegChange ['HKEY hKey', 'BOOL bWatchSubTree', '_opt DWORD dwNotifyFilter']
APIENTRY CeFindNextRegChange ['HANDLE hNotify']
APIENTRY CeFindCloseRegChange ['HANDLE hNotify']
APIENTRY CeRegGetInfo ['HKEY hKey', 'out PCE_REGISTRY_INFO pInfo']
BOOL CertSelectCertificateA ['IN OUT PCERT_SELECT_STRUCT_A pCertSelectInfo']
BOOL CertSelectCertificateW ['IN OUT PCERT_SELECT_STRUCT_W pCertSelectInfo']
BOOL CertViewPropertiesA ['PCERT_VIEWPROPERTIES_STRUCT_A pCertViewInfo']
BOOL CertViewPropertiesW ['PCERT_VIEWPROPERTIES_STRUCT_W pCertViewInfo']
DWORD GetFriendlyNameOfCertA ['PCCERT_CONTEXT pccert', 'LPSTR pchBuffer', 'DWORD cchBuffer']
DWORD GetFriendlyNameOfCertW ['PCCERT_CONTEXT pccert', 'LPWSTR pchBuffer', 'DWORD cchBuffer']
CRYPTDLGAPI CertModifyCertificatesToTrust ['int cCerts', ' PCTL_MODIFY_REQUEST rgCerts', ' LPCSTR szPurpose', ' HWND hwnd', ' HCERTSTORE hcertstoreTrust', ' PCCERT_CONTEXT pccertSigner']
BOOL CertConfigureTrustA ['void']
BOOL FormatVerisignExtension ['DWORD ', 'DWORD ', 'DWORD ', 'void * ', 'LPCSTR ', 'const BYTE * ', 'DWORD ', 'void * pbFormat', 'DWORD * pcbFormat']
HANDLE IcmpCreateFile ['VOID']
HANDLE Icmp6CreateFile ['VOID']
BOOL IcmpCloseHandle ['HANDLE IcmpHandle']
DWORD IcmpSendEcho ['HANDLE IcmpHandle', 'IPAddr DestinationAddress', 'LPVOID RequestData', 'WORD RequestSize', 'PIP_OPTION_INFORMATION RequestOptions', 'LPVOID ReplyBuffer', 'DWORD ReplySize', 'DWORD Timeout']
DWORD IcmpSendEcho2 ['HANDLE IcmpHandle', 'HANDLE Event', '#ifdef PIO_APC_ROUTINE_DEFINED PIO_APC_ROUTINE ApcRoutine', '#else FARPROC ApcRoutine', '#endif PVOID ApcContext', 'IPAddr DestinationAddress', 'LPVOID RequestData', 'WORD RequestSize', 'PIP_OPTION_INFORMATION RequestOptions', 'LPVOID ReplyBuffer', 'DWORD ReplySize', 'DWORD Timeout']
DWORD Icmp6SendEcho2 ['HANDLE IcmpHandle', 'HANDLE Event', '#ifdef PIO_APC_ROUTINE_DEFINED PIO_APC_ROUTINE ApcRoutine', '#else FARPROC ApcRoutine', '#endif PVOID ApcContext', 'sockaddr_in6 *SourceAddress', 'sockaddr_in6 *DestinationAddress', 'LPVOID RequestData', 'WORD RequestSize', 'PIP_OPTION_INFORMATION RequestOptions', 'LPVOID ReplyBuffer', 'DWORD ReplySize', 'DWORD Timeout']
DWORD IcmpParseReplies ['LPVOID ReplyBuffer', 'DWORD ReplySize']
DWORD Icmp6ParseReplies ['LPVOID ReplyBuffer', 'DWORD ReplySize']
BOOL CreatePipe ['OUT PHANDLE phReadPipe', 'OUT PHANDLE phWritePipe', 'IN LPSECURITY_ATTRIBUTES lpPipeAttributes', 'IN DWORD nSize']
BOOL ConnectNamedPipe ['IN HANDLE hNamedPipe', 'IN LPOVERLAPPED lpOverlapped']
BOOL DisconnectNamedPipe ['IN HANDLE hNamedPipe']
BOOL SetNamedPipeHandleState ['IN HANDLE hNamedPipe', 'IN LPDWORD lpMode', 'IN LPDWORD lpMaxCollectionCount', 'IN LPDWORD lpCollectDataTimeout']
BOOL GetNamedPipeInfo ['IN HANDLE hNamedPipe', 'IN LPDWORD lpFlags', 'OUT LPDWORD lpOutBufferSize', 'OUT LPDWORD lpInBufferSize', 'OUT LPDWORD lpMaxInstances']
BOOL PeekNamedPipe ['IN HANDLE hNamedPipe', 'OUT LPVOID lpBuffer', 'IN DWORD nBufferSize', 'OUT LPDWORD lpBytesRead', 'OUT LPDWORD lpTotalBytesAvail', 'OUT LPDWORD lpBytesLeftThisMessage']
HANDLE CreateNamedPipeW ['IN LPCWSTR lpName', 'IN DWORD dwOpenMode', 'IN DWORD dwPipeMode', 'IN DWORD nMaxInstances', 'IN DWORD nOutBufferSize', 'IN DWORD nInBufferSize', 'IN DWORD nDefaultTimeOut', 'IN LPSECURITY_ATTRIBUTES lpSecurityAttributes']
BOOL GetNamedPipeHandleStateW ['IN HANDLE hNamedPipe', 'OUT LPDWORD lpState', 'OUT LPDWORD lpCurInstances', 'OUT LPDWORD lpMaxCollectionCount', 'OUT LPDWORD lpCollectDataTimeout', 'OUT LPWSTR lpUserName', 'IN DWORD nMaxUserNameSize']
BOOL CallNamedPipeW ['IN LPCWSTR lpPipeName', 'IN LPVOID lpInBuffer', 'IN DWORD nInBufferSize', 'OUT LPVOID lpOutBuffer', 'IN DWORD nOutBufferSize', 'OUT LPDWORD lpBytesRead', 'IN DWORD nTimeOut']
BOOL WaitNamedPipeW ['IN LPCWSTR lpNamedPipeName', 'IN DWORD nTimeOut']
BOOL ReadNamedPipe ['IN HANDLE hNamedPipe', 'IN LPVOID lpBuffer', 'IN DWORD nNumberOfBytesToRead', 'OUT LPDWORD lpNumberOfBytesRead', 'OUT LPOVERLAPPED lpOverlapped']
BOOL WriteNamedPipe ['IN HANDLE hNamedPipe', 'IN LPCVOID lpBuffer', 'IN DWORD nNumberOfBytesToWrite', 'OUT LPDWORD lpNumberOfBytesWritten', 'OUT LPOVERLAPPED lpOverlapped']
BOOL CloseNamedPipe ['IN HANDLE hPipe']
BOOL QuerySessionKeyOfBinding ['IN LPWSTR lpPipeName', 'OUT LPVOID lpSessionKey', 'IN DWORD nSessionKeySize']
RPC_ENTRY RpcAsyncInitializeHandle ['PRPC_ASYNC_STATE pAsync', 'unsigned int Size']
THEMEAPI CloseThemeData ['HTHEME hTheme']
THEMEAPI DrawThemeBackground ['HTHEME hTheme', 'HDC hdc', 'int iPartId', 'int iStateId', 'const RECT *pRect', 'OPTIONAL const RECT *pClipRect']
THEMEAPI DrawThemeText ['HTHEME hTheme', 'HDC hdc', 'int iPartId', 'int iStateId', 'LPCWSTR pszText', 'int iCharCount', 'DWORD dwTextFlags', 'DWORD dwTextFlags2', 'const RECT *pRect']
THEMEAPI GetThemeBackgroundContentRect ['HTHEME hTheme', 'OPTIONAL HDC hdc', 'int iPartId', 'int iStateId', 'const RECT *pBoundingRect', 'OUT RECT *pContentRect']
THEMEAPI GetThemeBackgroundExtent ['HTHEME hTheme', 'OPTIONAL HDC hdc', 'int iPartId', 'int iStateId', 'const RECT *pContentRect', 'OUT RECT *pExtentRect']
THEMEAPI GetThemePartSize ['HTHEME hTheme', 'HDC hdc', 'int iPartId', 'int iStateId', 'OPTIONAL RECT *prc', 'enum THEMESIZE eSize', 'OUT SIZE *psz']
THEMEAPI GetThemeTextExtent ['HTHEME hTheme', 'HDC hdc', 'int iPartId', 'int iStateId', 'LPCWSTR pszText', 'int iCharCount', 'DWORD dwTextFlags', 'OPTIONAL const RECT *pBoundingRect', 'OUT RECT *pExtentRect']
THEMEAPI GetThemeTextMetrics ['HTHEME hTheme', 'OPTIONAL HDC hdc', 'int iPartId', 'int iStateId', 'OUT TEXTMETRIC* ptm']
THEMEAPI GetThemeBackgroundRegion ['HTHEME hTheme', 'OPTIONAL HDC hdc', 'int iPartId', 'int iStateId', 'const RECT *pRect', 'OUT HRGN *pRegion']
THEMEAPI HitTestThemeBackground ['HTHEME hTheme', 'OPTIONAL HDC hdc', 'int iPartId', 'int iStateId', 'DWORD dwOptions', 'const RECT *pRect', 'OPTIONAL HRGN hrgn', 'POINT ptTest', 'OUT WORD *pwHitTestCode']
THEMEAPI DrawThemeEdge ['HTHEME hTheme', 'HDC hdc', 'int iPartId', 'int iStateId', 'const RECT *pDestRect', 'UINT uEdge', 'UINT uFlags', 'OPTIONAL OUT RECT *pContentRect']
THEMEAPI DrawThemeIcon ['HTHEME hTheme', 'HDC hdc', 'int iPartId', 'int iStateId', 'const RECT *pRect', 'HIMAGELIST himl', 'int iImageIndex']
THEMEAPI GetThemeColor ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT COLORREF *pColor']
THEMEAPI GetThemeMetric ['HTHEME hTheme', 'OPTIONAL HDC hdc', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT int *piVal']
THEMEAPI GetThemeString ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT LPWSTR pszBuff', 'int cchMaxBuffChars']
THEMEAPI GetThemeBool ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT BOOL *pfVal']
THEMEAPI GetThemeInt ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT int *piVal']
THEMEAPI GetThemeEnumValue ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT int *piVal']
THEMEAPI GetThemePosition ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT POINT *pPoint']
THEMEAPI GetThemeFont ['HTHEME hTheme', 'OPTIONAL HDC hdc', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT LOGFONT *pFont']
THEMEAPI GetThemeRect ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT RECT *pRect']
THEMEAPI GetThemeMargins ['HTHEME hTheme', 'OPTIONAL HDC hdc', 'int iPartId', 'int iStateId', 'int iPropId', 'OPTIONAL RECT *prc', 'OUT MARGINS *pMargins']
THEMEAPI GetThemeIntList ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT INTLIST *pIntList']
THEMEAPI GetThemePropertyOrigin ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT enum PROPERTYORIGIN *pOrigin']
THEMEAPI GetThemePropertyValues ['IN const THEMEPROPERTYID* prgProperties', 'IN int cProperties', 'OUT BYTE** ppbValues', 'OUT ULONG* pcbValues']
THEMEAPI FreeThemePropertyValues ['IN BYTE* pbValues']
THEMEAPI SetWindowTheme ['HWND hwnd', 'LPCWSTR pszSubAppName', 'LPCWSTR pszSubIdList']
THEMEAPI GetThemeFilename ['HTHEME hTheme', 'int iPartId', 'int iStateId', 'int iPropId', 'OUT LPWSTR pszThemeFileName', 'int cchMaxBuffChars']
THEMEAPI GetThemeSysFont ['HTHEME hTheme', 'int iFontId', 'OUT LOGFONT *plf']
THEMEAPI GetThemeSysString ['HTHEME hTheme', 'int iStringId', 'OUT LPWSTR pszStringBuff', 'int cchMaxStringChars']
THEMEAPI GetThemeSysInt ['HTHEME hTheme', 'int iIntId', 'int *piValue']
THEMEAPI EnableThemeDialogTexture ['HWND hwnd', 'DWORD dwFlags']
THEMEAPI GetCurrentThemeName ['OUT LPWSTR pszThemeFileName', 'int cchMaxNameChars', 'OUT OPTIONAL LPWSTR pszColorBuff', 'int cchMaxColorChars', 'OUT OPTIONAL LPWSTR pszSizeBuff', 'int cchMaxSizeChars']
THEMEAPI GetThemeDocumentationProperty ['LPCWSTR pszThemeName', 'LPCWSTR pszPropertyName', 'OUT LPWSTR pszValueBuff', 'int cchMaxValChars']
THEMEAPI DrawThemeParentBackground ['HWND hwnd', 'HDC hdc', 'OPTIONAL RECT* prc']
THEMEAPI EnableTheming ['BOOL fEnable']
THEMEAPI DrawThemeBackgroundEx ['HTHEME hTheme', 'HDC hdc', 'int iPartId', 'int iStateId', 'const RECT *pRect', 'OPTIONAL const DTBGOPTS *pOptions']
THEMEAPI LoadThemeSymbols ['IN OPTIONAL LPCWSTR pszThemeFile', 'OUT HTHEMESYMBOLS* phSymbols']
THEMEAPI FreeThemeSymbols ['IN HTHEMESYMBOLS hSymbols']
THEMEAPI ParseThemeSymbol ['IN HTHEMESYMBOLS hThemeSymbol', 'IN LPCWSTR pszSpec', 'OUT OPTIONAL LPWSTR pszClass', 'IN OUT OPTIONAL int* pcchClass', 'OUT OPTIONAL int* piPart', 'OUT OPTIONAL int* piState', 'OUT OPTIONAL int* piProperty', 'OUT OPTIONAL int* piType']
int IsDialogBoxHandled ['IN HWND hWnd', 'IN DWORD dwAction', 'IN DWORD dwPermissions', 'IN LPCTSTR lpszText']
BOOL GetStoreInformation ['LPSTORE_INFORMATION lpsi']
HANDLE CeFindFirstDatabase ['DWORD dwClassID']
CEOID CeFindNextDatabase ['HANDLE hEnum']
CEOID CeCreateDatabase ['LPWSTR lpszname', 'DWORD dwClassID', 'WORD wNumSortOrder', 'SORTORDERSPEC *rgSortSpecs']
CEOID CeCreateDatabaseEx ['PCEGUID pguid', 'CEDBASEINFO *pInfo']
BOOL CeSetDatabaseInfo ['CEOID oidDbase', 'CEDBASEINFO *pNewInfo']
BOOL CeSetDatabaseInfoEx ['PCEGUID pguid', 'CEOID oidDbase', 'CEDBASEINFO *pNewInfo']
HANDLE CeOpenDatabase ['PCEOID poid', 'LPWSTR lpszName', 'CEPROPID propid', 'DWORD dwFlags', 'HWND hwndNotify']
HANDLE CeOpenDatabaseEx ['PCEGUID pguid', 'PCEOID poid', 'LPWSTR lpszName', 'CEPROPID propid', 'DWORD dwFlags', 'CENOTIFYREQUEST *pReq']
BOOL CeDeleteDatabase ['CEOID oid']
CEOID CeReadRecordProps ['HANDLE hDbase', 'DWORD dwFlags', 'LPWORD lpcPropID', 'CEPROPID *rgPropID', 'LPBYTE *lplpBuffer', 'LPDWORD lpcbBuffer']
CEOID CeSeekDatabase ['HANDLE hDatabase', 'DWORD dwSeekType', 'DWORD dwValue', 'LPDWORD lpdwIndex']
BOOL CeGetDBInformationByHandle ['HANDLE hDbase', 'LPBY_HANDLE_DB_INFORMATION lpDBInfo']
HANDLE CeFindFirstDatabaseEx ['PCEGUID pguid', 'DWORD dwClassID']
CEOID CeFindNextDatabaseEx ['HANDLE hEnum', 'PCEGUID pguid']
CEOID CeCreateDatabaseEx2 ['PCEGUID pguid', 'CEDBASEINFOEX *pInfo']
BOOL CeSetDatabaseInfoEx2 ['PCEGUID pguid', 'CEOID oidDbase', 'CEDBASEINFOEX *pNewInfo']
HANDLE CeOpenDatabaseEx2 ['PCEGUID pguid', 'PCEOID poid', 'LPWSTR lpszName', 'SORTORDERSPECEX* pSort', 'DWORD dwFlags', 'CENOTIFYREQUEST *pReq']
BOOL CeDeleteDatabaseEx ['PCEGUID pguid', 'CEOID oid']
CEOID CeSeekDatabaseEx ['HANDLE hDatabase', 'DWORD dwSeekType', 'DWORD dwValue', 'WORD wNumVals', 'LPDWORD lpdwIndex']
BOOL CeDeleteRecord ['HANDLE hDatabase', 'CEOID oidRecord']
CEOID CeReadRecordPropsEx ['HANDLE hDbase', 'DWORD dwFlags', 'LPWORD lpcPropID', 'CEPROPID *rgPropID', 'LPBYTE *lplpBuffer', 'LPDWORD lpcbBuffer', 'HANDLE hHeap']
BOOL CeMountDBVol ['PCEGUID pguid', 'LPWSTR lpszVol', 'DWORD dwFlags']
BOOL CeUnmountDBVol ['PCEGUID pguid']
BOOL CeFlushDBVol ['PCEGUID pguid']
BOOL CeEnumDBVolumes ['PCEGUID pguid', 'LPWSTR lpBuf', 'DWORD dwSize']
BOOL CeFreeNotification ['PCENOTIFYREQUEST pRequest', 'PCENOTIFICATION pNotify']
VOID CeChangeDatabaseLCID ['PCEGUID pguid', 'DWORD LCID']
BOOL CeOidGetInfoEx2 ['PCEGUID pguid', 'CEOID oid', 'CEOIDINFOEX *oidInfo']
BOOL CeOidGetInfoEx ['PCEGUID pguid', 'CEOID oid', 'CEOIDINFO *oidInfo']
BOOL CeOidGetInfo ['CEOID oid', 'CEOIDINFO *oidInfo']
BOOL SDInitializeCardLib ['']
BOOL SDDeinitializeCardLib ['']
PVOID SDAllocateMemoryWithTag ['ULONG Size', 'ULONG Tag']
VOID SDFreeMemory ['PVOID pMemory']
VOID SDDeleteMemList ['SD_MEMORY_LIST_HANDLE hList']
SD_MEMORY_LIST_HANDLE SDCreateMemoryList ['ULONG Tag', 'ULONG Depth', 'ULONG EntrySize']
VOID SDFreeToMemList ['SD_MEMORY_LIST_HANDLE hList', 'PVOID pMemory']
PVOID SDAllocateFromMemList ['SD_MEMORY_LIST_HANDLE hList']
BOOL FSDMGR_InstallFileLock ['PACQUIREFILELOCKSTATE pAcquireFileLockState', 'PRELEASEFILELOCKSTATE pReleaseFileLockState', 'DWORD dwHandle', 'DWORD dwFlags', 'DWORD dwReserved', 'DWORD nNumberOfBytesToLockLow', 'DWORD nNumberOfBytesToLockHigh', 'LPOVERLAPPED lpOverlapped']
BOOL FSDMGR_RemoveFileLock ['PACQUIREFILELOCKSTATE pAcquireFileLockState', 'PRELEASEFILELOCKSTATE pReleaseFileLockState', 'DWORD dwHandle', 'DWORD dwReserved', 'DWORD nNumberOfBytesToLockLow', 'DWORD nNumberOfBytesToLockHigh', 'LPOVERLAPPED lpOverlapped']
BOOL FSDMGR_RemoveFileLockEx ['PACQUIREFILELOCKSTATE pAcquireFileLockState', 'PRELEASEFILELOCKSTATE pReleaseFileLockState', 'DWORD dwHandle']
BOOL FSDMGR_TestFileLock ['PACQUIREFILELOCKSTATE pAcquireFileLockState', 'PRELEASEFILELOCKSTATE pReleaseFileLockState', 'DWORD dwHandle', 'BOOL fRead', 'DWORD cbReadWrite']
BOOL FSDMGR_TestFileLockEx ['PACQUIREFILELOCKSTATE pAcquireFileLockState', 'PRELEASEFILELOCKSTATE pReleaseFileLockState', 'DWORD dwHandle', 'BOOL fRead', 'DWORD cbReadWrite', 'DWORD dwOffsetLow', 'DWORD dwOffsetHigh']
VOID FSDMGR_EmptyLockContainer ['PFILELOCKSTATE pFileLockState']
void _m_femms ['void']
__m64 _m_pavgusb ['__m64', '__m64']
__m64 _m_pf2id ['__m64']
__m64 _m_pfacc ['__m64', '__m64']
__m64 _m_pfadd ['__m64', '__m64']
__m64 _m_pfcmpeq ['__m64', '__m64']
__m64 _m_pfcmpge ['__m64', '__m64']
__m64 _m_pfcmpgt ['__m64', '__m64']
__m64 _m_pfmax ['__m64', '__m64']
__m64 _m_pfmin ['__m64', '__m64']
__m64 _m_pfmul ['__m64', '__m64']
__m64 _m_pfrcp ['__m64']
__m64 _m_pfrcpit1 ['__m64', '__m64']
__m64 _m_pfrcpit2 ['__m64', '__m64']
__m64 _m_pfrsqrt ['__m64']
__m64 _m_pfrsqit1 ['__m64', '__m64']
__m64 _m_pfsub ['__m64', '__m64']
__m64 _m_pfsubr ['__m64', '__m64']
__m64 _m_pi2fd ['__m64']
__m64 _m_pmulhrw ['__m64', '__m64']
void _m_prefetch ['void*']
void _m_prefetchw ['volatile const void*_Source']
__m64 _m_from_float ['float']
float _m_to_float ['__m64']
__m64 _m_pf2iw ['__m64']
__m64 _m_pfnacc ['__m64', '__m64']
__m64 _m_pfpnacc ['__m64', '__m64']
__m64 _m_pi2fw ['__m64']
__m64 _m_pswapd ['__m64']
DWORD RasGetEapUserData ['IN HANDLE\thToken', '\tIN LPCTSTR pszPhonebook', '\tIN LPCTSTR pszEntry', '\tOUT PBYTE pbEapData', '\tIN\tOUT\tPDWORD pdwSizeofEapData']
DWORD RasSetEapUserData ['IN\tHANDLE\thToken', '\tIN\tLPCTSTR pszPhonebook', '\tIN\tLPCTSTR pszEntry', '\tIN\tPBYTE\tpbEapData', '\tIN\tDWORD\tdwSizeofEapData']
DWORD RasGetEapConnectionData ['IN LPCTSTR pszPhonebook', '\tIN LPCTSTR pszEntry', '\tOUT PBYTE pbEapData', '\tIN\tOUT\tPDWORD pdwSizeofEapData']
DWORD RasSetEapConnectionData ['IN\tLPCTSTR pszPhonebook', '\tIN\tLPCTSTR pszEntry', '\tIN\tPBYTE\tpbEapData', '\tIN\tDWORD\tdwSizeofEapData']
BOOL IsLoggingEnabledA ['IN LPCSTR pszUrl']
BOOL IsLoggingEnabledW ['IN LPCWSTR pwszUrl']
BOOL WriteHitLogging ['IN LPHIT_LOGGING_INFO lpLogginginfo']
BOOL CredUIInitControls ['']
DWORD CredUIStoreSSOCredW ['PCWSTR pszRealm', 'PCWSTR pszUsername', 'PCWSTR pszPassword', 'BOOL bPersist']
DWORD CredUIStoreSSOCredA ['PWSTR pszRealm', 'PWSTR pszUsername', 'PWSTR pszPassword', 'BOOL bPersist']
DWORD CredUIReadSSOCredW ['PCWSTR pszRealm', 'PWSTR* ppszUsername']
DWORD CredUIReadSSOCredA ['PCSTR pszRealm', 'PSTR* ppszUsername']
ULONG READ_PORT_ULONG ['PULONG port']
VOID WRITE_PORT_ULONG ['PULONG port', 'ULONG value']
USHORT READ_PORT_USHORT ['PUSHORT port']
VOID WRITE_PORT_USHORT ['PUSHORT port', 'USHORT value']
UCHAR READ_PORT_UCHAR ['PUCHAR port']
VOID WRITE_PORT_UCHAR ['PUCHAR port', 'UCHAR value']
VOID READ_PORT_BUFFER_UCHAR ['PUCHAR Port', 'PUCHAR Buffer', 'ULONG Count']
VOID READ_PORT_BUFFER_USHORT ['PUSHORT Port', 'PUSHORT Buffer', 'ULONG Count']
VOID READ_PORT_BUFFER_ULONG ['PULONG Port', 'PULONG Buffer', 'ULONG Count']
VOID WRITE_PORT_BUFFER_UCHAR ['PUCHAR Port', 'PUCHAR Buffer', 'ULONG Count']
VOID WRITE_PORT_BUFFER_USHORT ['PUSHORT Port', 'PUSHORT Buffer', 'ULONG Count']
VOID WRITE_PORT_BUFFER_ULONG ['PULONG Port', 'PULONG Buffer', 'ULONG Count']
HANDLE _internal_CreateThread ['LPSECURITY_ATTRIBUTES lpsa', 'DWORD cbStack', 'LPTHREAD_START_ROUTINE lpStartAddr', 'LPVOID lpvThreadParam', 'DWORD fdwCreate', 'LPDWORD lpIDThread']
int _internal_GetThreadPriority ['HANDLE hThread']
BOOL _internal_SetThreadPriority ['HANDLE hThread', 'int nPriority']
BOOL IsStorageManagerRunning ['']
HANDLE OpenStore ['LPCTSTR szDeviceName']
BOOL DismountStore ['HANDLE hStore']
BOOL FormatStore ['HANDLE hStore']
HANDLE FindFirstStore ['PSTOREINFO pStoreInfo']
BOOL FindNextStore ['HANDLE hSearch', 'PSTOREINFO pStoreInfo']
BOOL FindCloseStore ['HANDLE hSearch']
BOOL GetStoreInfo ['HANDLE hStore', 'PSTOREINFO pStoreInfo']
BOOL CreatePartition ['HANDLE hStore', 'LPCTSTR szPartitionName', 'SECTORNUM snNumSectors']
BOOL CreatePartitionEx ['HANDLE hStore', 'LPCTSTR szPartitionName', 'BYTE bPartType', 'SECTORNUM snNumSectors']
BOOL DeletePartition ['HANDLE hStore', 'LPCTSTR szPartitionName']
HANDLE OpenPartition ['HANDLE hStore', 'LPCTSTR szPartitionName']
BOOL MountPartition ['HANDLE hPartition']
BOOL DismountPartition ['HANDLE hPartition']
BOOL RenamePartition ['HANDLE hPartition', 'LPCTSTR szNewName']
BOOL SetPartitionAttributes ['HANDLE hPartition', 'DWORD dwAttrs']
BOOL GetPartitionInfo ['HANDLE hPartition', 'PPARTINFO pPartInfo']
BOOL FormatPartition ['HANDLE hPartition']
BOOL FormatPartitionEx ['HANDLE hPartition', 'BYTE bPartType', 'BOOL bAuto']
HANDLE FindFirstPartition ['HANDLE hStore', 'PPARTINFO pPartInfo']
BOOL FindNextPartition ['HANDLE hSearch', 'PPARTINFO pPartInfo']
BOOL FindClosePartition ['HANDLE hSearch']
BOOL CeGetVolumeInfoW ['IN LPCWSTR pszRootPath', 'IN CE_VOLUME_INFO_LEVEL InfoLevel', 'OUT LPCE_VOLUME_INFO lpVolumeInfo']
WINOLEAUTAPI PropVariantCopy ['PROPVARIANT * pvarDest', 'const PROPVARIANT * pvarSrc']
WINOLEAUTAPI PropVariantClear ['PROPVARIANT * pvar']
WINOLEAUTAPI FreePropVariantArray ['ULONG cVariants', 'PROPVARIANT * rgvars']
WINOLEAPI StgCreatePropStg ['IUnknown* pUnk', 'REFFMTID fmtid', 'const CLSID *pclsid', 'DWORD grfFlags', 'DWORD dwReserved', 'IPropertyStorage **ppPropStg']
WINOLEAPI StgOpenPropStg ['IUnknown* pUnk', 'REFFMTID fmtid', 'DWORD grfFlags', 'DWORD dwReserved', 'IPropertyStorage **ppPropStg']
WINOLEAPI StgCreatePropSetStg ['IStorage *pStorage', 'DWORD dwReserved', 'IPropertySetStorage **ppPropSetStg']
WINOLEAPI FmtIdToPropStgName ['const FMTID *pfmtid', 'LPOLESTR oszName']
WINOLEAPI PropStgNameToFmtId ['const LPOLESTR oszName', 'FMTID *pfmtid']
BOOL PossiblyEatMessage ['HWND hwnd', 'UINT uMsg', 'WPARAM wParam', 'LPARAM lParam']
BOOLAPI InternetDebugGetLocalTime ['OUT SYSTEMTIME * pstLocalTime', 'OUT DWORD * pdwReserved']
BOOLAPI HttpCheckDavComplianceA ['IN LPCSTR lpszUrl', 'IN LPCSTR lpszComplianceToken', 'IN OUT LPBOOL lpfFound', 'IN HWND hWnd', 'IN LPVOID lpvReserved']
BOOLAPI HttpCheckDavComplianceW ['IN LPCWSTR lpszUrl', 'IN LPCWSTR lpszComplianceToken', 'IN OUT LPBOOL lpfFound', 'IN HWND hWnd', 'IN LPVOID lpvReserved']
BOOLAPI HttpCheckCachedDavStatusA ['IN LPCSTR lpszUrl', 'IN OUT LPDWORD lpdwStatus']
BOOLAPI HttpCheckCachedDavStatusW ['IN LPCWSTR lpszUrl', 'IN OUT LPDWORD lpdwStatus']
BOOLAPI HttpCheckDavCollectionA ['IN LPCSTR lpszUrl', 'IN OUT LPBOOL lpfFound', 'IN HWND hWnd', 'IN LPVOID lpvReserved']
BOOLAPI HttpCheckDavCollectionW ['IN LPCWSTR lpszUrl', 'IN OUT LPBOOL lpfFound', 'IN HWND hWnd', 'IN LPVOID lpvReserved']
BOOLAPI IsUrlCacheEntryExpiredA ['IN LPCSTR lpszUrlName', 'IN DWORD dwFlags', 'IN OUT FILETIME* pftLastModified']
BOOLAPI IsUrlCacheEntryExpiredW ['IN LPCWSTR lpszUrlName', 'IN DWORD dwFlags', 'IN OUT FILETIME* pftLastModified']
BOOLAPI CreateUrlCacheContainerA ['IN LPCSTR Name', 'IN LPCSTR lpCachePrefix', 'LPCSTR lpszCachePath', 'IN DWORD KBCacheLimit', 'IN DWORD dwContainerType', 'IN DWORD dwOptions', 'IN OUT LPVOID pvBuffer', 'IN OUT LPDWORD cbBuffer']
BOOLAPI CreateUrlCacheContainerW ['IN LPCWSTR Name', 'IN LPCWSTR lpCachePrefix', 'LPCWSTR lpszCachePath', 'IN DWORD KBCacheLimit', 'IN DWORD dwContainerType', 'IN DWORD dwOptions', 'IN OUT LPVOID pvBuffer', 'IN OUT LPDWORD cbBuffer']
BOOLAPI DeleteUrlCacheContainerA ['IN LPCSTR Name', 'IN DWORD dwOptions']
BOOLAPI DeleteUrlCacheContainerW ['IN LPCWSTR Name', 'IN DWORD dwOptions']
BOOLAPI FindNextUrlCacheContainerA ['IN HANDLE hEnumHandle', 'OUT LPINTERNET_CACHE_CONTAINER_INFOA lpContainerInfo', 'IN OUT LPDWORD lpdwContainerInfoBufferSize']
BOOLAPI FindNextUrlCacheContainerW ['IN HANDLE hEnumHandle', 'OUT LPINTERNET_CACHE_CONTAINER_INFOW lpContainerInfo', 'IN OUT LPDWORD lpdwContainerInfoBufferSize']
BOOLAPI FreeUrlCacheSpaceA ['IN LPCSTR lpszCachePath', 'IN DWORD dwSize', 'IN DWORD dwFilter']
BOOLAPI FreeUrlCacheSpaceW ['IN LPCWSTR lpszCachePath', 'IN DWORD dwSize', 'IN DWORD dwFilter']
BOOLAPI GetUrlCacheConfigInfoA ['OUT LPINTERNET_CACHE_CONFIG_INFOA lpCacheConfigInfo', 'IN OUT LPDWORD lpdwCacheConfigInfoBufferSize', 'IN DWORD dwFieldControl']
BOOLAPI GetUrlCacheConfigInfoW ['OUT LPINTERNET_CACHE_CONFIG_INFOW lpCacheConfigInfo', 'IN OUT LPDWORD lpdwCacheConfigInfoBufferSize', 'IN DWORD dwFieldControl']
BOOLAPI SetUrlCacheConfigInfoA ['IN LPINTERNET_CACHE_CONFIG_INFOA lpCacheConfigInfo', 'IN DWORD dwFieldControl']
BOOLAPI SetUrlCacheConfigInfoW ['IN LPINTERNET_CACHE_CONFIG_INFOW lpCacheConfigInfo', 'IN DWORD dwFieldControl']
BOOLAPI UpdateUrlCacheContentPath ['LPSTR szNewPath']
BOOLAPI RegisterUrlCacheNotification ['IN HWND hWnd', 'IN UINT uMsg', 'IN GROUPID gid', 'IN DWORD dwOpsFilter', 'IN DWORD dwReserved']
BOOL GetUrlCacheHeaderData ['IN DWORD nIdx', 'OUT LPDWORD lpdwData']
BOOL SetUrlCacheHeaderData ['IN DWORD nIdx', 'IN DWORD dwData']
BOOL IncrementUrlCacheHeaderData ['IN DWORD nIdx', 'OUT LPDWORD lpdwData']
BOOL LoadUrlCacheContent ['']
BOOL GetUrlCacheContainerInfoA ['IN LPSTR lpszUrlName', 'OUT LPINTERNET_CACHE_CONTAINER_INFOA lpContainerInfo', 'IN OUT LPDWORD lpdwContainerInfoBufferSize', 'IN DWORD dwOptions']
BOOL GetUrlCacheContainerInfoW ['IN LPWSTR lpszUrlName', 'OUT LPINTERNET_CACHE_CONTAINER_INFOW lpContainerInfo', 'IN OUT LPDWORD lpdwContainerInfoBufferSize', 'IN DWORD dwOptions']
INTERNETAPI InternetGetDialEngineW ['IN LPWSTR pwzConnectoid', 'IN IDialEventSink * pdes', 'OUT IDialEngine ** ppde']
INTERNETAPI InternetGetDialBrandingW ['IN LPWSTR pwzConnectoid', 'OUT IDialBranding ** ppdb']
BOOL DoConnectoidsExist ['void']
BOOL GetDiskInfoA ['IN PSTR pszPath', 'IN OUT PDWORD pdwClusterSize', 'IN OUT PDWORDLONG pdlAvail', 'IN OUT PDWORDLONG pdlTotal']
BOOL PerformOperationOverUrlCacheA ['IN PCSTR pszUrlSearchPattern', 'IN DWORD dwFlags', 'IN DWORD dwFilter', 'IN GROUPID GroupId', 'OUT PVOID pReserved1', 'IN OUT PDWORD pdwReserved2', 'IN PVOID pReserved3', 'IN CACHE_OPERATOR op', 'IN OUT PVOID pOperatorData']
BOOL IsProfilesCapable ['']
BOOLAPI ImportCookieFileA ['IN LPCSTR szFilename']
BOOLAPI ImportCookieFileW ['IN LPCWSTR szFilename']
BOOLAPI ExportCookieFileA ['IN LPCSTR szFilename', 'BOOL fAppend']
BOOLAPI ExportCookieFileW ['IN LPCWSTR szFilename', 'BOOL fAppend']
BOOLAPI IsDomainLegalCookieDomainA ['IN LPCSTR pchDomain', 'IN LPCSTR pchFullDomain']
BOOLAPI IsDomainLegalCookieDomainW ['IN LPCWSTR pchDomain', 'IN LPCWSTR pchFullDomain']
UINT RegisterWindowMessageA ['LPCSTR lpString']
UINT RegisterWindowMessageW ['LPCWSTR lpString']
BOOL PostMessageA ['HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
BOOL PostMessageW ['HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
BOOL PostThreadMessageA ['DWORD idThread', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
BOOL PostThreadMessageW ['DWORD idThread', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
VOID PostQuitMessage ['int nExitCode']
LRESULT SendMessageA ['HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LRESULT SendMessageW ['HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
BOOL SendNotifyMessageA ['HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
BOOL SendNotifyMessageW ['HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LRESULT SendMessageTimeout ['HWND hWnd', 'UINT uMsg', 'WPARAM wParam', 'LPARAM lParam', 'UINT fuFlags', 'UINT uTimeout', 'PDWORD_PTR\tlpdwResult']
DWORD GetMessageQueueReadyTimeStamp ['HWND\thWnd']
BOOL InSendMessage ['VOID']
DWORD GetQueueStatus ['UINT flags']
BOOL GetMessageA ['LPMSG lpMsg', 'HWND hWnd', 'UINT wMsgFilterMin', 'UINT wMsgFilterMax']
BOOL GetMessageW ['LPMSG lpMsg', 'HWND hWnd', 'UINT wMsgFilterMin', 'UINT wMsgFilterMax']
BOOL PeekMessageW ['PMSG pMsg', 'HWND hWnd', 'UINT wMsgFilterMin', 'UINT wMsgFilterMax', 'UINT wRemoveMsg']
BOOL PeekMessageA ['PMSG pMsg', 'HWND hWnd', 'UINT wMsgFilterMin', 'UINT wMsgFilterMax', 'UINT wRemoveMsg']
BOOL TranslateMessage ['CONST MSG *pMsg']
LONG DispatchMessageA ['CONST MSG *lpMsg']
LONG DispatchMessageW ['CONST MSG *lpMsg']
DWORD GetMessagePos ['VOID']
UINT GetMessageSource ['void']
DWORD MsgWaitForMultipleObjects ['DWORD nCount', 'LPHANDLE pHandles', 'BOOL fWaitAll', 'DWORD dwMilliseconds', 'DWORD dwWakeMask']
HWND GetCapture ['VOID']
HWND SetCapture ['HWND hWnd']
BOOL ReleaseCapture ['VOID']
BOOL MoveWindow ['HWND hWnd', 'int X', 'int Y', 'int nWidth', 'int nHeight', 'BOOL bRepaint']
int SetWindowRgn ['HWND hwnd', 'HRGN hrgn', 'BOOL bRedraw']
int GetWindowRgn ['HWND hwnd', 'HRGN hrgn']
BOOL SetWindowPos ['HWND hwnd', 'HWND hwndInsertAfter', 'int x', 'int y', 'int dx', 'int dy', 'UINT fuFlags']
BOOL GetWindowRect ['HWND hwnd', 'LPRECT prc']
int GetWindowTextLengthA ['HWND hWnd']
int GetWindowTextLengthW ['HWND hWnd']
BOOL GetClientRect ['HWND hwnd', 'LPRECT prc']
BOOL AdjustWindowRectEx ['LPRECT prc', 'DWORD dwStyle', 'BOOL bMenu', 'DWORD dwExStyle']
BOOL ValidateRect ['HWND hWnd', 'CONST RECT *lpRect']
BOOL InvalidateRect ['HWND hwnd', 'LPCRECT prc', 'BOOL fErase']
BOOL ValidateRgn ['HWND hWnd', 'HRGN hRgn']
BOOL InvalidateRgn ['HWND hWnd', 'HRGN hRgn', 'BOOL fErase']
HWND GetWindow ['HWND hwnd', 'UINT uCmd']
BOOL BringWindowToTop ['HWND hWnd']
HDWP BeginDeferWindowPos ['int nNumWindows']
HDWP DeferWindowPos ['HDWP hWinPosInfo', 'HWND hWnd', 'HWND hWndInsertAfter', 'int x', 'int y', 'int cx', 'int cy', 'UINT uFlags']
BOOL EndDeferWindowPos ['HDWP hWinPosInfo']
BOOL SetProp ['HWND hWnd', 'LPCWSTR lpString', 'HANDLE hData']
HANDLE GetProp ['HWND hWnd', 'LPCWSTR lpString']
HANDLE RemoveProp ['HWND hWnd', 'LPCWSTR lpString']
int EnumPropsEx ['HWND hWnd', 'PROPENUMPROCEX lpEnumFunc', 'LPARAM lParam']
int ScrollWindowEx ['HWND hWnd', 'int dx', 'int dy', 'CONST RECT *prcScroll', 'CONST RECT *prcClip', 'HRGN hrgnUpdate', 'LPRECT prcUpdate', 'UINT flags']
BOOL ScrollDC ['HDC hDC', 'int dx', 'int dy', 'CONST RECT *lprcScroll', 'CONST RECT *lprcClip', 'HRGN hrgnUpdate', 'LPRECT lprcUpdate']
BOOL CheckMenuRadioItem ['HMENU', 'UINT', 'UINT', 'UINT', 'UINT']
HBITMAP LoadBitmapA ['HINSTANCE hInstance', 'LPCSTR lpBitmapName']
HBITMAP LoadBitmapW ['HINSTANCE hInstance', 'LPCWSTR lpBitmapName']
HMENU LoadMenuA ['HINSTANCE hInstance', 'LPCSTR lpMenuName']
HMENU LoadMenuW ['HINSTANCE hInstance', 'LPCWSTR lpMenuName']
BOOL DrawMenuBar ['HWND hWnd']
HMENU CreateMenu ['VOID']
HMENU CreatePopupMenu ['VOID']
BOOL DestroyMenu ['HMENU hMenu']
DWORD CheckMenuItem ['HMENU hMenu', 'UINT uIDCheckItem', 'UINT uCheck']
BOOL EnableMenuItem ['HMENU hMenu', 'UINT uIDEnableItem', 'UINT uEnable']
HMENU GetSubMenu ['HMENU hMenu', 'int nPos']
BOOL InsertMenuA ['HMENU hMenu', 'UINT uPosition', 'UINT uFlags', 'UINT uIDNewItem', 'LPCSTR lpNewItem']
BOOL InsertMenuW ['HMENU hMenu', 'UINT uPosition', 'UINT uFlags', 'UINT uIDNewItem', 'LPCWSTR lpNewItem']
BOOL AppendMenuA ['HMENU hMenu', 'UINT uFlags', 'UINT uIDNewItem', 'LPCSTR lpNewItem']
BOOL AppendMenuW ['HMENU hMenu', 'UINT uFlags', 'UINT uIDNewItem', 'LPCWSTR lpNewItem']
BOOL RemoveMenu ['HMENU hMenu', 'UINT uPosition', 'UINT uFlags']
BOOL DeleteMenu ['HMENU hMenu', 'UINT uPosition', 'UINT uFlags']
BOOL TrackPopupMenu ['HMENU hMenu', 'UINT uFlags', 'int x', 'int y', 'int nReserved', 'HWND hWnd', 'CONST RECT *prcRect']
BOOL TrackPopupMenuEx ['HMENU hmenu', 'UINT uFlags', 'int x', 'int y', 'HWND hwnd', 'LPTPMPARAMS lptpm']
BOOL SetMenuItemInfoA ['HMENU', 'UINT', 'BOOL', 'LPCMENUITEMINFOA']
BOOL SetMenuItemInfoW ['HMENU', 'UINT', 'BOOL', 'LPCMENUITEMINFOW']
HACCEL LoadAcceleratorsA ['HINSTANCE hInstance', 'LPCSTR lpTableName']
HACCEL LoadAcceleratorsW ['HINSTANCE hInstance', 'LPCWSTR lpTableName']
BOOL DestroyAcceleratorTable ['HACCEL hAccel']
BOOL SetSysColors ['int cElements', 'CONST INT * lpaElements', 'CONST COLORREF * lpaRgbValues']
BOOL SetRect ['LPRECT lprc', 'int xLeft', 'int yTop', 'int xRight', 'int yBottom']
BOOL SetRectEmpty ['LPRECT lprc']
BOOL CopyRect ['LPRECT lprcDst', 'CONST RECT *lprcSrc']
BOOL InflateRect ['LPRECT lprc', 'int dx', 'int dy']
BOOL IntersectRect ['LPRECT lprcDst', 'CONST RECT *lprcSrc1', 'CONST RECT *lprcSrc2']
BOOL UnionRect ['LPRECT lprcDst', 'CONST RECT *lprcSrc1', 'CONST RECT *lprcSrc2']
BOOL OffsetRect ['LPRECT lprc', 'int dx', 'int dy']
BOOL IsRectEmpty ['CONST RECT *lprc']
BOOL EqualRect ['CONST RECT *lprc1', 'CONST RECT *lprc2']
BOOL PtInRect ['CONST RECT *lprc', 'POINT pt']
BOOL SubtractRect ['LPRECT prcDst', 'CONST RECT *prcSrc1', 'CONST RECT *prcSrc2']
int MapWindowPoints ['HWND hWndFrom', 'HWND hWndTo', 'LPPOINT lpPoints', 'UINT cPoints']
HWND WindowFromPoint ['POINT Point']
HWND ChildWindowFromPoint ['HWND hWndParent', 'POINT Point']
BOOL ClientToScreen ['HWND hWnd', 'LPPOINT lpPoint']
BOOL ScreenToClient ['HWND hWnd', 'LPPOINT lpPoint']
BOOL SetWindowTextA ['HWND hWnd', 'LPCSTR lpString']
BOOL SetWindowTextW ['HWND hWnd', 'LPCWSTR lpString']
int GetWindowTextA ['HWND hWnd', 'LPSTR lpString', 'int nMaxCount']
HDC BeginPaint ['HWND hwnd', 'LPPAINTSTRUCT pps']
BOOL EndPaint ['HWND hwnd', 'LPPAINTSTRUCT pps']
BOOL GetUpdateRect ['HWND hWnd', 'LPRECT lpRect', 'BOOL bErase']
int GetUpdateRgn ['HWND hWnd', 'HRGN hRgn', 'BOOL bErase']
HDC GetDCEx ['HWND hWnd', 'HRGN hrgnClip', 'DWORD flags']
HWND GetDesktopWindow ['void']
BOOL IsWindow ['HWND hWnd']
BOOL IsWindowVisible ['HWND hWnd']
HWND CreateWindowExA ['DWORD dwExStyle', 'LPCSTR lpClassName', 'LPCSTR lpWindowName', 'DWORD dwStyle', 'int X', 'int Y', 'int nWidth', 'int nHeight', 'HWND hWndParent', 'HMENU hMenu', 'HINSTANCE hInstance', 'LPVOID lpParam']
HWND CreateWindowExW ['DWORD dwExStyle', 'LPCWSTR lpClassName', 'LPCWSTR lpWindowName', 'DWORD dwStyle', 'int X', 'int Y', 'int nWidth', 'int nHeight', 'HWND hWndParent', 'HMENU hMenu', 'HINSTANCE hInstance', 'LPVOID lpParam']
BOOL DestroyWindow ['HWND hwnd']
LRESULT CallWindowProcA ['WNDPROC lpPrevWndFunc', 'HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LRESULT CallWindowProcW ['WNDPROC lpPrevWndFunc', 'HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LRESULT CallWindowProcA ['FARPROC lpPrevWndFunc', 'HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LRESULT CallWindowProcW ['FARPROC lpPrevWndFunc', 'HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
DWORD GetWindowThreadProcessId ['HWND hWnd', 'LPDWORD lpdwProcessId']
UINT GetDoubleClickTime ['VOID']
int GetSystemMetrics ['int nIndex']
DWORD GetClassLongA ['HWND hWnd', 'int nIndex']
DWORD GetClassLongW ['HWND hWnd', 'int nIndex']
DWORD SetClassLongA ['HWND hWnd', 'int nIndex', 'LONG dwNewLong']
DWORD SetClassLongW ['HWND hWnd', 'int nIndex', 'LONG dwNewLong']
ATOM RegisterClassA ['CONST WNDCLASSA *lpWndClass']
ATOM RegisterClassW ['CONST WNDCLASSW *lpWndClass']
BOOL UnregisterClassA ['LPCSTR lpClassName', 'HINSTANCE hInstance']
BOOL UnregisterClassW ['LPCWSTR lpClassName', 'HINSTANCE hInstance']
BOOL GetClassInfoA ['HINSTANCE hInstance', 'LPCSTR lpClassName', 'LPWNDCLASSA lpWndClass']
BOOL GetClassInfoW ['HINSTANCE hInstance', 'LPCWSTR lpClassName', 'LPWNDCLASSW lpWndClass']
BOOL EnableWindow ['HWND hWnd', 'BOOL bEnable']
BOOL IsWindowEnabled ['HWND hWnd']
DWORD GetSysColor ['int nIndex']
HDC GetDC ['HWND hwnd']
HDC GetWindowDC ['HWND hwnd']
int ReleaseDC ['HWND hwnd', 'HDC hdc']
BOOL GetMouseMovePoints ['PPOINT\tpptBuf', 'UINT\tnBufPoints', 'UINT\t*pnPointsRetrieved']
VOID mouse_event ['DWORD dwFlags', 'DWORD dx', 'DWORD dy', 'DWORD cButtons', 'DWORD dwExtraInfo']
UINT SendInput ['UINT\tnInputs', 'LPINPUT\tpInputs', 'int cbSize']
int TranslateAcceleratorA ['HWND hWnd', 'HACCEL hAccTable', 'LPMSG lpMsg']
int TranslateAcceleratorW ['HWND hWnd', 'HACCEL hAccTable', 'LPMSG lpMsg']
void SystemIdleTimerReset ['void']
LRESULT DefWindowProcA ['HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LRESULT DefWindowProcW ['HWND hWnd', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LONG GetWindowLongA ['HWND hWnd', 'int nIndex']
LONG GetWindowLongW ['HWND hWnd', 'int nIndex']
LONG SetWindowLongA ['HWND hWnd', 'int nIndex', 'LONG dwNewLong']
LONG SetWindowLongW ['HWND hWnd', 'int nIndex', 'LONG dwNewLong']
BOOL IsChild ['HWND hWndParent', 'HWND hWnd']
BOOL ShowWindow ['HWND hwnd', 'INT nCmdShow']
BOOL UpdateWindow ['HWND hwnd']
BOOL RedrawWindow ['HWND hwnd', 'CONST RECT* lprcUpdate', 'HRGN hrgnUpdate', 'UINT flags']
HWND SetParent ['HWND hwnd', 'HWND hwndParent']
HWND GetParent ['HWND hwnd']
HWND FindWindowA ['LPCSTR lpClassName', 'LPCSTR lpWindowName']
HWND FindWindowW ['LPCWSTR lpClassName', 'LPCWSTR lpWindowName']
BOOL EnumWindows ['WNDENUMPROC lpEnumFunc', 'LPARAM lParam']
int GetClassNameA ['HWND hWnd', 'LPSTR lpClassName', 'int nMaxCount']
int MessageBoxA ['HWND hWnd', 'LPCSTR lpText', 'LPCSTR lpCaption', 'UINT uType']
int MessageBoxW ['HWND hWnd', 'LPCWSTR lpText', 'LPCWSTR lpCaption', 'UINT uType']
BOOL MessageBeep ['UINT uType']
BOOL CreateCaret ['HWND hWnd', 'HBITMAP hBitmap', 'int nWidth', 'int nHeight']
BOOL DestroyCaret ['VOID']
BOOL HideCaret ['HWND hWnd']
BOOL ShowCaret ['HWND hWnd']
BOOL SetCaretPos ['int X', 'int Y']
BOOL GetCaretPos ['LPPOINT lpPoint']
BOOL SetCaretBlinkTime ['UINT uMSeconds']
UINT GetCaretBlinkTime ['VOID']
HWND SetActiveWindow ['HWND\thWnd']
HWND GetForegroundWindow ['VOID']
BOOL SetForegroundWindow ['HWND hWnd']
HWND SetFocus ['HWND hWnd']
HWND GetActiveWindow ['VOID']
HWND GetFocus ['VOID']
SHORT GetAsyncKeyState ['int vKey']
SHORT GetKeyState ['int nVirtKey']
VOID keybd_event ['BYTE bVk', 'BYTE bScan', 'DWORD dwFlags', 'DWORD dwExtraInfo']
BOOL PostKeybdMessage ['HWND\thwnd', 'UINT\tVKey', 'UINT\tKeyStateFlags', 'UINT\tcCharacters', 'UINT\t*pShiftStateBuffer', 'UINT *pCharacterBuffer']
int GetKeyboardType ['int nTypeFlag']
HKL GetKeyboardLayout ['DWORD idThread']
UINT GetKeyboardLayoutList ['int nBuf', 'HKL FAR *lpList']
HKL LoadKeyboardLayoutA ['LPCSTR pwszKLID', 'UINT Flags']
HKL LoadKeyboardLayoutW ['LPCWSTR pwszKLID', 'UINT Flags']
HKL ActivateKeyboardLayout ['HKL hkl', 'UINT Flags']
BOOL GetKeyboardLayoutNameA ['LPSTR pwszKLID']
BOOL GetKeyboardLayoutNameW ['LPWSTR pwszKLID']
UINT MapVirtualKeyA ['UINT uCode', 'UINT uMapType']
UINT MapVirtualKeyW ['UINT uCode', 'UINT uMapType']
int SetScrollInfo ['HWND', 'int', 'LPCSCROLLINFO', 'BOOL']
BOOL GetScrollInfo ['HWND', 'int', 'LPSCROLLINFO']
int SetScrollPos ['HWND\thwnd', 'int fnBar', 'int nPos', 'BOOL\tbRedraw']
BOOL SetScrollRange ['HWND hwnd', 'int fnBar', 'int nMinPos', 'int nMaxPos', 'BOOL\tbRedraw']
HWND CreateDialogIndirectParamA ['HINSTANCE hInstance', 'LPCDLGTEMPLATEA lpTemplate', 'HWND hWndParent', 'DLGPROC lpDialogFunc', 'LPARAM dwInitParam']
HWND CreateDialogIndirectParamW ['HINSTANCE hInstance', 'LPCDLGTEMPLATEW lpTemplate', 'HWND hWndParent', 'DLGPROC lpDialogFunc', 'LPARAM dwInitParam']
int DialogBoxIndirectParamA ['HINSTANCE hInstance', 'LPCDLGTEMPLATEA hDialogTemplate', 'HWND hWndParent', 'DLGPROC lpDialogFunc', 'LPARAM dwInitParam']
int DialogBoxIndirectParamW ['HINSTANCE hInstance', 'LPCDLGTEMPLATEW hDialogTemplate', 'HWND hWndParent', 'DLGPROC lpDialogFunc', 'LPARAM dwInitParam']
BOOL IsDialogMessageA ['HWND hDlg', 'LPMSG lpMsg']
BOOL IsDialogMessageW ['HWND hDlg', 'LPMSG lpMsg']
BOOL EndDialog ['HWND hDlg', 'int nResult']
HWND GetNextDlgGroupItem ['HWND hDlg', 'HWND hCtl', 'BOOL bPrevious']
HWND GetNextDlgTabItem ['HWND hDlg', 'HWND hCtl', 'BOOL bPrevious']
int GetDlgCtrlID ['HWND hWnd']
long GetDialogBaseUnits ['VOID']
BOOL MapDialogRect ['HWND hwnd', 'LPRECT prc']
HWND GetDlgItem ['HWND hDlg', 'int iCtrlID']
LRESULT DefDlgProcA ['HWND hDlg', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LRESULT DefDlgProcW ['HWND hDlg', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
BOOL SetDlgItemInt ['HWND hDlg', 'int nIDDlgItem', 'UINT uValue', 'BOOL bSigned']
UINT GetDlgItemInt ['HWND hDlg', 'int nIDDlgItem', 'BOOL *lpTranslated', 'BOOL bSigned']
BOOL CheckRadioButton ['HWND hDlg', 'int nIDFirstButton', 'int nIDLastButton', 'int nIDCheckButton']
LONG SendDlgItemMessageA ['HWND hDlg', 'int nIDDlgItem', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
LONG SendDlgItemMessageW ['HWND hDlg', 'int nIDDlgItem', 'UINT Msg', 'WPARAM wParam', 'LPARAM lParam']
BOOL SetDlgItemTextA ['HWND hDlg', 'int nIDDlgItem', 'LPCSTR lpString']
BOOL SetDlgItemTextW ['HWND hDlg', 'int nIDDlgItem', 'LPCWSTR lpString']
UINT GetDlgItemTextA ['HWND hDlg', 'int nIDDlgItem', 'LPSTR lpString', 'int nMaxCount']
BOOL OpenClipboard ['HWND hWndNewOwner']
BOOL CloseClipboard ['VOID']
HWND GetClipboardOwner ['VOID']
HANDLE SetClipboardData ['UINT uFormat', 'HANDLE hMem']
HANDLE GetClipboardData ['UINT uFormat']
HANDLE GetClipboardDataAlloc ['UINT uFormat']
UINT RegisterClipboardFormatA ['LPCSTR lpszFormat']
UINT RegisterClipboardFormatW ['LPCWSTR lpszFormat']
int CountClipboardFormats ['VOID']
UINT EnumClipboardFormats ['UINT format']
int GetClipboardFormatNameA ['UINT format', 'LPSTR lpszFormatName', 'int cchMaxCount']
BOOL EmptyClipboard ['VOID']
BOOL IsClipboardFormatAvailable ['UINT format']
int GetPriorityClipboardFormat ['UINT *paFormatPriorityList', 'int cFormats']
HWND GetOpenClipboardWindow ['VOID']
HCURSOR LoadCursorA ['HINSTANCE hInstance', 'LPCSTR lpCursorName']
HCURSOR LoadCursorW ['HINSTANCE hInstance', 'LPCWSTR lpCursorName']
HCURSOR LoadCursorA ['HINSTANCE hInstance', 'LPCSTR lpCursorName']
HCURSOR LoadCursorW ['HINSTANCE hInstance', 'LPCWSTR lpCursorName']
int ShowCursor ['BOOL bShow']
BOOL SetCursorPos ['int X', 'int Y']
HCURSOR SetCursor ['HCURSOR hCursor']
BOOL GetCursorPos ['LPPOINT lpPoint']
BOOL ClipCursor ['CONST RECT *lpRect']
BOOL GetClipCursor ['LPRECT lpRect']
HCURSOR GetCursor ['VOID']
HCURSOR LoadAnimatedCursor ['HINSTANCE\thInstance', 'DWORD ResourceId', 'int cFrames', 'int FrameTimeInterval']
UINT SetTimer ['HWND hwnd', 'UINT idTimer', 'UINT uTimeOut', 'TIMERPROC pfnTimerProc']
BOOL KillTimer ['HWND hwnd', 'UINT idEvent']
DWORD GetKeyboardStatus ['VOID']
BOOL EnableHardwareKeyboard ['BOOL\tfEnable']
BOOL RegisterHotKey ['HWND\thWnd', 'int id', 'UINT\tfsModifiers', 'UINT\tvk']
BOOL UnregisterHotKey ['HWND\thWnd', 'int id']
BOOL AllKeys ['BOOL bAllKeys']
BOOL SystemParametersInfoA ['UINT uiAction', 'UINT uiParam', 'PVOID pvParam', 'UINT fWinIni']
BOOL SystemParametersInfoW ['UINT uiAction', 'UINT uiParam', 'PVOID pvParam', 'UINT fWinIni']
HICON LoadIconA ['HINSTANCE hInstance', 'LPCSTR lpIconName']
HICON LoadIconW ['HINSTANCE hInstance', 'LPCWSTR lpIconName']
BOOL DestroyIcon ['HICON hIcon']
BOOL DrawIconEx ['HDC hdc', 'int xLeft', 'int yTop', 'HICON hIcon', 'int cxWidth', 'int cyWidth', 'UINT istepIfAniCur', 'HBRUSH hbrFlickerFreeDraw', 'UINT diFlags']
HICON CreateIconIndirect ['PICONINFO piconinfo']
BOOL GetIconInfo ['HICON hIcon', 'PICONINFO piconinfo']
HANDLE LoadImageA ['HINSTANCE', 'LPCSTR', 'UINT', 'int', 'int', 'UINT']
HANDLE LoadImageW ['HINSTANCE', 'LPCWSTR', 'UINT', 'int', 'int', 'UINT']
HCURSOR CreateCursor ['HINSTANCE hInst', 'int xHotSpot', 'int yHotSpot', 'int nWidth', 'int nHeight', 'CONST VOID *pvANDPlane', 'CONST VOID *pvXORPlane']
BOOL DestroyCursor ['HCURSOR hCursor']
HMONITOR MonitorFromPoint ['IN POINT pt', 'IN DWORD dwFlags']
HMONITOR MonitorFromRect ['IN LPCRECT lprc', 'IN DWORD dwFlags']
HMONITOR MonitorFromWindow ['IN HWND hwnd', 'IN DWORD dwFlags']
BOOL GetMonitorInfo ['IN HMONITOR hMonitor', 'IN LPMONITORINFO lpmi']
BOOL EnumDisplayMonitors ['IN HDC hdc', 'IN LPCRECT lprcClip', 'IN MONITORENUMPROC lpfnEnum', 'IN LPARAM dwData']
BOOL EnumDisplaySettings ['IN LPCTSTR lpszDeviceName', 'IN DWORD iModeNum', 'OUT LPDEVMODEW lpDevMode']
BOOL EnumDisplayDevices ['IN LPCTSTR lpDevice', 'IN DWORD iDevNum', 'OUT PDISPLAY_DEVICE lpDisplayDevice', 'IN DWORD dwFlags']
LONG ChangeDisplaySettingsEx ['IN LPCTSTR lpszDeviceName', 'IN LPDEVMODE lpDevMode', 'IN HWND hwnd', 'IN DWORD dwflags', 'LPVOID lParam']
DWORD EnumPnpIds ['LPTSTR PnpList', 'LPDWORD lpBuflen']
DWORD EnumDevices ['LPTSTR DevList', 'LPDWORD lpBuflen']
DWORD GetDeviceKeys ['LPCTSTR DevName', 'LPTSTR ActiveKey', 'LPDWORD lpActiveLen', 'LPTSTR DriverKey', 'LPDWORD lpDriverLen']
HKEY OpenDeviceKey ['LPCTSTR ActiveKey']
HANDLE GetDeviceHandleFromContext ['LPCTSTR pContext']
DWORD DmAdvertiseInterface ['HANDLE hDevice', 'const GUID *devclass', 'LPCWSTR name', 'BOOL fAdd']
RPC_ENTRY RpcImpersonateClient ['IN RPC_BINDING_HANDLE BindingHandle OPTIONAL']
RPC_ENTRY RpcRevertToSelfEx ['IN RPC_BINDING_HANDLE BindingHandle OPTIONAL']
RPC_ENTRY RpcRevertToSelf ['']
RPC_ENTRY I_RpcMapWin32Status ['IN RPC_STATUS Status']
int _AddSatInt ['int', 'int']
int _DAddSatInt ['int', 'int']
int _DSubSatInt ['int', 'int']
int _SubSatInt ['int', 'int']
int _SmulAddLo_SW_SL ['int', 'int', 'int']
int _SmulAddHi_SW_SL ['int', 'int', 'int']
int _SmulAddHiLo_SW_SL ['int', 'int', 'int']
int _SmulAddLoHi_SW_SL ['int', 'int', 'int']
int _SmulLo_SW_SL ['int', 'int']
int _SmulHi_SW_SL ['int', 'int']
int _SmulHiLo_SW_SL ['int', 'int']
int _SmulLoHi_SW_SL ['int', 'int']
t64 _SmulAddLo_SW_SQ ['t64', 'int', 'int']
t64 _SmulAddHi_SW_SQ ['t64', 'int', 'int']
t64 _SmulAddHiLo_SW_SQ ['t64', 'int', 'int']
t64 _SmulAddLoHi_SW_SQ ['t64', 'int', 'int']
int _SmulAddWLo_SW_SL ['int', 'int', 'int']
int _SmulAddWHi_SW_SL ['int', 'int', 'int']
int _SmulWLo_SW_SL ['int', 'int']
int _SmulWHi_SW_SL ['int', 'int']
void _PreLoad ['unsigned long *addr']
void _WriteCoProcessor ['t64', 'int']
t64 _ReadCoProcessor ['int']
int _MoveFromCoprocessor ['unsigned int', 'unsigned int', 'unsigned int', 'unsigned int', 'unsigned int']
int _MoveFromCoprocessor2 ['unsigned int', 'unsigned int', 'unsigned int', 'unsigned int', 'unsigned int']
void _MoveToCoprocessor ['unsigned int', 'unsigned int', 'unsigned int', 'unsigned int', 'unsigned int', 'unsigned int']
void _MoveToCoprocessor2 ['unsigned int', 'unsigned int', 'unsigned int', 'unsigned int', 'unsigned int', 'unsigned int']
void _SmulAdd_SL_ACC ['int', 'int']
void _SmulAddPack_2SW_ACC ['int', 'int']
void _SmulAddLo_SW_ACC ['int', 'int']
void _SmulAddHi_SW_ACC ['int', 'int']
void _SmulAddHiLo_SW_ACC ['int', 'int']
void _SmulAddLoHi_SW_ACC ['int', 'int']
void __emit ['const unsigned t32']
void __gregister_set ['const unsigned int', 'unsigned int']
int _ReadStatusReg ['int']
void _WriteStatusReg ['int', 'int', 'int']
WINOLEAPI CoInitialize ['LPVOID pvReserved']
WINOLEAPI CoGetMalloc ['DWORD dwMemContext', 'LPMALLOC FAR* ppMalloc']
WINOLEAPI CoRegisterMallocSpy ['LPMALLOCSPY pMallocSpy']
WINOLEAPI CoRevokeMallocSpy ['void']
WINOLEAPI CoCreateStandardMalloc ['DWORD memctx', 'IMalloc FAR* FAR* ppMalloc']
WINOLEAPI CoInitializeEx ['LPVOID pvReserved', 'DWORD dwCoInit']
WINOLEAPI CoRegisterClassObject ['REFCLSID rclsid', 'LPUNKNOWN pUnk', 'DWORD dwClsContext', 'DWORD flags', 'LPDWORD lpdwRegister']
WINOLEAPI CoRevokeClassObject ['DWORD dwRegister']
WINOLEAPI CoResumeClassObjects ['void']
WINOLEAPI CoSuspendClassObjects ['void']
WINOLEAPI CoGetPSClsid ['REFIID riid', 'CLSID *pClsid']
WINOLEAPI CoRegisterPSClsid ['REFIID riid', 'REFCLSID rclsid']
WINOLEAPI CoRegisterSurrogate ['LPSURROGATE pSurrogate']
WINOLEAPI CoGetMarshalSizeMax ['ULONG *pulSize', 'REFIID riid', 'LPUNKNOWN pUnk', 'DWORD dwDestContext', 'LPVOID pvDestContext', 'DWORD mshlflags']
WINOLEAPI CoMarshalInterface ['LPSTREAM pStm', 'REFIID riid', 'LPUNKNOWN pUnk', 'DWORD dwDestContext', 'LPVOID pvDestContext', 'DWORD mshlflags']
WINOLEAPI CoUnmarshalInterface ['LPSTREAM pStm', 'REFIID riid', 'LPVOID FAR* ppv']
WINOLEAPI CoMarshalHresult ['LPSTREAM pstm', 'hresult']
WINOLEAPI CoUnmarshalHresult ['LPSTREAM pstm', 'FAR * phresult']
WINOLEAPI CoReleaseMarshalData ['LPSTREAM pStm']
WINOLEAPI CoDisconnectObject ['LPUNKNOWN pUnk', 'DWORD dwReserved']
WINOLEAPI CoLockObjectExternal ['LPUNKNOWN pUnk', 'BOOL fLock', 'BOOL fLastUnlockReleases']
WINOLEAPI CoGetStandardMarshal ['REFIID riid', 'LPUNKNOWN pUnk', 'DWORD dwDestContext', 'LPVOID pvDestContext', 'DWORD mshlflags', 'LPMARSHAL FAR* ppMarshal']
WINOLEAPI CoMarshalInterThreadInterfaceInStream ['REFIID riid', 'LPUNKNOWN pUnk', 'LPSTREAM *ppStm']
WINOLEAPI CoGetInterfaceAndReleaseStream ['LPSTREAM pStm', 'REFIID iid', 'LPVOID FAR* ppv']
WINOLEAPI CoCreateFreeThreadedMarshaler ['LPUNKNOWN punkOuter', 'LPUNKNOWN *ppunkMarshal']
WINOLEAPI CoInitializeSecurity ['PSECURITY_DESCRIPTOR pSecDesc', 'LONG cAuthSvc', 'SOLE_AUTHENTICATION_SERVICE *asAuthSvc', 'void *pReserved1', 'DWORD dwAuthnLevel', 'DWORD dwImpLevel', 'void *pReserved2', 'DWORD dwCapabilities', 'void *pReserved3']
WINOLEAPI CoGetCallContext ['REFIID riid', 'void **ppInterface']
WINOLEAPI CoQueryProxyBlanket ['IUnknown *pProxy', 'DWORD *pwAuthnSvc', 'DWORD *pAuthzSvc', 'OLECHAR **pServerPrincName', 'DWORD *pAuthnLevel', 'DWORD *pImpLevel', 'RPC_AUTH_IDENTITY_HANDLE *pAuthInfo', 'DWORD *pCapabilites']
WINOLEAPI CoSetProxyBlanket ['IUnknown *pProxy', 'DWORD dwAuthnSvc', 'DWORD dwAuthzSvc', 'OLECHAR *pServerPrincName', 'DWORD dwAuthnLevel', 'DWORD dwImpLevel', 'RPC_AUTH_IDENTITY_HANDLE pAuthInfo', 'DWORD dwCapabilities']
WINOLEAPI CoCopyProxy ['IUnknown *pProxy', 'IUnknown **ppCopy']
WINOLEAPI CoQueryClientBlanket ['DWORD *pAuthnSvc', 'DWORD *pAuthzSvc', 'OLECHAR **pServerPrincName', 'DWORD *pAuthnLevel', 'DWORD *pImpLevel', 'RPC_AUTHZ_HANDLE *pPrivs', 'DWORD *pCapabilities']
WINOLEAPI CoImpersonateClient ['']
WINOLEAPI CoRevertToSelf ['']
WINOLEAPI CoQueryAuthenticationServices ['DWORD *pcAuthSvc', 'SOLE_AUTHENTICATION_SERVICE **asAuthSvc']
WINOLEAPI CoSwitchCallContext ['IUnknown *pNewObject', 'IUnknown **ppOldObject']
WINOLEAPI CoCreateInstance ['REFCLSID rclsid', 'LPUNKNOWN pUnkOuter', 'DWORD dwClsContext', 'REFIID riid', 'LPVOID FAR* ppv']
WINOLEAPI CoGetClassObject ['REFCLSID rclsid', 'DWORD dwClsContext', 'LPVOID pvReserved', 'REFIID riid', 'LPVOID FAR* ppv']
WINOLEAPI CoGetInstanceFromFile ['COSERVERINFO * pServerInfo', 'CLSID * pClsid', 'IUnknown * punkOuter', ' DWORD dwClsCtx', 'DWORD grfMode', 'OLECHAR * pwszName', 'DWORD dwCount', 'MULTI_QI * pResults']
WINOLEAPI CoGetInstanceFromIStorage ['COSERVERINFO * pServerInfo', 'CLSID * pClsid', 'IUnknown * punkOuter', ' DWORD dwClsCtx', 'IStorage * pstg', 'DWORD dwCount', 'MULTI_QI * pResults']
WINOLEAPI CoCreateInstanceEx ['REFCLSID Clsid', 'IUnknown * punkOuter', ' DWORD dwClsCtx', 'COSERVERINFO * pServerInfo', 'DWORD dwCount', 'MULTI_QI * pResults']
WINOLEAPI StringFromCLSID ['REFCLSID rclsid', 'LPOLESTR FAR* lplpsz']
WINOLEAPI CLSIDFromString ['LPOLESTR lpsz', 'LPCLSID pclsid']
WINOLEAPI StringFromIID ['REFIID rclsid', 'LPOLESTR FAR* lplpsz']
WINOLEAPI IIDFromString ['LPOLESTR lpsz', 'LPIID lpiid']
WINOLEAPI ProgIDFromCLSID ['REFCLSID clsid', 'LPOLESTR FAR* lplpszProgID']
WINOLEAPI CLSIDFromProgID ['LPCOLESTR lpszProgID', 'LPCLSID lpclsid']
WINOLEAPI CoCreateGuid ['GUID FAR *pguid']
WINOLEAPI CoFileTimeNow ['FILETIME FAR* lpFileTime']
WINOLEAPI CoRegisterMessageFilter ['LPMESSAGEFILTER lpMessageFilter', 'LPMESSAGEFILTER FAR* lplpMessageFilter']
WINOLEAPI CoRegisterChannelHook ['REFGUID ExtensionUuid', 'IChannelHook *pChannelHook']
WINOLEAPI CoGetTreatAsClass ['REFCLSID clsidOld', 'LPCLSID pClsidNew']
WINOLEAPI CoTreatAsClass ['REFCLSID clsidOld', 'REFCLSID clsidNew']
WINOLEAPI CreateDataAdviseHolder ['LPDATAADVISEHOLDER FAR* ppDAHolder']
WINOLEAPI CreateDataCache ['LPUNKNOWN pUnkOuter', 'REFCLSID rclsid', 'REFIID iid', 'LPVOID FAR* ppv']
WINOLEAPI StgCreateDocfile ['const OLECHAR FAR* pwcsName', 'DWORD grfMode', 'DWORD reserved', 'IStorage FAR * FAR *ppstgOpen']
WINOLEAPI StgCreateDocfileOnILockBytes ['ILockBytes FAR *plkbyt', 'DWORD grfMode', 'DWORD reserved', 'IStorage FAR * FAR *ppstgOpen']
WINOLEAPI StgOpenStorage ['const OLECHAR FAR* pwcsName', 'IStorage FAR *pstgPriority', 'DWORD grfMode', 'SNB snbExclude', 'DWORD reserved', 'IStorage FAR * FAR *ppstgOpen']
WINOLEAPI StgOpenStorageOnILockBytes ['ILockBytes FAR *plkbyt', 'IStorage FAR *pstgPriority', 'DWORD grfMode', 'SNB snbExclude', 'DWORD reserved', 'IStorage FAR * FAR *ppstgOpen']
WINOLEAPI StgIsStorageFile ['const OLECHAR FAR* pwcsName']
WINOLEAPI StgIsStorageILockBytes ['ILockBytes FAR* plkbyt']
WINOLEAPI StgSetTimes ['OLECHAR const FAR* lpszName', 'FILETIME const FAR* pctime', 'FILETIME const FAR* patime', 'FILETIME const FAR* pmtime']
WINOLEAPI StgOpenAsyncDocfileOnIFillLockBytes ['IFillLockBytes *pflb', 'DWORD grfMode', 'DWORD asyncFlags', 'IStorage **ppstgOpen']
WINOLEAPI StgGetIFillLockBytesOnILockBytes ['ILockBytes *pilb', 'IFillLockBytes **ppflb']
WINOLEAPI StgGetIFillLockBytesOnFile ['OLECHAR const *pwcsName', 'IFillLockBytes **ppflb']
WINOLEAPI StgOpenLayoutDocfile ['OLECHAR const *pwcsDfName', 'DWORD grfMode', 'DWORD reserved', 'IStorage **ppstgOpen']
WINOLEAPI BindMoniker ['LPMONIKER pmk', 'DWORD grfOpt', 'REFIID iidResult', 'LPVOID FAR* ppvResult']
WINOLEAPI CoGetObject ['LPCWSTR pszName', 'BIND_OPTS *pBindOptions', 'REFIID riid', 'void **ppv']
WINOLEAPI MkParseDisplayName ['LPBC pbc', 'LPCOLESTR szUserName', 'ULONG FAR * pchEaten', 'LPMONIKER FAR * ppmk']
WINOLEAPI MonikerRelativePathTo ['LPMONIKER pmkSrc', 'LPMONIKER pmkDest', 'LPMONIKER FAR* ppmkRelPath', 'BOOL dwReserved']
WINOLEAPI MonikerCommonPrefixWith ['LPMONIKER pmkThis', 'LPMONIKER pmkOther', 'LPMONIKER FAR* ppmkCommon']
WINOLEAPI CreateBindCtx ['DWORD reserved', 'LPBC FAR* ppbc']
WINOLEAPI CreateGenericComposite ['LPMONIKER pmkFirst', 'LPMONIKER pmkRest', 'LPMONIKER FAR* ppmkComposite']
WINOLEAPI GetClassFile ['LPCOLESTR szFilename', 'CLSID FAR* pclsid']
WINOLEAPI CreateClassMoniker ['REFCLSID rclsid', 'LPMONIKER FAR* ppmk']
WINOLEAPI CreateFileMoniker ['LPCOLESTR lpszPathName', 'LPMONIKER FAR* ppmk']
WINOLEAPI CreateItemMoniker ['LPCOLESTR lpszDelim', 'LPCOLESTR lpszItem', 'LPMONIKER FAR* ppmk']
WINOLEAPI CreateAntiMoniker ['LPMONIKER FAR* ppmk']
WINOLEAPI CreatePointerMoniker ['LPUNKNOWN punk', 'LPMONIKER FAR* ppmk']
WINOLEAPI GetRunningObjectTable ['DWORD reserved', 'LPRUNNINGOBJECTTABLE FAR* pprot']
IMNXPORTAPI CreateRASTransport [' IRASTransport **ppTransport']
IMNXPORTAPI CreateNNTPTransport [' INNTPTransport **ppTransport']
IMNXPORTAPI CreateSMTPTransport [' ISMTPTransport **ppTransport']
IMNXPORTAPI CreatePOP3Transport [' IPOP3Transport **ppTransport']
IMNXPORTAPI CreateIMAPTransport [' IIMAPTransport **ppTransport']
IMNXPORTAPI CreateIMAPTransport2 [' IIMAPTransport2 **ppTransport']
IMNXPORTAPI CreateRangeList [' IRangeList **ppRangeList']
HINSTANCE LoadOLEAut32 ['']
BOOL SslEmptyCache ['VOID']
BOOL SslGenerateKeyPair ['PSSL_CREDENTIAL_CERTIFICATE pCerts', 'PSTR pszDN', 'PSTR pszPassword', 'DWORD Bits']
VOID SslGenerateRandomBits ['PUCHAR pRandomData', 'LONG cRandomData']
BOOL SslCrackCertificate ['PUCHAR pbCertificate', 'DWORD cbCertificate', 'DWORD dwFlags', 'PX509Certificate * ppCertificate']
VOID SslFreeCertificate ['PX509Certificate pCertificate']
DWORD SslGetMaximumKeySize ['DWORD Reserved']
BOOL SslGetDefaultIssuers ['PBYTE pbIssuers', 'DWORD *pcbIssuers']
BOOL SslSetProtocols ['DWORD rgbitsProtocols']
DWORD SslGetProtocols ['']
BOOL IsSSLServerName ['IN PCCERT_CONTEXT pCertContext', 'IN LPCWSTR pwszServerName']
DWORD GetNumberOfInterfaces ['OUT PDWORD pdwNumIf']
DWORD GetIfEntry ['IN OUT PMIB_IFROW pIfRow']
DWORD GetIfTable ['OUT PMIB_IFTABLE pIfTable', 'IN OUT PULONG pdwSize', 'IN BOOL bOrder']
DWORD GetIpNetTable ['OUT PMIB_IPNETTABLE pIpNetTable', 'IN OUT PULONG pdwSize', 'IN BOOL bOrder']
DWORD GetIpForwardTable ['OUT PMIB_IPFORWARDTABLE pIpForwardTable', 'IN OUT PULONG pdwSize', 'IN BOOL bOrder']
DWORD GetTcpTable ['OUT PMIB_TCPTABLE pTcpTable', 'IN OUT PDWORD pdwSize', 'IN BOOL bOrder']
DWORD GetUdpTable ['OUT PMIB_UDPTABLE pUdpTable', 'IN OUT PDWORD pdwSize', 'IN BOOL bOrder']
DWORD GetIpStatistics ['OUT PMIB_IPSTATS pStats']
DWORD GetIpStatisticsEx ['OUT PMIB_IPSTATS pStats', 'IN DWORD dwFamily']
DWORD GetIcmpStatistics ['OUT PMIB_ICMP pStats']
DWORD GetIcmpStatisticsEx ['OUT PMIB_ICMP_EX pStats', 'IN DWORD dwFamily']
DWORD GetTcpStatistics ['OUT PMIB_TCPSTATS pStats']
DWORD GetTcpStatisticsEx ['OUT PMIB_TCPSTATS pStats', 'IN DWORD dwFamily']
DWORD GetUdpStatistics ['OUT PMIB_UDPSTATS pStats']
DWORD GetUdpStatisticsEx ['OUT PMIB_UDPSTATS pStats', 'IN DWORD dwFamily']
DWORD SetIfEntry ['IN PMIB_IFROW pIfRow']
DWORD CreateIpForwardEntry ['IN PMIB_IPFORWARDROW pRoute']
DWORD SetIpForwardEntry ['IN PMIB_IPFORWARDROW pRoute']
DWORD DeleteIpForwardEntry ['IN PMIB_IPFORWARDROW pRoute']
DWORD SetIpStatistics ['IN PMIB_IPSTATS pIpStats']
DWORD SetIpTTL ['UINT nTTL']
DWORD CreateIpNetEntry ['IN PMIB_IPNETROW pArpEntry']
DWORD SetIpNetEntry ['IN PMIB_IPNETROW pArpEntry']
DWORD DeleteIpNetEntry ['IN PMIB_IPNETROW pArpEntry']
DWORD FlushIpNetTable ['IN DWORD dwIfIndex']
DWORD CreateProxyArpEntry ['IN DWORD dwAddress', 'IN DWORD dwMask', 'IN DWORD dwIfIndex']
DWORD DeleteProxyArpEntry ['IN DWORD dwAddress', 'IN DWORD dwMask', 'IN DWORD dwIfIndex']
DWORD SetTcpEntry ['IN PMIB_TCPROW pTcpRow']
DWORD GetInterfaceInfo ['IN PIP_INTERFACE_INFO pIfTable', 'OUT PULONG dwOutBufLen']
DWORD GetUniDirectionalAdapterInfo ['OUT PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS pIPIfInfo', 'OUT PULONG dwOutBufLen']
DWORD GetBestInterface ['IN IPAddr dwDestAddr', 'OUT PDWORD pdwBestIfIndex']
DWORD GetBestInterfaceEx ['IN sockaddr *pDestAddr', 'OUT PDWORD pdwBestIfIndex']
DWORD GetBestRoute ['IN DWORD dwDestAddr', 'IN DWORD dwSourceAddr', 'OPTIONAL OUT PMIB_IPFORWARDROW pBestRoute']
DWORD NotifyAddrChange ['OUT PHANDLE Handle', 'IN LPOVERLAPPED overlapped']
DWORD NotifyRouteChange ['OUT PHANDLE Handle', 'IN LPOVERLAPPED overlapped']
DWORD GetAdapterIndex ['IN LPWSTR AdapterName', 'OUT PULONG IfIndex']
DWORD AddIPAddress ['IPAddr Address', 'IPMask IpMask', 'DWORD IfIndex', 'PULONG NTEContext', 'PULONG NTEInstance']
DWORD DeleteIPAddress ['ULONG NTEContext']
DWORD GetNetworkParams ['PFIXED_INFO pFixedInfo', 'PULONG pOutBufLen']
DWORD IpReleaseAddress ['PIP_ADAPTER_INDEX_MAP AdapterInfo']
DWORD IpRenewAddress ['PIP_ADAPTER_INDEX_MAP AdapterInfo']
DWORD SendARP ['IPAddr DestIP', 'IPAddr SrcIP', 'PULONG pMacAddr', 'PULONG PhyAddrLen']
BOOL GetRTTAndHopCount ['IPAddr DestIpAddress', 'PULONG HopCount', 'ULONG MaxHops', 'PULONG RTT']
DWORD GetFriendlyIfIndex ['DWORD IfIndex']
DWORD EnableRouter ['HANDLE* pHandle', 'OVERLAPPED* pOverlapped']
DWORD UnenableRouter ['OVERLAPPED* pOverlapped', 'LPDWORD lpdwEnableCount OPTIONAL']
DWORD DisableMediaSense ['HANDLE *pHandle', 'OVERLAPPED *pOverLapped']
DWORD RestoreMediaSense ['OVERLAPPED* pOverlapped', 'LPDWORD lpdwEnableCount OPTIONAL']
DWORD GetIpErrorString ['IN IP_STATUS ErrorCode', 'OUT PWCHAR Buffer', 'IN OUT PDWORD Size']
BOOL WABInitThread ['']
STDMETHODIMP WABOpen ['LPADRBOOK FAR * lppAdrBook', 'LPWABOBJECT FAR * lppWABObject', 'LPWAB_PARAM lpWP', 'DWORD Reserved2']
STDMETHODIMP WABOpenEx ['LPADRBOOK FAR * lppAdrBook', 'LPWABOBJECT FAR * lppWABObject', 'LPWAB_PARAM lpWP', 'DWORD Reserved', 'ALLOCATEBUFFER * fnAllocateBuffer', 'ALLOCATEMORE * fnAllocateMore', 'FREEBUFFER * fnFreeBuffer']
DWORD HttpFilterProc ['HTTP_FILTER_CONTEXT * pfc', 'DWORD NotificationType', 'VOID * pvNotification']
BOOL GetFilterVersion ['HTTP_FILTER_VERSION * pVer']
BOOL TerminateFilter ['DWORD dwFlags']
DWORD GetFileVersionInfoSizeA ['LPSTR lptstrFilename', ' LPDWORD lpdwHandle']
DWORD GetFileVersionInfoSizeW ['LPWSTR lptstrFilename', ' LPDWORD lpdwHandle']
BOOL GetFileVersionInfoA ['LPSTR lptstrFilename', ' DWORD dwHandle', ' DWORD dwLen', ' LPVOID lpData']
BOOL VerQueryValueA ['const LPVOID pBlock', 'LPSTR lpSubBlock', 'LPVOID * lplpBuffer', 'PUINT puLen']
BOOL VerQueryValueW ['const LPVOID pBlock', 'LPWSTR lpSubBlock', 'LPVOID * lplpBuffer', 'PUINT puLen']
LW StrRetToStrA ['STRRET *pstr', 'LPCITEMIDLIST pidl', 'LPSTR *ppsz']
LW StrRetToStrW ['STRRET *pstr', 'LPCITEMIDLIST pidl', 'LPWSTR *ppsz']
LW SHStrDupA ['LPCSTR psz', 'WCHAR **ppwsz']
LW SHStrDupW ['LPCWSTR psz', 'WCHAR **ppwsz']
LW UrlEscapeA ['LPCSTR pszUrl', 'LPSTR pszEscaped', 'LPDWORD pcchEscaped', 'DWORD dwFlags']
LW UrlCreateFromPathA ['LPCSTR pszPath', 'LPSTR pszUrl', 'LPDWORD pcchUrl', 'DWORD dwFlags']
LW UrlHashA ['LPCSTR pszUrl', 'LPBYTE pbHash', 'DWORD cbHash']
LW UrlHashW ['LPCWSTR pszUrl', 'LPBYTE pbHash', 'DWORD cbHash']
LW UrlGetPartA ['LPCSTR pszIn', 'LPSTR pszOut', 'LPDWORD pcchOut', 'DWORD dwPart', 'DWORD dwFlags']
LW UrlApplySchemeA ['LPCSTR pszIn', 'LPSTR pszOut', 'LPDWORD pcchOut', 'DWORD dwFlags']
LW UrlApplySchemeW ['LPCWSTR pszIn', 'LPWSTR pszOut', 'LPDWORD pcchOut', 'DWORD dwFlags']
LW HashData ['LPBYTE pbData', 'DWORD cbData', 'LPBYTE pbHash', 'DWORD cbHash']
LW AssocCreate ['CLSID clsid', 'REFIID riid', 'LPVOID *ppv']
LW AssocQueryStringA ['ASSOCF flags', 'ASSOCSTR str', 'LPCSTR pszAssoc', 'LPCSTR pszExtra', 'LPSTR pszOut', 'DWORD *pcchOut']
LW AssocQueryStringW ['ASSOCF flags', 'ASSOCSTR str', 'LPCWSTR pszAssoc', 'LPCWSTR pszExtra', 'LPWSTR pszOut', 'DWORD *pcchOut']
LW AssocQueryStringByKeyA ['ASSOCF flags', 'ASSOCSTR str', 'HKEY hkAssoc', 'LPCSTR pszExtra', 'LPSTR pszOut', 'DWORD *pcchOut']
LW AssocQueryStringByKeyW ['ASSOCF flags', 'ASSOCSTR str', 'HKEY hkAssoc', 'LPCWSTR pszExtra', 'LPWSTR pszOut', 'DWORD *pcchOut']
LW AssocQueryKeyA ['ASSOCF flags', 'ASSOCKEY key', 'LPCSTR pszAssoc', 'LPCSTR pszExtra', 'HKEY *phkeyOut']
LW AssocQueryKeyW ['ASSOCF flags', 'ASSOCKEY key', 'LPCWSTR pszAssoc', 'LPCWSTR pszExtra', 'HKEY *phkeyOut']
LW SHCreateStreamOnFileA ['LPCSTR pszFile', 'DWORD grfMode', 'IStream **ppstm']
LW SHCreateStreamOnFileW ['LPCWSTR pszFile', 'DWORD grfMode', 'IStream **ppstm']
LW SHAutoComplete ['HWND hwndEdit', 'DWORD dwFlags']
void svsutil_Initialize ['void']
void svsutil_DeInitialize ['void']
void svsutil_LogCallStack ['void']
void svsutil_Free ['void *pvPtr', 'void *pvData']
int svsutil_AssertBroken ['TCHAR *lpszFile', 'int iLine']
void svsutil_SetAlloc ['FuncAlloc a_funcAlloc', 'FuncFree a_funcFree']
void svsutil_SetAllocData ['void *a_pvAllocData', 'void *a_pvFreeData']
void svsutil_SetDebugOut ['FuncDebugOut a_funcDebugOut', 'void *a_pvDebugData']
void svsutil_FreeFixed ['void *pvData', 'FixedMemDescr *a_pfmd']
void svsutil_ReleaseFixedEmpty ['FixedMemDescr *a_pfmd']
void svsutil_ReleaseFixedNonEmpty ['FixedMemDescr *a_pfmd']
void svsutil_CompactFixed ['FixedMemDescr *a_pfmd']
int svsutil_IsFixedEmpty ['FixedMemDescr *a_pfmd']
int svsutil_FixedBlockSize ['FixedMemDescr *a_pfmd']
void svsutil_GetFixedStats ['FixedMemDescr *a_pfmd', 'unsigned int *puiFreeBlocks', 'unsigned int *puiTotalBlocks']
int svsutil_StringHashFree ['HashDatabase *pdb', 'TCHAR *lpszString']
int svsutil_StringHashRef ['HashDatabase *pdb', 'TCHAR *lpszString']
void svsutil_DestroyStringHash ['HashDatabase *pdb']
void svsutil_GetStringHashStats ['HashDatabase *pdb', 'unsigned int *puiEntries']
int svsutil_BinHashFree ['HashDatabase *pdb', 'unsigned char *ucArray']
int svsutil_BinHashRef ['HashDatabase *pdb', 'unsigned char *ucArray']
void svsutil_DestroyBinHash ['HashDatabase *pdb']
void svsutil_GetBinHashStats ['HashDatabase *pdb', 'unsigned int *puiEntries']
int svsutil_OpenAndReadFile ['WCHAR *wszFileName', 'DWORD *pdwFileSize', 'PSTR *ppszFileData']
void svsutil_GetAbsTime ['unsigned int *ps', 'unsigned int *pms']
int svsutil_SetAttrTimer ['SVSAttrTimer *pTimer', 'SVSHandle hEvent', 'unsigned int uiAbsTimeMillis']
int svsutil_ClearAttrTimer ['SVSAttrTimer *pTimer', 'SVSHandle hEvent']
void svsutil_FreeAttrTimer ['SVSAttrTimer *pTimer']
int svsutil_sock_fgets_ex ['char *buffer', 'int nbuffer', 'SVSSockIOD *ps']
int svsutil_sock_fprintf ['SVSSockIOD *ps', 'char *format', '...']
void svsutil_ReleaseArena ['SVSMemArena *a_pad']
char svsutil_DecodeFromURL ['char **pszSource', 'char *szDelimiters', 'char *szDest', 'UINT uCodePage']
BOOL svsutil_InitializeInterfaceMapperOnce ['void']
BOOL svsutil_DeInitializeInterfaceMapperOnce ['void']
BOOL svsutil_ResetInterfaceMapper ['void']
void svsutil_HandleNotifyAddrChange ['void']
PCSTR svsutil_GetAdapterNameOfConnection ['SOCKET sock']
PIP_ADAPTER_ADDRESSES svsutil_GetAdapterOfConnection ['SOCKET sock']
BOOL svsutil_GetAdaptersAddresses ['PIP_ADAPTER_ADDRESSES *pAddresses', 'DWORD *pcbAddresses']
void svsutil_LockInterfaceMapper ['void']
void svsutil_UnLockInterfaceMapper ['void']
BOOL svsutil_ReportEventPrintf ['HANDLE hEventLog', 'WORD wType', 'WCHAR *szFormat', '...']
BOOL svsutil_ReportEventPrintfRC ['HANDLE hEventLog', 'HINSTANCE hLibrary', 'DWORD dwResID', 'WORD wType', '...']
BOOL svsutil_HttpCanonicalizeUrlA ['LPCSTR lpszUrl', 'LPSTR lpszBuffer']
BOOL svsutil_Base64Encode ['VOID *pDecodedBuffer', 'DWORD cbDecodedBufferSize', 'LPSTR pszEncodedString', 'DWORD cchEncodedStringSize', 'DWORD *pcchEncoded']
BOOL svsutil_Base64Decode ['LPSTR pszEncodedString', 'VOID *pDecodeBuffer', 'DWORD cbDecodeBufferSize', 'DWORD *pcbDecoded', 'BOOL fAppendNULLTerminator']
void svsutil_EmptyTree ['SVSTree *pTree']
void svsutil_DestroyTree ['SVSTree *pTree']
SVSCKey svsutil_GetTreeNodeKey ['SVSTNode *pNode']
void svsutil_CompactTree ['SVSTree *pTree']
int svsutil_IsQueueEmpty ['SVSQueue *pQueue']
int svsutil_PutInQueue ['SVSQueue *pQueue', 'void *pvDatum']
void svsutil_CompactQueue ['SVSQueue *pQueue']
void svsutil_DestroyQueue ['SVSQueue *pQueue']
int svsutil_IsStackEmpty ['SVSStack *pStack']
int svsutil_PushStack ['SVSStack *pStack', 'void *pvDatum']
void svsutil_CompactStack ['SVSStack *pStack']
void svsutil_DestroyStack ['SVSStack *pStack']
int svsutil_IsHeapEmpty ['SVSHeap *pHeap']
int svsutil_InsertInHeap ['SVSHeap *pHeap', 'SVSCKey *pcKey', 'void *pvDatum']
void svsutil_CompactHeap ['SVSHeap *pHeap']
void svsutil_DestroyHeap ['SVSHeap *pHeap']
SVSCookie svsutil_ScheduleEvent ['SVSThreadPool *pThreadPool', 'LPTHREAD_START_ROUTINE pfn', 'LPVOID lpParameter']
SVSCookie svsutil_StartTimer ['SVSThreadPool *pThreadPool', 'LPTHREAD_START_ROUTINE pfn', 'LPVOID lpParameter', 'unsigned long ulDelayTime']
int svsutil_UnScheduleEvent ['SVSThreadPool *pThreadPool', 'SVSCookie sCookie']
int svsutil_StopTimer ['SVSThreadPool *pThreadPool', 'SVSCookie sCookie']
void svsutil_DestroyThreadPool ['SVSThreadPool *pThreadPool']
float _Dot4dV ['float *vector1', 'float *vector2']
float _Dot3dVW0 ['float *vector1', 'float *vector2']
float _Dot3dVW1 ['float *vector1', 'float *vector2']
void _XDMultMatrix ['float *matrix']
float __fmac ['float i', 'float m', 'float n']
void __movca ['unsigned long value', 'unsigned long *addr']
float _Convolve ['int nelement', 'float *pstart', 'float *pend', 'float *pdata', 'float *pfilter']
HICON ExtractIconExA ['LPCSTR lpszFile', 'int nIconIndex', '_opt HICON *phiconLarge', '_opt HICON *phiconSmall', 'UINT nIcons']
HICON ExtractIconExW ['LPCWSTR lpszFile', 'int nIconIndex', '_opt HICON *phiconLarge', '_opt HICON *phiconSmall', 'UINT nIcons']
BOOL Shell_NotifyIcon ['DWORD dwMessage', 'PNOTIFYICONDATA lpData']
BOOL SHGetSpecialFolderPath ['HWND hwndOwner', 'LPTSTR lpszPath', 'int nFolder', 'BOOL fCreate']
void SHAddToRecentDocs ['UINT uFlags', 'LPCVOID pv']
DWORD SHCreateShortcut ['LPTSTR szShortcut', 'LPTSTR szTarget']
DWORD SHCreateShortcutEx ['LPTSTR lpszDir', 'LPTSTR lpszTarget', 'LPTSTR szShortcut', 'LPDWORD lpcbShortcut']
BOOL SHGetShortcutTarget ['LPCTSTR szShortcut', 'LPTSTR szTarget', 'int cb']
int SHShowOutOfMemory ['HWND hwndOwner', 'UINT grfFlags']
HBITMAP SHLoadDIBitmap ['LPCTSTR szFileName']
WINOLECTLAPI OleCreatePropertyFrame ['HWND hwndOwner', 'UINT x', 'UINT y', 'LPCOLESTR lpszCaption', 'ULONG cObjects', 'LPUNKNOWN FAR* ppUnk', 'ULONG cPages', 'LPCLSID pPageClsID', 'LCID lcid', 'DWORD dwReserved', 'LPVOID pvReserved']
WINOLECTLAPI OleCreatePropertyFrameIndirect ['LPOCPFIPARAMS lpParams']
WINOLECTLAPI OleTranslateColor ['OLE_COLOR clr', 'HPALETTE hpal', 'COLORREF* lpcolorref']
WINOLECTLAPI OleCreateFontIndirect ['LPFONTDESC lpFontDesc', 'REFIID riid', 'LPVOID FAR* lplpvObj']
WINOLECTLAPI OleCreatePictureIndirect ['LPPICTDESC lpPictDesc', 'REFIID riid', 'BOOL fOwn', 'LPVOID FAR* lplpvObj']
WINOLECTLAPI OleLoadPicture ['LPSTREAM lpstream', 'LONG lSize', 'BOOL fRunmode', 'REFIID riid', 'LPVOID FAR* lplpvObj']
WINOLECTLAPI OleLoadPictureFile ['VARIANT varFileName', 'LPDISPATCH* lplpdispPicture']
WINOLECTLAPI OleSavePictureFile ['LPDISPATCH lpdispPicture', 'BSTR bstrFileName']
WINOLECTLAPI OleLoadPicturePath ['LPOLESTR szUrl', 'LPUNKNOWN punkCaller', 'DWORD dwFlags', 'OLE_COLOR clrBackgnd', 'REFIID', 'LPVOID *']
RPC_STATUS NdrGetDcomProtocolVersion ['PMIDL_STUB_MESSAGE pStubMsg', 'RPC_VERSION * pVersion']
void NdrMarkNextActivePipe ['NDR_PIPE_DESC __RPC_FAR * pPipeDesc', 'unsigned int DirectionMask']
INT_PTR DeviceFromWindow ['HWND hwnd', 'LPSTR szDevice', 'RECT*prc']
HMONITOR OneMonitorFromWindow ['HWND hwnd']
BOOL SslEmptyCache ['VOID']
BOOL SslGenerateKeyPair ['PSSL_CREDENTIAL_CERTIFICATE pCerts', 'PSTR pszDN', 'PSTR pszPassword', 'DWORD Bits']
VOID SslGenerateRandomBits ['PUCHAR pRandomData', 'LONG cRandomData']
BOOL SslCrackCertificate ['PUCHAR pbCertificate', 'DWORD cbCertificate', 'DWORD dwFlags', 'PX509Certificate * ppCertificate']
VOID SslFreeCertificate ['PX509Certificate pCertificate']
DWORD SslGetMaximumKeySize ['DWORD Reserved']
BOOL SslGetDefaultIssuers ['PBYTE pbIssuers', 'DWORD *pcbIssuers']
BOOL AbortTransfer ['LPCUSB_FUNCS pUsbFuncs', 'USB_TRANSFER hTransfer', 'DWORD dwFlags']
BOOL CloseTransferHandle ['LPCUSB_FUNCS UsbFuncs', 'USB_TRANSFER hTransfer']
DWORD ClearOrSetFeature ['LPCUSB_FUNCS UsbFuncs', 'HANDLE hUsbDevice', 'LPTRANSFER_NOTIFY_ROUTINE NotifyRoutine', 'PVOID NotifyContext', 'DWORD dwFlags', 'WORD wFeature', 'UCHAR bIndex', 'DWORD dwTimeout', 'BOOL bSet']
DWORD DefaultTransferComplete ['PVOID Context']
DWORD GetStatus ['LPCUSB_FUNCS pUsbFuncs', 'HANDLE hUsbDevice', 'LPTRANSFER_NOTIFY_ROUTINE NotifyRoutine', 'PVOID NotifyContext', 'DWORD dwFlags', 'UCHAR bIndex', 'LPWORD lpwStatus', 'DWORD dwTimeout']
BOOL GetTransferStatus ['LPCUSB_FUNCS UsbFuncs', 'USB_TRANSFER hTransfer', 'LPDWORD pBytesTransferred', 'PUSB_ERROR pUsbError']
DWORD IssueBulkTransfer ['LPCUSB_FUNCS UsbFuncs', 'USB_PIPE hPipe', 'LPTRANSFER_NOTIFY_ROUTINE NotifyRoutine', 'PVOID NotifyContext', 'DWORD Flags', 'LPVOID pBuffer', 'ULONG PhysAddr', 'DWORD BufferLength', 'LPDWORD pBytesTransferred', 'DWORD dwTimeout', 'PUSB_ERROR pUsbRc']
DWORD IssueInterruptTransfer ['LPCUSB_FUNCS UsbFuncs', 'USB_PIPE hPipe', 'LPTRANSFER_NOTIFY_ROUTINE NotifyRoutine', 'PVOID NotifyContext', 'DWORD Flags', 'LPVOID pBuffer', 'ULONG PhysAddr', 'DWORD BufferLength', 'LPDWORD pBytesTransferred', 'DWORD dwTimeout', 'PUSB_ERROR pUsbRc']
DWORD IssueVendorTransfer ['LPCUSB_FUNCS UsbFuncs', 'HANDLE hUsbDevice', 'LPTRANSFER_NOTIFY_ROUTINE NotifyRoutine', 'PVOID NotifyContext', 'DWORD Flags', 'PUSB_DEVICE_REQUEST pControlHeader', 'LPVOID pBuf', 'ULONG PhysAddr', 'LPDWORD pBytesTransferred', 'DWORD dwTimeout', 'PUSB_ERROR pUsbRc']
DWORD ResetDefaultEndpoint ['LPCUSB_FUNCS UsbFuncs', 'HANDLE hUsbDevice']
DWORD ResetBulkEndpoint ['LPCUSB_FUNCS pUsbFuncs', 'HANDLE hUsbDevice', 'USB_PIPE hPipe', 'LPTRANSFER_NOTIFY_ROUTINE NotifyRoutine', 'PVOID NotifyContext', 'UCHAR bIndex', 'DWORD dwTimeout']
BOOL ResetPipe ['LPCUSB_FUNCS pUsbFuncs', 'USB_PIPE hPipe', 'DWORD dwFlags']
BOOL GetSetKeyValues ['LPCTSTR KeyName', 'PREG_VALUE_DESCR ValDesc', 'BOOL bSet', 'BOOL bOverwrite']
BOOL InitializeRemoveLock ['IN PREMOVE_LOCK Lock']
DWORD AcquireRemoveLock ['IN PREMOVE_LOCK Lock', 'IN OPTIONAL PVOID Tag']
VOID ReleaseRemoveLock ['IN PREMOVE_LOCK Lock', 'IN OPTIONAL PVOID Tag']
VOID ReleaseRemoveLockAndWait ['IN PREMOVE_LOCK Lock', 'IN OPTIONAL PVOID Tag']
int BthWriteScanEnableMask ['unsigned char\tmask']
int BthReadScanEnableMask ['unsigned char\t*pmask']
int BthWritePageTimeout ['unsigned short timeout']
int BthReadPageTimeout ['unsigned short *ptimeout']
int BthWriteCOD ['unsigned int\tcod']
int BthReadCOD ['unsigned int\t*pcod']
int BthGetRemoteCOD ['BT_ADDR *pbt', 'unsigned int\t*pcod']
int BthWriteAuthenticationEnable ['unsigned char\tae']
int BthReadAuthenticationEnable ['unsigned char\t*pae']
int BthWriteLinkPolicySettings ['BT_ADDR *pba', 'unsigned short\tlps']
int BthReadLinkPolicySettings ['BT_ADDR *pba', 'unsigned short\t*plps']
int BthEnterHoldMode ['BT_ADDR *pba', 'unsigned short\thold_mode_max', 'unsigned short\thold_mode_min', 'unsigned short *pinterval']
int BthEnterSniffMode ['BT_ADDR *pba', 'unsigned short\tsniff_mode_max', 'unsigned short\tsniff_mode_min', 'unsigned short\tsniff_attempt', 'unsigned short\tsniff_timeout', 'unsigned short *pinterval']
int BthExitSniffMode ['BT_ADDR *pba']
int BthEnterParkMode ['BT_ADDR *pba', 'unsigned short beacon_max', 'unsigned short beacon_min', 'unsigned short *pinterval']
int BthExitParkMode ['BT_ADDR *pba']
int BthGetCurrentMode ['BT_ADDR *pba', 'unsigned char\t*pmode']
int BthGetAddress ['unsigned short\thandle', 'BT_ADDR *pba']
int BthReadLocalAddr ['BT_ADDR *pba']
int BthGetHardwareStatus ['int *pistatus']
int BthReadLocalVersion ['unsigned char\t*phci_version', 'unsigned short\t*phci_revision', 'unsigned char\t*plmp_version', 'unsigned short\t*plmp_subversion', 'unsigned short\t*pmanufacturer', 'unsigned char\t*plmp_features']
int BthReadRemoteVersion ['BT_ADDR *pba', 'unsigned char\t*plmp_version', 'unsigned short\t*plmp_subversion', 'unsigned short\t*pmanufacturer', 'unsigned char\t*plmp_features']
int BthCancelInquiry ['void']
int BthTerminateIdleConnections ['void']
int BthSetInquiryFilter ['BT_ADDR *pba']
int BthClearInquiryFilter ['void']
int BthSwitchRole ['BT_ADDR* pbt', 'USHORT usRole']
int BthGetRole ['BT_ADDR* pbt', 'USHORT* pusRole']
int BthReadRSSI ['BT_ADDR* pbt', 'BYTE* pbRSSI']
int BthSetPIN ['BT_ADDR *pba', 'int cPinLength', 'unsigned char\t*ppin']
int BthRevokePIN ['BT_ADDR *pba']
int BthSetLinkKey ['BT_ADDR *pba', 'unsigned char key[16]']
int BthGetLinkKey ['BT_ADDR *pba', 'unsigned char key[16]']
int BthRevokeLinkKey ['BT_ADDR *pba']
int BthAuthenticate ['BT_ADDR *pba']
int BthSetEncryption ['BT_ADDR *pba', 'int fOn']
int BthSetSecurityUI ['HANDLE hEvent', 'DWORD dwStoreTimeout', 'DWORD dwProcTimeout']
int BthGetPINRequest ['BT_ADDR *pbt']
int BthRefusePINRequest ['BT_ADDR\t*pbt']
int BthCreateACLConnection ['BT_ADDR *pbt', 'unsigned short\t*phandle']
int BthCreateSCOConnection ['BT_ADDR *pbt', 'unsigned short\t*phandle']
int BthCloseConnection ['unsigned short\thandle']
int BthAcceptSCOConnections ['BOOL fAccept']
int BthNsSetService ['LPWSAQUERYSET pSet', 'WSAESETSERVICEOP op', 'DWORD dwFlags']
int BthNsLookupServiceBegin ['LPWSAQUERYSET pQuerySet', 'DWORD dwFlags', 'LPHANDLE lphLookup']
int BthNsLookupServiceEnd ['HANDLE hLookup']
HANDLE RegisterBluetoothCOMPort ['LPCWSTR lpszType', 'DWORD dwIndex', 'PORTEMUPortParams* pParams // BT specific params']
BOOL DeregisterBluetoothCOMPort ['HANDLE hDevice']
HANDLE RequestBluetoothNotifications ['DWORD dwClass', 'HANDLE hMsgQ\t// message queue created by caller']
BOOL StopBluetoothNotifications ['HANDLE h // Handle returned from RequestBluetoothNotifications']
int BthActivatePAN ['BOOL fActivate']
BOOL SHCloseApps ['DWORD dwMemSought']
BOOL SHDoneButton ['HWND hwndRequester', 'DWORD dwState']
HWND SHFindMenuBar ['HWND hwnd']
BOOL SHFreeContextMenuExtensions ['HANDLE hCMExtensions']
BOOL SHFullScreen ['HWND hwndRequester', 'DWORD dwState']
BYTE SHGetAppKeyAssoc ['LPCTSTR ptszApp']
BOOL SHGetAutoRunPath ['LPTSTR pAutoRunPath']
BOOL SHInitDialog ['PSHINITDLGINFO pshidi']
BOOL SHInitExtraControls ['void']
void SHInputDialog ['HWND hwnd', 'UINT uMsg', 'WPARAM wParam']
BOOL SHInvokeContextMenuCommand ['HWND hwndOwner', 'UINT idCmd', 'HANDLE hCMExtensions']
BOOL SHLoadContextMenuExtensions ['IUnknown *punkOwner', 'LPCTSTR pszContext', 'LPCTSTR pszClass', 'HMENU hmenu', 'UINT idCmdFirst', 'UINT idCmdLast', 'HANDLE *phCMExtensions']
void SHNavigateBack ['']
void SHSetBack ['int', 'HWND']
LRESULT SHNotificationAdd ['SHNOTIFICATIONDATA *pndAdd']
LRESULT SHNotificationGetData ['const CLSID *pclsid', 'DWORD dwID', 'SHNOTIFICATIONDATA *pndBuffer']
LRESULT SHNotificationRemove ['const CLSID *pclsid', 'DWORD dwID']
LRESULT SHNotificationUpdate ['DWORD grnumUpdateMask', 'SHNOTIFICATIONDATA *pndNew']
BOOL SHSetAppKeyWndAssoc ['BYTE bVk', 'HWND hwnd']
BOOL SHSetNavBarText ['HWND hwnd', 'LPCTSTR pszText']
BOOL SHSipPreference ['HWND hwnd', 'SIPSTATE st']
BOOL SHChangeNotifyRegister ['HWND hwnd', 'SHCHANGENOTIFYENTRY *pshcne']
BOOL SHChangeNotifyDeregister ['HWND hwnd']
void SHChangeNotifyFree ['FILECHANGENOTIFY *pfcn']
LPWSTR lstrcpyWInternal ['LPWSTR lpString1', 'LPCWSTR lpString2']
LPWSTR lstrcpynWInternal ['LPWSTR lpString1', 'LPCWSTR lpString2', 'int iMaxLength']
int lstrcmpWInternal ['LPCWSTR lpString1', 'LPCWSTR lpString2']
int lstrcmpiWInternal ['LPCWSTR lpString1', 'LPCWSTR lpString2']
int lstrlenWInternal ['LPCWSTR lpString']
LPWSTR lstrcpynWInternal ['LPWSTR lpString1', 'LPCWSTR lpString2', 'int iMaxLength']
void IntToWstr ['int i', 'LPWSTR wstr']
BOOL IsEqualObject ['IUnknown *pFirst', 'IUnknown *pSecond']
LONGLONG llMulDiv ['LONGLONG a', 'LONGLONG b', 'LONGLONG c', 'LONGLONG rnd']
LONGLONG Int64x32Div32 ['LONGLONG a', 'LONG b', 'LONG c', 'LONG rnd']
DWORD WaitDispatchingMessages ['HANDLE hObject', 'DWORD dwWait', 'HWND hwnd = NULL', 'UINT uMsg = 0']
MMRESULT CompatibleTimeSetEvent ['UINT uDelay', 'UINT uResolution', 'LPTIMECALLBACK lpTimeProc', 'DWORD_PTR dwUser', 'UINT fuEvent']
bool TimeKillSynchronousFlagAvailable ['void']
HANDLE CreateMsgQueue ['LPCWSTR lpName', 'LPMSGQUEUEOPTIONS lpOptions']
HANDLE OpenMsgQueue ['HANDLE hSrcProc', 'HANDLE hMsgQ', 'LPMSGQUEUEOPTIONS lpOptions']
BOOL WriteMsgQueue ['HANDLE hMsgQ', 'LPVOID lpBuffer', 'DWORD cbDataSize', 'DWORD dwTimeout', 'DWORD dwFlags']
BOOL GetMsgQueueInfo ['HANDLE hMsgQ', 'LPMSGQUEUEINFO lpInfo']
BOOL CloseMsgQueue ['HANDLE hMsgQ']
unexpected_handler set_unexpected ['unexpected_handler']
void unexpected ['']
terminate_handler set_terminate ['terminate_handler']
void terminate ['']
bool uncaught_exception ['']
void WriteDebugLED ['WORD wIndex', 'DWORD dwPattern']
BOOL RegisterDbgZones ['HMODULE hMod', 'LPDBGPARAM lpdbgparam']
LPSTR lstrcpynA ['LPSTR lpString1', 'LPCSTR lpString2', 'int iMaxLength']
BOOL FileTimeToDosDateTime ['CONST FILETIME *lpFileTime', 'LPWORD lpFatDate', 'LPWORD lpFatTime']
long RegCreateKey ['HKEY hkey', 'LPCWSTR lpszSubKey', 'PHKEY phkResult']
long RegOpenKey ['HKEY hKey', 'LPCWSTR lpszSubKey', 'PHKEY phkResult']
long RegQueryValue ['HKEY hKey', 'LPTSTR lpSubKey', 'LPTSTR lpValue', 'PLONG lpcbValue']
LONG InterlockedIncrement ['LONG volatile *lpAddend']
LONG InterlockedDecrement ['LONG volatile *lpAddend']
LONG InterlockedExchange ['LONG volatile *Target', 'LONG Value']
LONG InterlockedIncrement ['LONG volatile *lpAddend']
LONG InterlockedDecrement ['LONG volatile *lpAddend']
LONG InterlockedExchange ['LONG volatile *Target', 'LONG Value']
LONG InterlockedCompareExchange ['LONG volatile *Target', 'LONG Exchange', 'LONG Comperand']
LONG InterlockedExchangeAdd ['LONG volatile *lpAddend', 'LONG Value']
LONG InterlockedIncrement ['LONG volatile *lpAddend']
LONG InterlockedDecrement ['LONG volatile *lpAddend']
LONG InterlockedExchange ['LONG volatile *Target', 'LONG Value']
LONG InterlockedCompareExchange ['LONG volatile *Target', 'LONG Exchange', 'LONG Comperand']
LONG InterlockedExchangeAdd ['LONG volatile *lpAddend', 'LONG Value']
DWORD Random ['']
int WinMain ['HINSTANCE hInstance', 'HINSTANCE hPrevInstance', '#ifdef UNDER_CE LPWSTR lpCmdLine', '#else LPSTR lpCmdLine', '#endif int nShowCmd']
LONG CompareFileTime ['const FILETIME *lpft1', 'const FILETIME *lpft2']
BOOL FileTimeToSystemTime ['const FILETIME *lpft', 'LPSYSTEMTIME lpst']
BOOL SystemTimeToFileTime ['const SYSTEMTIME *lpst', 'LPFILETIME lpft']
BOOL FileTimeToLocalFileTime ['const FILETIME *lpft', 'LPFILETIME lpftLocal']
BOOL LocalFileTimeToFileTime ['const FILETIME *lpftLocal', 'LPFILETIME lpft']
VOID GetCurrentFT ['LPFILETIME lpFileTime']
BOOL DllMain ['HANDLE hinstDLL', 'DWORD dwReason', 'LPVOID lpvReserved']
FARPROC GetProcAddressW ['HMODULE hModule', 'LPCWSTR lpProcName']
FARPROC GetProcAddressA ['HMODULE hModule', 'LPCSTR lpProcName']
FARPROC GetProcAddress ['HMODULE hModule', 'LPCSTR lpProcName']
int MulDiv ['IN int nNumber', 'IN int nNumerator', 'IN int nDenominator']
VOID GetLocalTime ['LPSYSTEMTIME lpSystemTime']
VOID GetSystemTime ['LPSYSTEMTIME lpSystemTime']
VOID GetSystemTimeAsFileTime ['LPFILETIME lpSystemTimeAsFileTime']
DWORD GetTimeZoneInformation ['LPTIME_ZONE_INFORMATION lpTimeZoneInformation']
BOOL SetLocalTime ['CONST SYSTEMTIME *lpSystemTime']
BOOL SetSystemTime ['CONST SYSTEMTIME *lpSystemTime']
void SetDaylightTime ['DWORD dst']
BOOL SetTimeZoneInformation ['CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation']
LPSTR lstrcatA ['out LPSTR lpString1', 'LPCSTR lpString2']
int lstrcmpA ['LPCSTR lpString1', 'LPCSTR lpString2']
int lstrcmpW ['LPCWSTR lpString1', 'LPCWSTR lpString2']
int lstrcmpiA ['LPCSTR lpString1', 'LPCSTR lpString2']
int lstrcmpiW ['LPCWSTR lpString1', 'LPCWSTR lpString2']
LPSTR lstrcpyA ['LPSTR lpString1', 'LPCSTR lpString2']
int lstrlenA ['LPCSTR lpString']
DWORD CharLowerBuffA ['out_opt LPSTR lpsz', 'DWORD cchLength']
DWORD CharLowerBuffW ['_opt LPWSTR lpsz', 'DWORD cchLength']
DWORD CharUpperBuffA ['out_opt LPSTR lpsz', 'DWORD cchLength']
DWORD CharUpperBuffW ['_opt LPWSTR lpsz', 'DWORD cchLength']
LPSTR CharLowerA ['out LPSTR lpsz']
LPWSTR CharLowerW ['out LPWSTR lpsz']
LPSTR CharUpperA ['out LPSTR lpsz']
LPWSTR CharUpperW ['out LPWSTR lpsz']
LPSTR CharPrevA ['LPCSTR lpszStart', 'LPCSTR lpszCurrent']
LPWSTR CharPrevW ['LPCWSTR lpszStart', 'LPCWSTR lpszCurrent']
LPSTR CharNextA ['LPCSTR lpsz']
LPWSTR CharNextW ['LPCWSTR lpsz']
V wsprintfA ['out LPSTR', '__format_string LPCSTR', '...']
V wsprintfW ['out LPWSTR', '__format_string LPCWSTR', '...']
int wvsprintfA ['out LPSTR', '__format_string LPCSTR', 'va_list arglist']
int wvsprintfW ['out LPWSTR', '__format_string LPCWSTR', 'va_list arglist']
VOID GlobalMemoryStatus ['out LPMEMORYSTATUS lpBuffer']
LPVOID LocalLock ['HLOCAL hMem']
BOOL LocalUnlock ['HLOCAL hMem']
HLOCAL LocalHandle ['LPCVOID pMem']
UINT LocalFlags ['HLOCAL hMem']
HLOCAL LocalAlloc ['UINT fuFlags', 'UINT cbBytes']
HLOCAL LocalAllocTrace ['UINT fuFlags', 'UINT cbBytes', 'UINT cLineNum', 'LPCWSTR szFilename']
HLOCAL LocalFree ['HLOCAL hMem']
HLOCAL LocalReAlloc ['HLOCAL hMem', 'UINT cbBytes', 'UINT fuFlags']
UINT LocalSize ['HLOCAL hMem']
LPVOID VirtualAlloc ['LPVOID lpAddress', 'DWORD dwSize', 'DWORD flAllocationType', 'DWORD flProtect']
BOOL VirtualFree ['LPVOID lpAddress', 'DWORD dwSize', 'DWORD dwFreeType']
LPVOID VirtualAllocEx ['HANDLE hProcess', 'LPVOID lpAddress', 'DWORD dwSize', 'DWORD flAllocationType', 'DWORD flProtect']
BOOL VirtualFreeEx ['HANDLE hProcess', 'LPVOID lpAddress', 'DWORD dwSize', 'DWORD dwFreeType']
BOOL VirtualProtect ['LPVOID lpAddress', 'DWORD dwSize', 'DWORD flNewProtect', 'PDWORD lpflOldProtect']
DWORD VirtualQuery ['LPCVOID lpAddress', 'PMEMORY_BASIC_INFORMATION lpBuffer', 'DWORD dwLength']
BOOL VirtualProtectEx ['HANDLE hProcess', 'LPVOID lpAddress', 'DWORD dwSize', 'DWORD flNewProtect', 'PDWORD lpflOldProtect']
DWORD VirtualQueryEx ['HANDLE hProcess', 'LPCVOID lpAddress', 'PMEMORY_BASIC_INFORMATION lpBuffer', 'DWORD dwLength']
HANDLE GetProcessHeap ['VOID']
HANDLE HeapCreate ['DWORD flOptions', 'DWORD dwInitialSize', 'DWORD dwMaximumSize']
BOOL HeapDestroy ['HANDLE hHeap']
LPVOID HeapAlloc ['HANDLE hHeap', 'DWORD dwFlags', 'DWORD dwBytes']
LPVOID HeapAllocTrace ['HANDLE hHeap', 'DWORD dwFlags', 'DWORD dwBytes', 'DWORD dwLineNum', 'PCHAR szFilename']
LPVOID HeapReAlloc ['HANDLE hHeap', 'DWORD dwFlags', 'LPVOID lpMem', 'DWORD dwBytes']
BOOL HeapFree ['HANDLE hHeap', 'DWORD dwFlags', 'LPVOID lpMem']
DWORD HeapSize ['HANDLE hHeap', 'DWORD dwFlags', 'LPCVOID lpMem']
BOOL HeapValidate ['HANDLE hHeap', 'DWORD dwFlags', 'LPCVOID lpMem']
UINT HeapCompact ['HANDLE hHeap', 'DWORD dwFlags']
HANDLE CeHeapCreate ['DWORD flOptions', 'DWORD dwInitialSize', 'DWORD dwMaximumSize', 'PFN_AllocHeapMem pfnAlloc', 'PFN_FreeHeapMem pfnFree']
VOID OutputDebugStringA ['LPCSTR lpOutputString']
VOID OutputDebugStringW ['LPCWSTR lpOutputString']
VOID DebugBreak ['VOID']
VOID SignalStarted ['DWORD dw']
BOOL QueryPerformanceCounter ['LARGE_INTEGER *lpPerformanceCount']
BOOL QueryPerformanceFrequency ['LARGE_INTEGER *lpFrequency']
BOOL GetVersionExA ['LPOSVERSIONINFOA lpVersionInformation']
BOOL GetVersionExW ['LPOSVERSIONINFOW lpVersionInformation']
HINSTANCE LoadLibraryA ['LPCSTR lpLibFileName']
HINSTANCE LoadLibraryW ['LPCWSTR lpLibFileName']
HMODULE LoadLibraryExA ['IN LPCSTR lpLibFileName', 'IN HANDLE hFile', 'IN DWORD dwFlags']
HMODULE LoadLibraryExW ['IN LPCWSTR lpLibFileName', 'IN HANDLE hFile', 'IN DWORD dwFlags']
HMODULE GetModuleHandleA ['LPCSTR lpModuleName']
HMODULE GetModuleHandleW ['LPCWSTR lpModuleName']
PVOID AddVectoredExceptionHandler ['IN ULONG FirstHandler', 'IN PVECTORED_EXCEPTION_HANDLER VectoredHandler']
ULONG RemoveVectoredExceptionHandler ['IN PVOID VectoredHandlerHandle']
VOID EnterCriticalSection ['LPCRITICAL_SECTION pcsCriticalSection']
VOID LeaveCriticalSection ['LPCRITICAL_SECTION pcsCriticalSection']
VOID InitializeCriticalSection ['LPCRITICAL_SECTION pcsCriticalSection']
BOOL TryEnterCriticalSection ['IN OUT LPCRITICAL_SECTION lpCriticalSection']
VOID DeleteCriticalSection ['LPCRITICAL_SECTION pcsCriticalSection']
BOOL WaitForDebugEvent ['LPDEBUG_EVENT lpDebugEvent', 'DWORD dwMilliseconds']
BOOL ContinueDebugEvent ['DWORD dwProcessId', 'DWORD dwThreadId', 'DWORD dwContinueStatus']
BOOL DebugActiveProcess ['DWORD dwProcessId']
BOOL DebugActiveProcessStop ['DWORD dwProcessId']
BOOL DebugSetProcessKillOnExit ['BOOL KillOnExit']
BOOL CheckRemoteDebuggerPresent ['HANDLE hProcess', 'PBOOL pbDebuggerPresent']
LPVOID MapViewOfFile ['HANDLE hFileMappingObject', 'DWORD dwDesiredAccess', 'DWORD dwFileOffsetHigh', 'DWORD dwFileOffsetLow', 'DWORD dwNumberOfBytesToMap']
BOOL UnmapViewOfFile ['LPCVOID lpBaseAddress']
BOOL FlushViewOfFile ['LPCVOID lpBaseAddress', 'DWORD dwNumberOfBytesToFlush']
HANDLE CreateFileMappingA ['HANDLE hFile', 'LPSECURITY_ATTRIBUTES lpFileMappingAttributes', 'DWORD flProtect', 'DWORD dwMaximumSizeHigh', 'DWORD dwMaximumSizeLow', 'LPCSTR lpName']
HANDLE CreateFileMappingW ['HANDLE hFile', 'LPSECURITY_ATTRIBUTES lpFileMappingAttributes', 'DWORD flProtect', 'DWORD dwMaximumSizeHigh', 'DWORD dwMaximumSizeLow', 'LPCWSTR lpName']
HANDLE CreateFileForMappingW ['LPCWSTR lpFileName', 'DWORD dwDesiredAccess', 'DWORD dwShareMode', 'LPSECURITY_ATTRIBUTES lpSecurityAttributes', 'DWORD dwCreationDisposition', 'DWORD dwFlagsAndAttributes', 'HANDLE hTemplateFile']
HANDLE CreateThread ['LPSECURITY_ATTRIBUTES lpsa', 'DWORD cbStack', 'LPTHREAD_START_ROUTINE lpStartAddr', 'LPVOID lpvThreadParam', 'DWORD fdwCreate', 'LPDWORD lpIDThread']
VOID ExitThread ['DWORD dwExitCode']
BOOL TerminateThread ['HANDLE hThread', 'DWORD dwExitCode']
LPVOID ConvertThreadToFiber ['LPVOID lpParameter']
LPVOID CreateFiber ['DWORD dwStackSize', 'LPFIBER_START_ROUTINE lpStartAddress', 'LPVOID lpParameter']
VOID DeleteFiber ['LPVOID lpFiber']
LPVOID GetFiberData ['VOID']
LPVOID GetCurrentFiber ['VOID']
VOID SwitchToFiber ['LPVOID lpFiber']
LPVOID TlsGetValue ['DWORD dwTlsIndex']
BOOL TlsSetValue ['DWORD dwTlsIndex', 'LPVOID lpvTlsValue']
BOOL CreateProcessA ['LPCSTR pszImageName', 'LPCSTR pszCmdLine', 'LPSECURITY_ATTRIBUTES psaProcess', 'LPSECURITY_ATTRIBUTES psaThread', 'BOOL fInheritHandles', 'DWORD fdwCreate', 'LPVOID pvEnvironment', 'LPSTR pszCurDir', 'LPSTARTUPINFO psiStartInfo', 'LPPROCESS_INFORMATION pProcInfo']
BOOL CreateProcessW ['LPCWSTR pszImageName', 'LPCWSTR pszCmdLine', 'LPSECURITY_ATTRIBUTES psaProcess', 'LPSECURITY_ATTRIBUTES psaThread', 'BOOL fInheritHandles', 'DWORD fdwCreate', 'LPVOID pvEnvironment', 'LPWSTR pszCurDir', 'LPSTARTUPINFO psiStartInfo', 'LPPROCESS_INFORMATION pProcInfo']
DWORD GetProcessVersion ['DWORD ProcessId']
DWORD GetProcessId ['HANDLE hProcess']
LPSTR GetCommandLineA ['VOID']
LPWSTR GetCommandLineW ['VOID']
DWORD GetLastError ['VOID']
DWORD GetTickCount ['VOID']
DWORD GetIdleTime ['VOID']
DWORD FormatMessageA ['DWORD dwFlags', 'LPCVOID lpSource', 'DWORD dwMessageId', 'DWORD dwLanguageId', 'LPSTR lpBuffer', 'DWORD nSize', 'va_list *Arguments']
DWORD FormatMessageW ['DWORD dwFlags', 'LPCVOID lpSource', 'DWORD dwMessageId', 'DWORD dwLanguageId', 'LPWSTR lpBuffer', 'DWORD nSize', 'va_list *Arguments']
BOOL CloseHandle ['HANDLE hObject']
BOOL DuplicateHandle ['HANDLE hSourceProcessHandle', 'HANDLE hSourceHandle', 'HANDLE hTargetProcessHandle', 'LPHANDLE lpTargetHandle', 'DWORD dwDesiredAccess', 'BOOL bInheritHandle', 'DWORD dwOptions']
HGLOBAL LoadResource ['HMODULE hModule', 'HRSRC hResInfo']
DWORD SizeofResource ['HMODULE hModule', 'HRSRC hResInfo']
HRSRC FindResourceA ['HMODULE hModule', 'LPCSTR lpName', 'LPCSTR lpType']
HRSRC FindResourceW ['HMODULE hModule', 'LPCWSTR lpName', 'LPCWSTR lpType']
LPVOID LockResource ['HGLOBAL hResData']
ATOM GlobalAddAtomA ['LPCSTR lpString']
ATOM GlobalAddAtomW ['LPCWSTR lpString']
ATOM GlobalFindAtomA ['LPCSTR lpString']
ATOM GlobalFindAtomW ['LPCWSTR lpString']
ATOM GlobalDeleteAtom ['ATOM nAtom']
BOOL TerminateProcess ['HANDLE hProcess', 'DWORD uExitCode']
BOOL FlushInionCache ['HANDLE hProcess', 'LPCVOID lpBaseAddress', 'DWORD dwSize']
BOOL ReadProcessMemory ['HANDLE hProcess', 'LPCVOID lpBaseAddress', 'LPVOID lpBuffer', 'DWORD nSize', 'LPDWORD lpNumberOfBytesRead']
BOOL WriteProcessMemory ['HANDLE hProcess', 'LPVOID lpBaseAddress', 'LPVOID lpBuffer', 'DWORD nSize', 'LPDWORD lpNumberOfBytesWritten']
HANDLE OpenProcess ['DWORD fdwAccess', 'BOOL fInherit', 'DWORD IDProcess']
HANDLE OpenThread ['DWORD fdwAccess', 'BOOL fInherit', 'DWORD IDThread']
BOOL GetThreadContext ['HANDLE hThread', 'LPCONTEXT lpContext']
BOOL SetThreadContext ['HANDLE hThread', 'CONST CONTEXT *lpContext']
DWORD SuspendThread ['HANDLE hThread']
DWORD ResumeThread ['HANDLE hThread']
BOOL GetThreadTimes ['HANDLE hThread', 'LPFILETIME lpCreationTime', 'LPFILETIME lpExitTime', 'LPFILETIME lpKernelTime', 'LPFILETIME lpUserTime']
int GetThreadPriority ['HANDLE hThread']
BOOL SetThreadPriority ['HANDLE hThread', 'int nPriority']
int CeGetThreadPriority ['HANDLE hThread']
BOOL CeSetThreadPriority ['HANDLE hThread', 'int nPriority']
DWORD CeGetThreadQuantum ['HANDLE hThread']
BOOL CeSetThreadQuantum ['HANDLE hThread', 'DWORD dwTime']
DWORD GetThreadId ['HANDLE hThread']
DWORD GetProcessIdOfThread ['HANDLE hThread']
LPVOID CeZeroPointer ['LPVOID ptr']
VOID SetLastError ['DWORD dwErrCode']
BOOL GetDiskFreeSpaceExA ['LPCSTR lpDirectoryName', 'PULARGE_INTEGER lpFreeBytesAvailableToCaller', 'PULARGE_INTEGER lpTotalNumberOfBytes', 'PULARGE_INTEGER lpTotalNumberOfFreeBytes']
BOOL GetDiskFreeSpaceExW ['LPCWSTR lpDirectoryName', 'PULARGE_INTEGER lpFreeBytesAvailableToCaller', 'PULARGE_INTEGER lpTotalNumberOfBytes', 'PULARGE_INTEGER lpTotalNumberOfFreeBytes']
HANDLE CreateFileA ['LPCSTR lpFileName', 'DWORD dwDesiredAccess', 'DWORD dwShareMode', 'LPSECURITY_ATTRIBUTES lpSecurityAttributes', 'DWORD dwCreationDisposition', 'DWORD dwFlagsAndAttributes', 'HANDLE hTemplateFile']
HANDLE CreateFileW ['LPCWSTR lpFileName', 'DWORD dwDesiredAccess', 'DWORD dwShareMode', 'LPSECURITY_ATTRIBUTES lpSecurityAttributes', 'DWORD dwCreationDisposition', 'DWORD dwFlagsAndAttributes', 'HANDLE hTemplateFile']
BOOL DeleteFileA ['LPCSTR lpFileName']
BOOL DeleteFileW ['LPCWSTR lpFileName']
HANDLE FindFirstFileExA ['IN LPCSTR lpFileName', 'IN FINDEX_INFO_LEVELS fInfoLevelId', 'OUT LPVOID lpFindFileData', 'IN FINDEX_SEARCH_OPS fSearchOp', 'IN LPVOID lpSearchFilter', 'IN DWORD dwAdditionalFlags']
HANDLE FindFirstFileExW ['IN LPCWSTR lpFileName', 'IN FINDEX_INFO_LEVELS fInfoLevelId', 'OUT LPVOID lpFindFileData', 'IN FINDEX_SEARCH_OPS fSearchOp', 'IN LPVOID lpSearchFilter', 'IN DWORD dwAdditionalFlags']
BOOL DeleteAndRenameFile ['LPCWSTR lpOldFileName', 'LPCWSTR lpNewFileName']
HANDLE FindFirstFileA ['LPCSTR lpFileName', 'LPWIN32_FIND_DATAA lpFindFileData']
HANDLE FindFirstFileW ['LPCWSTR lpFileName', 'LPWIN32_FIND_DATAW lpFindFileData']
BOOL FindNextFileA ['HANDLE hFindFile', 'LPWIN32_FIND_DATAA lpFindFileData']
BOOL FindNextFileW ['HANDLE hFindFile', 'LPWIN32_FIND_DATAW lpFindFileData']
BOOL CopyFileA ['LPCSTR lpExistingFileName', 'LPCSTR lpNewFileName', 'BOOL bFailIfExists']
BOOL CopyFileW ['LPCWSTR lpExistingFileName', 'LPCWSTR lpNewFileName', 'BOOL bFailIfExists']
BOOL CopyFileExA ['LPCSTR lpExistingFileName', 'LPCSTR lpNewFileName', 'LPPROGRESS_ROUTINE lpProgressRoutine', 'LPVOID lpData', 'LPBOOL pbCancel', 'DWORD dwCopyFlags']
BOOL CopyFileExW ['LPCWSTR lpExistingFileName', 'LPCWSTR lpNewFileName', 'LPPROGRESS_ROUTINE lpProgressRoutine', 'LPVOID lpData', 'LPBOOL pbCancel', 'DWORD dwCopyFlags']
BOOL MoveFileA ['LPCSTR lpExistingFileName', 'LPCSTR lpNewFileName']
BOOL MoveFileW ['LPCWSTR lpExistingFileName', 'LPCWSTR lpNewFileName']
BOOL CreateDirectoryA ['LPCSTR lpPathName', 'LPSECURITY_ATTRIBUTES lpSecurityAttributes']
BOOL CreateDirectoryW ['LPCWSTR lpPathName', 'LPSECURITY_ATTRIBUTES lpSecurityAttributes']
BOOL RemoveDirectoryA ['LPCSTR lpPathName']
BOOL RemoveDirectoryW ['LPCWSTR lpPathName']
BOOL ReadFileScatter ['HANDLE hFile', 'FILE_SEGMENT_ELEMENT aSegmentArray[]', 'DWORD nNumberOfBytesToRead', 'LPDWORD lpReserved', 'LPOVERLAPPED lpOverlapped']
BOOL WriteFileGather ['HANDLE hFile', 'FILE_SEGMENT_ELEMENT aSegmentArray[]', 'DWORD nNumberOfBytesToWrite', 'LPDWORD lpReserved', 'LPOVERLAPPED lpOverlapped']
BOOL LockFileEx ['HANDLE hFile', 'DWORD dwFlags', 'DWORD dwReserved', 'DWORD nNumberOfBytesToLockLow', 'DWORD nNumberOfBytesToLockHigh', 'LPOVERLAPPED lpOverlapped']
BOOL UnlockFileEx ['HANDLE hFile', 'DWORD dwReserved', 'DWORD nNumberOfBytesToUnlockLow', 'DWORD nNumberOfBytesToUnlockHigh', 'LPOVERLAPPED lpOverlapped']
HANDLE FindFirstChangeNotificationA ['IN LPCSTR lpPathName', 'IN BOOL bWatchSubtree', 'IN DWORD dwNotifyFilter']
HANDLE FindFirstChangeNotificationW ['IN LPCWSTR lpPathName', 'IN BOOL bWatchSubtree', 'IN DWORD dwNotifyFilter']
BOOL FindNextChangeNotification ['IN HANDLE hChangeHandle']
BOOL FindCloseChangeNotification ['IN HANDLE hChangeHandle']
BOOL CeFsIoControlW ['IN LPCWSTR pszRootPath', 'IN DWORD dwIoctl', 'IN LPVOID lpInBuf', 'IN DWORD nInBufSize', 'OUT LPVOID lpOutBuf', 'IN DWORD nOutBufSize', 'OUT LPDWORD lpBytesReturned', 'IN LPOVERLAPPED lpOverlapped']
BOOL CeFsIoControlA ['IN LPCSTR pszRootPath', 'IN DWORD dwIoctl', 'IN LPVOID lpInBuf', 'IN DWORD nInBufSize', 'OUT LPVOID lpOutBuf', 'IN DWORD nOutBufSize', 'OUT LPDWORD lpBytesReturned', 'IN LPOVERLAPPED lpOverlapped']
BOOL SetFileAttributesA ['LPCSTR lpFileName', 'DWORD dwFileAttributes']
BOOL SetFileAttributesW ['LPCWSTR lpFileName', 'DWORD dwFileAttributes']
DWORD SetFilePointer ['HANDLE hFile', 'LONG lDistanceToMove', 'PLONG lpDistanceToMoveHigh', 'DWORD dwMoveMethod']
BOOL FindClose ['HANDLE hFindFile']
DWORD GetFileSize ['HANDLE hFile', 'LPDWORD lpFileSizeHigh']
DWORD GetFileAttributesA ['LPCSTR lpFileName']
DWORD GetFileAttributesW ['LPCWSTR lpFileName']
BOOL GetFileAttributesExA ['IN LPCSTR lpFileName', 'IN GET_FILEEX_INFO_LEVELS fInfoLevelId', 'OUT LPVOID lpFileInformation']
BOOL GetFileAttributesExW ['IN LPCWSTR lpFileName', 'IN GET_FILEEX_INFO_LEVELS fInfoLevelId', 'OUT LPVOID lpFileInformation']
BOOL GetFileInformationByHandle ['HANDLE hFile', 'LPBY_HANDLE_FILE_INFORMATION lpFileInformation']
VOID Sleep ['DWORD dwMilliseconds']
HANDLE CreateMutexA ['LPSECURITY_ATTRIBUTES lpsa', 'BOOL bInitialOwner', 'LPCSTR lpName']
HANDLE CreateMutexW ['LPSECURITY_ATTRIBUTES lpsa', 'BOOL bInitialOwner', 'LPCWSTR lpName']
HANDLE CreateEventA ['LPSECURITY_ATTRIBUTES lpEventAttributes', 'BOOL bManualReset', 'BOOL bInitialState', 'LPCSTR lpName']
HANDLE CreateEventW ['LPSECURITY_ATTRIBUTES lpEventAttributes', 'BOOL bManualReset', 'BOOL bInitialState', 'LPCWSTR lpName']
HANDLE OpenEventA ['DWORD dwDesiredAccess', 'BOOL bInheritHandle', 'LPCSTR lpName']
HANDLE OpenEventW ['DWORD dwDesiredAccess', 'BOOL bInheritHandle', 'LPCWSTR lpName']
HANDLE CreateSemaphoreA ['IN LPSECURITY_ATTRIBUTES lpSemaphoreAttributes', 'IN LONG lInitialCount', 'IN LONG lMaximumCount', 'IN LPCSTR lpName']
HANDLE CreateSemaphoreW ['IN LPSECURITY_ATTRIBUTES lpSemaphoreAttributes', 'IN LONG lInitialCount', 'IN LONG lMaximumCount', 'IN LPCWSTR lpName']
BOOL SetEvent ['HANDLE hEvent']
BOOL ResetEvent ['HANDLE hEvent']
BOOL PulseEvent ['HANDLE hEvent']
BOOL ReleaseSemaphore ['IN HANDLE hSemaphore', 'IN LONG lReleaseCount', 'OUT LPLONG lpPreviousCount']
BOOL ReleaseMutex ['HANDLE hMutex']
DWORD WaitForSingleObject ['HANDLE hHandle', 'DWORD dwMilliseconds']
BOOL GetExitCodeThread ['HANDLE hThread', 'LPDWORD lpExitCode']
BOOL GetExitCodeProcess ['HANDLE hProcess', 'LPDWORD lpExitCode']
HANDLE GetCurrentThread ['VOID']
HANDLE GetCurrentProcess ['VOID']
DWORD GetCurrentThreadId ['VOID']
DWORD GetCurrentProcessId ['VOID']
DWORD TlsAlloc ['VOID']
BOOL IsBadCodePtr ['FARPROC lpfn']
BOOL TlsFree ['DWORD dwTlsIndex']
VOID GetSystemInfo ['LPSYSTEM_INFO lpSystemInfo']
BOOL QueryInionSet ['DWORD dwInionSet', 'LPDWORD lpdwCurrentInionSet']
BOOL IsProcessorFeaturePresent ['DWORD dwProcessorFeature']
VOID RaiseException ['DWORD dwExceptionCode', 'DWORD dwExceptionFlags', 'DWORD nNumberOfArguments', 'CONST DWORD *lpArguments']
BOOL FreeLibrary ['HMODULE hLibModule']
VOID FreeLibraryAndExitThread ['HMODULE hLibModule', 'DWORD dwExitCode']
BOOL DisableThreadLibraryCalls ['IN HMODULE hLibModule']
BOOL ClearCommBreak ['HANDLE hFile']
BOOL ClearCommError ['HANDLE hFile', 'LPDWORD lpErrors', 'LPCOMSTAT lpStat']
BOOL SetupComm ['HANDLE hFile', 'DWORD dwInQueue', 'DWORD dwOutQueue']
BOOL EscapeCommFunction ['HANDLE hFile', 'DWORD dwFunc']
BOOL GetCommMask ['HANDLE hFile', 'LPDWORD lpEvtMask']
BOOL GetCommProperties ['HANDLE hFile', 'LPCOMMPROP lpCommProp']
BOOL GetCommModemStatus ['HANDLE hFile', 'LPDWORD lpModemStat']
BOOL GetCommState ['HANDLE hFile', 'LPDCB lpDCB']
BOOL GetCommTimeouts ['HANDLE hFile', 'LPCOMMTIMEOUTS lpCommTimeouts']
BOOL PurgeComm ['HANDLE hFile', 'DWORD dwFlags']
BOOL SetCommBreak ['HANDLE hFile']
BOOL SetCommMask ['HANDLE hFile', 'DWORD dwEvtMask']
BOOL SetCommState ['HANDLE hFile', 'LPDCB lpDCB']
BOOL SetCommTimeouts ['HANDLE hFile', 'LPCOMMTIMEOUTS lpCommTimeouts']
BOOL TransmitCommChar ['HANDLE hFile', 'char cChar']
BOOL WaitCommEvent ['HANDLE hFile', 'LPDWORD lpEvtMask', 'LPOVERLAPPED lpOverlapped']
BOOL GetSystemPowerStatusEx ['PSYSTEM_POWER_STATUS_EX pSystemPowerStatusEx', 'BOOL fUpdate']
DWORD GetSystemPowerStatusEx2 ['PSYSTEM_POWER_STATUS_EX2 pSystemPowerStatusEx2', 'DWORD dwLen', 'BOOL fUpdate']
void BatteryNotifyOfTimeChange ['BOOL fForward', 'FILETIME *pftDelta']
BOOL CheckPassword ['LPWSTR lpszPassword']
HANDLE RegisterDevice ['LPCWSTR lpszName', 'DWORD index', 'LPCWSTR lpszLib', 'DWORD dwInfo']
BOOL DeregisterDevice ['_opt HANDLE hDevice']
BOOL LoadFSD ['HANDLE hDevice', 'LPCWSTR lpFSDName']
BOOL LoadFSDEx ['HANDLE hDevice', 'LPCWSTR lpFSDName', 'DWORD dwFlag']
HANDLE ActivateDevice ['LPCWSTR lpszDevKey', 'DWORD dwClientInfo']
HANDLE ActivateDeviceEx ['LPCWSTR lpszDevKey', 'LPCVOID lpRegEnts', 'DWORD cRegEnts', 'LPVOID lpvParam']
BOOL DeactivateDevice ['_opt HANDLE hDevice']
BOOL CeResyncFilesys ['HANDLE hDevice']
BOOL GetDeviceInformationByDeviceHandle ['HANDLE hDevice', 'PDEVMGR_DEVICE_INFORMATION pdi']
BOOL GetDeviceInformationByFileHandle ['HANDLE hFile', 'PDEVMGR_DEVICE_INFORMATION pdi']
HANDLE FindFirstDevice ['DeviceSearchType searchType', 'LPCVOID pvSearchParam', 'PDEVMGR_DEVICE_INFORMATION pdi']
BOOL FindNextDevice ['HANDLE h', 'PDEVMGR_DEVICE_INFORMATION pdi']
HKEY RegOpenProcessKey ['DWORD hPnp']
BOOL ResourceCreateList ['DWORD dwResId', 'DWORD dwMinimum', 'DWORD dwCount']
BOOL ResourceDestroyList ['DWORD dwResId']
BOOL ResourceRequest ['DWORD dwResId', 'DWORD dwId', 'DWORD dwLen']
BOOL ResourceRequestEx ['DWORD dwResId', 'DWORD dwId', 'DWORD dwLen', 'DWORD dwFlags']
BOOL ResourceRelease ['DWORD dwResId', 'DWORD dwId', 'DWORD dwLen']
BOOL ResourceMarkAsShareable ['DWORD dwResId', 'DWORD dwId', 'DWORD dwLen', 'BOOL fShareable']
HANDLE RequestDeviceNotifications ['const GUID *devclass', 'HANDLE hMsgQ', 'BOOL fAll']
BOOL StopDeviceNotifications ['HANDLE h']
BOOL AdvertiseInterface ['const GUID *devclass', 'LPCWSTR name', 'BOOL fAdd']
BOOLEAN GetUserNameExA ['EXTENDED_NAME_FORMAT NameFormat', 'LPSTR lpNameBuffer', 'PULONG nSize']
HANDLE RegisterEventSourceW ['LPCWSTR lpUNCServerName', 'LPCWSTR lpSourceName']
BOOL DeregisterEventSource ['HANDLE hEventLog']
BOOL ClearEventLogW ['HANDLE hEventLog', 'LPCWSTR lpBackupFileName']
HANDLE OpenEventLogW ['LPCTSTR lpUNCServerName', 'LPCTSTR lpSourceName']
BOOL CloseEventLog ['HANDLE hEventLog']
BOOL BackupEventLogW ['HANDLE hEventLog', 'LPCTSTR szBackupFileName']
BOOL LockEventLog ['HANDLE hEventLog']
BOOL UnLockEventLog ['HANDLE hEventLog']
BOOL ReadEventLogRaw ['HANDLE hEventLog', 'BYTE *pReadBuffer', 'DWORD dwReadBufferSize', 'DWORD *pdwBytesRead']
DWORD CeCertVerify ['HANDLE hFile', 'HANDLE * phHandle', 'LPCWSTR pszFileName', 'LPWSTR pszAccountName', 'DWORD cbAccountNameSize', 'DWORD dwFlags']
ULONG64 UnsignedMultiply128 ['IN ULONG64 Multiplier', 'IN ULONG64 Multiplicand', 'OUT ULONG64 *HighProduct']
HANDLE GPSOpenDevice ['HANDLE hNewLocationData', 'HANDLE hDeviceStateChange', 'const WCHAR *szDeviceName', 'DWORD dwFlags']
DWORD GPSCloseDevice ['HANDLE hGPSDevice']
DWORD GPSGetPosition ['HANDLE hGPSDevice', 'GPS_POSITION *pGPSPosition', 'DWORD dwMaximumAge', 'DWORD dwFlags']
DWORD GPSGetDeviceState ['GPS_DEVICE *pGPSDevice']
DWORD DbgExGetVersion ['']
BOOL DbgExIsFullDebug ['']
void DbgExDoTracePointsDialog ['BOOL fWait']
void DbgExRestoreDefaultDebugState ['']
BOOL DbgExEnableTag ['TRACETAG tag', 'BOOL fEnable']
BOOL DbgExSetDiskFlag ['TRACETAG tag', 'BOOL fSendToDisk']
BOOL DbgExSetBreakFlag ['TRACETAG tag', 'BOOL fBreak']
BOOL DbgExIsTagEnabled ['TRACETAG tag']
TRACETAG DbgExFindTag ['char * szTagDesc']
TRACETAG DbgExTagError ['']
TRACETAG DbgExTagWarning ['']
TRACETAG DbgExTagThread ['']
TRACETAG DbgExTagAssertExit ['']
TRACETAG DbgExTagAssertStacks ['']
TRACETAG DbgExTagMemoryStrict ['']
TRACETAG DbgExTagCoMemoryStrict ['']
TRACETAG DbgExTagMemoryStrictTail ['']
TRACETAG DbgExTagMemoryStrictAlign ['']
TRACETAG DbgExTagOLEWatch ['']
TRACETAG DbgExTagRegisterTrace ['CHAR * szOwner', 'CHAR * szDescrip', 'BOOL fEnabled']
TRACETAG DbgExTagRegisterOther ['CHAR * szOwner', 'CHAR * szDescrip', 'BOOL fEnabled']
TRACETAG DbgExTagPerf ['']
BOOL DbgExTaggedTraceListEx ['TRACETAG tag', 'USHORT usFlags', 'CHAR * szFmt', 'va_list valMarker']
void DbgExTaggedTraceCallers ['TRACETAG tag', 'int iStart', 'int cTotal']
BOOL DbgExAssertImpl ['char const * szFile', 'int iLine', 'char const * szMessage']
void DbgExAssertThreadDisable ['BOOL fDisable']
size_t DbgExPreAlloc ['size_t cbRequest']
void DbgExPostFree ['']
size_t DbgExPreRealloc ['void *pvRequest', 'size_t cbRequest', 'void **ppv']
size_t DbgExPostGetSize ['size_t cb']
BOOL DbgExPostDidAlloc ['void *pvRequest', 'BOOL fActual']
void DbgExMemoryTrackDisable ['BOOL fDisable']
void DbgExCoMemoryTrackDisable ['BOOL fDisable']
void DbgExMemoryBlockTrackDisable ['void * pv']
void DbgExMemSetHeader ['void * pvRequest', 'size_t cb', 'PERFMETERTAG mt']
void DbgExTraceMemoryLeaks ['']
BOOL DbgExValidateInternalHeap ['']
LONG_PTR DbgExTraceFailL ['LONG_PTR errExpr', 'LONG_PTR errTest', 'BOOL fIgnore', 'LPSTR pstrExpr', 'LPSTR pstrFile', 'int line']
LONG_PTR DbgExTraceWin32L ['LONG_PTR errExpr', 'LONG_PTR errTest', 'BOOL fIgnore', 'LPSTR pstrExpr', 'LPSTR pstrFile', 'int line']
void DbgExTraceEnter ['LPSTR pstrExpr', 'LPSTR pstrFile', 'int line']
void DbgExTraceExit ['LPSTR pstrExpr', 'LPSTR pstrFile', 'int line']
void DbgExSetSimFailCounts ['int firstFailure', 'int cInterval']
void DbgExShowSimFailDlg ['']
BOOL DbgExFFail ['']
int DbgExGetFailCount ['']
void DbgExTrackItf ['REFIID iid', 'char * pch', 'BOOL fTrackOnQI', 'void **ppv']
void DbgExOpenViewObjectMonitor ['HWND hwndOwner', 'IUnknown *pUnk', 'BOOL fUseFrameSize']
void DbgExOpenMemoryMonitor ['']
void DbgExOpenLogFile ['LPCSTR szFName']
BSTR DbgExWsGetModule ['long row']
BSTR DbgExWsGetSection ['long row']
long DbgExWsSize ['long row']
long DbgExWsCount ['']
long DbgExWsTotal ['']
long DbgExWsEndDelta ['HANDLE hProcess']
void DbgExDumpProcessHeaps ['']
PERFTAG DbgExPerfRegister ['char * szTag', 'char * szOwner', 'char * szDescrip']
void DbgExPerfLogFnList ['PERFTAG tag', 'void * pvObj', 'const char * pchFmt', 'va_list valMarker']
void DbgExPerfDump ['']
void DbgExPerfClear ['']
void DbgExPerfTags ['']
void DbgExPerfEnable ['BOOL fEnable']
PERFMETERTAG DbgExMtRegister ['char * szTag', 'char * szOwner', 'char * szDescrip']
void DbgExMtAdd ['PERFMETERTAG mt', 'LONG lCnt', 'LONG lVal']
void DbgExMtSet ['PERFMETERTAG mt', 'LONG lCnt', 'LONG lVal']
BOOL DbgExMtSimulateOutOfMemory ['PERFMETERTAG mt', 'LONG lNewValue']
void DbgExMtOpenMonitor ['']
void DbgExMtLogDump ['LPSTR pchFile']
PERFMETERTAG DbgExMtLookupMeter ['char * szTag']
long DbgExMtGetMeterCnt ['PERFMETERTAG mt', 'BOOL fExclusive']
long DbgExMtGetMeterVal ['PERFMETERTAG mt', 'BOOL fExclusive']
void DbgExSetTopUrl ['LPWSTR pstrUrl']
void DbgExGetSymbolFromAddress ['void * pvAddr', 'char * pszBuf', 'DWORD cchBuf']
BOOL DbgExGetChkStkFill ['DWORD * pdwFill']
IMNACCTAPI HrCreateAccountManager ['IImnAccountManager **ppAccountManager']
IMNACCTAPI ValidEmailAddress ['LPSTR lpAddress']
SEC_ENTRY AddSecurityPackageA ['SEC_CHAR SEC_FAR * pszPackageName', 'SECURITY_PACKAGE_OPTIONS SEC_FAR * Options']
SEC_ENTRY AddSecurityPackageW ['SEC_WCHAR SEC_FAR * pszPackageName', 'SECURITY_PACKAGE_OPTIONS SEC_FAR * Options']
SEC_ENTRY DeleteSecurityPackageA ['SEC_CHAR SEC_FAR * pszPackageName']
SEC_ENTRY DeleteSecurityPackageW ['SEC_WCHAR SEC_FAR * pszPackageName']
SEC_ENTRY GetUserNameExA ['EXTENDED_NAME_FORMAT NameFormat', 'LPSTR lpNameBuffer', 'PULONG nSize']
SEC_ENTRY GetUserNameExW ['EXTENDED_NAME_FORMAT NameFormat', 'LPWSTR lpNameBuffer', 'PULONG nSize']
SEC_ENTRY GetComputerObjectNameA ['EXTENDED_NAME_FORMAT NameFormat', 'LPSTR lpNameBuffer', 'PULONG nSize']
SEC_ENTRY GetComputerObjectNameW ['EXTENDED_NAME_FORMAT NameFormat', 'LPWSTR lpNameBuffer', 'PULONG nSize']
SEC_ENTRY TranslateNameA ['LPCSTR lpAccountName', 'EXTENDED_NAME_FORMAT AccountNameFormat', 'EXTENDED_NAME_FORMAT DesiredNameFormat', 'LPSTR lpTranslatedName', 'PULONG nSize']
SEC_ENTRY TranslateNameW ['LPCWSTR lpAccountName', 'EXTENDED_NAME_FORMAT AccountNameFormat', 'EXTENDED_NAME_FORMAT DesiredNameFormat', 'LPWSTR lpTranslatedName', 'PULONG nSize']
SOCKHAND AFDSocket ['DWORD AddressFamily', 'DWORD SocketType', 'DWORD Protocol', 'DWORD CatId', 'GUID *pProvId']
DWORD AFDSelect ['UINT ReadCount', 'PSOCK_LIST ReadList', 'UINT WriteCount', 'PSOCK_LIST WriteList', 'UINT ExceptCount', 'PSOCK_LIST ExceptList', 'const timeval *timeout']
DWORD DbgExGetVersion ['']
BOOL DbgExIsFullDebug ['']
void DbgExDoTracePointsDialog ['BOOL fWait']
void DbgExRestoreDefaultDebugState ['']
BOOL DbgExEnableTag ['TRACETAG tag', 'BOOL fEnable']
BOOL DbgExSetDiskFlag ['TRACETAG tag', 'BOOL fSendToDisk']
BOOL DbgExSetBreakFlag ['TRACETAG tag', 'BOOL fBreak']
BOOL DbgExIsTagEnabled ['TRACETAG tag']
TRACETAG DbgExFindTag ['char * szTagDesc']
TRACETAG DbgExTagError ['']
TRACETAG DbgExTagWarning ['']
TRACETAG DbgExTagThread ['']
TRACETAG DbgExTagAssertExit ['']
TRACETAG DbgExTagAssertStacks ['']
TRACETAG DbgExTagMemoryStrict ['']
TRACETAG DbgExTagCoMemoryStrict ['']
TRACETAG DbgExTagMemoryStrictTail ['']
TRACETAG DbgExTagMemoryStrictAlign ['']
TRACETAG DbgExTagOLEWatch ['']
TRACETAG DbgExTagRegisterTrace ['CHAR * szOwner', 'CHAR * szDescrip', 'BOOL fEnabled']
TRACETAG DbgExTagRegisterOther ['CHAR * szOwner', 'CHAR * szDescrip', 'BOOL fEnabled']
TRACETAG DbgExTagPerf ['']
BOOL DbgExTaggedTraceListEx ['TRACETAG tag', 'USHORT usFlags', 'CHAR * szFmt', 'va_list valMarker']
void DbgExTaggedTraceCallers ['TRACETAG tag', 'int iStart', 'int cTotal']
BOOL DbgExAssertImpl ['char const * szFile', 'int iLine', 'char const * szMessage']
void DbgExAssertThreadDisable ['BOOL fDisable']
size_t DbgExPreAlloc ['size_t cbRequest']
void DbgExPostFree ['']
size_t DbgExPreRealloc ['void *pvRequest', 'size_t cbRequest', 'void **ppv']
size_t DbgExPostGetSize ['size_t cb']
BOOL DbgExPostDidAlloc ['void *pvRequest', 'BOOL fActual']
void DbgExMemoryTrackDisable ['BOOL fDisable']
void DbgExCoMemoryTrackDisable ['BOOL fDisable']
void DbgExMemoryBlockTrackDisable ['void * pv']
void DbgExMemSetHeader ['void * pvRequest', 'size_t cb', 'PERFMETERTAG mt']
void DbgExTraceMemoryLeaks ['']
BOOL DbgExValidateInternalHeap ['']
LONG_PTR DbgExTraceFailL ['LONG_PTR errExpr', 'LONG_PTR errTest', 'BOOL fIgnore', 'LPSTR pstrExpr', 'LPSTR pstrFile', 'int line']
LONG_PTR DbgExTraceWin32L ['LONG_PTR errExpr', 'LONG_PTR errTest', 'BOOL fIgnore', 'LPSTR pstrExpr', 'LPSTR pstrFile', 'int line']
void DbgExTraceEnter ['LPSTR pstrExpr', 'LPSTR pstrFile', 'int line']
void DbgExTraceExit ['LPSTR pstrExpr', 'LPSTR pstrFile', 'int line']
void DbgExSetSimFailCounts ['int firstFailure', 'int cInterval']
void DbgExShowSimFailDlg ['']
BOOL DbgExFFail ['']
int DbgExGetFailCount ['']
void DbgExTrackItf ['REFIID iid', 'char * pch', 'BOOL fTrackOnQI', 'void **ppv']
void DbgExOpenViewObjectMonitor ['HWND hwndOwner', 'IUnknown *pUnk', 'BOOL fUseFrameSize']
void DbgExOpenMemoryMonitor ['']
void DbgExOpenLogFile ['LPCSTR szFName']
BSTR DbgExWsGetModule ['long row']
BSTR DbgExWsGetSection ['long row']
long DbgExWsSize ['long row']
long DbgExWsCount ['']
long DbgExWsTotal ['']
long DbgExWsEndDelta ['HANDLE hProcess']
void DbgExDumpProcessHeaps ['']
PERFTAG DbgExPerfRegister ['char * szTag', 'char * szOwner', 'char * szDescrip']
void DbgExPerfLogFnList ['PERFTAG tag', 'void * pvObj', 'const char * pchFmt', 'va_list valMarker']
void DbgExPerfDump ['']
void DbgExPerfClear ['']
void DbgExPerfTags ['']
PERFMETERTAG DbgExMtRegister ['char * szTag', 'char * szOwner', 'char * szDescrip']
void DbgExMtAdd ['PERFMETERTAG mt', 'LONG lCnt', 'LONG lVal']
void DbgExMtSet ['PERFMETERTAG mt', 'LONG lCnt', 'LONG lVal']
BOOL DbgExMtSimulateOutOfMemory ['PERFMETERTAG mt', 'LONG lNewValue']
void DbgExMtOpenMonitor ['']
void DbgExMtLogDump ['LPSTR pchFile']
void DbgExSetTopUrl ['LPWSTR pstrUrl']
void DbgExGetSymbolFromAddress ['void * pvAddr', 'char * pszBuf', 'DWORD cchBuf']
BOOL DbgExGetChkStkFill ['DWORD * pdwFill']
BOOL GetGUIThreadInfo ['DWORD idThread', 'LPGUITHREADINFO lpgui']
UINT GetWindowModuleFileNameW ['HWND hwnd', 'LPWSTR lpFileName', 'UINT cchFileName']
UINT GetWindowModuleFileNameA ['HWND hwnd', 'LPSTR lpFileName', 'UINT cchFileName']
BOOL BlockInput ['BOOL fBlockIt']
UINT SendInput ['UINT cInputs', ' LPINPUT pInputs', ' int cbSize']
void NotifyWinEvent ['DWORD event', 'HWND hwnd', 'LONG idObject', 'LONG idChild']
HWINEVENTHOOK SetWinEventHook ['DWORD eventMin', 'DWORD eventMax', 'HMODULE hmodWinEventProc', ' WINEVENTPROC lpfnWinEventProc', 'DWORD idProcess', ' DWORD idThread', ' DWORD dwFlags']
BOOL UnhookWinEvent ['HWINEVENTHOOK hEvent']
HANDLE CreateWatchDogTimer ['LPCWSTR pszWatchDogName', 'DWORD dwPeriod', 'DWORD dwWait', 'DWORD dwDfltAction', 'DWORD dwParam', 'DWORD dwFlags']
HANDLE OpenWatchDogTimer ['LPCWSTR pszWatchDogName', 'DWORD dwFlags']
BOOL StartWatchDogTimer ['HANDLE hWatchDog', 'DWORD dwFlags']
BOOL StopWatchDogTimer ['HANDLE hWatchDog', 'DWORD dwFlags']
BOOL RefreshWatchDogTimer ['HANDLE hWatchDog', 'DWORD dwFlags']
void svslog_Complain ['WCHAR *lpszFormat', '...']
void svslog_Complain ['int iFormat', '...']
void svslog_Inform ['WCHAR *lpszFormat', '...']
void svslog_Inform ['int iFormat', '...']
int svslog_AssertOut ['void *pvParam', 'WCHAR *lpszFormat', '...']
void svslog_DebugInitialize ['WCHAR *a_szRegKey', 'WCHAR *a_szAppName']
int svslog_DebugOut ['unsigned int fMask', 'WCHAR *lpszFormat', '...']
void svslog_DumpBuff ['unsigned int cMask', 'unsigned char *lpBuffer', 'unsigned int cBuffer']
